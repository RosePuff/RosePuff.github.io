<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tools/Python常见错误</title>
      <link href="2021/03/24/tools/python-chang-jian-cuo-wu/"/>
      <url>2021/03/24/tools/python-chang-jian-cuo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="python中安装包出现Retrying-Retry-total-4-connect-None-read-None-redirect-None-status-None-…………"><a href="#python中安装包出现Retrying-Retry-total-4-connect-None-read-None-redirect-None-status-None-…………" class="headerlink" title="python中安装包出现Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None))…………"></a>python中安装包出现Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None))…………</h1><p>问题：</p><p>安装包出现Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by ‘ConnectTimeoutError</p><p>解决办法：</p><pre class=" language-python"><code class="language-python">pip install selectivesearch <span class="token operator">-</span>i http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>simple <span class="token operator">-</span><span class="token operator">-</span>trusted<span class="token operator">-</span>host mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com</code></pre><p>其余源：</p><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></p><p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p><p>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>使用方式如下：</p><pre class=" language-python"><code class="language-python">pip install web<span class="token punctuation">.</span>py <span class="token operator">-</span>i http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>pypi<span class="token operator">/</span>simple<span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="2021/03/15/hou-duan/java/ji-chu/she-ji-mo-shi/"/>
      <url>2021/03/15/hou-duan/java/ji-chu/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>Java中最简单的一种模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h2 id="构造器模式"><a href="#构造器模式" class="headerlink" title="构造器模式"></a>构造器模式</h2><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h3><h3 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h3><h3 id="ChannelHandlerContext"><a href="#ChannelHandlerContext" class="headerlink" title="ChannelHandlerContext"></a>ChannelHandlerContext</h3><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h3><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自学</title>
      <link href="2021/02/26/zi-xue/"/>
      <url>2021/02/26/zi-xue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自学/CS/CS61C-计算机组成原理</title>
      <link href="2021/02/14/zi-xue/cs/cs61c-ji-suan-ji-zu-cheng-yuan-li/"/>
      <url>2021/02/14/zi-xue/cs/cs61c-ji-suan-ji-zu-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统的概念"><a href="#计算机系统的概念" class="headerlink" title="计算机系统的概念"></a>计算机系统的概念</h1><h2 id="计算机体系结构的六大理念"><a href="#计算机体系结构的六大理念" class="headerlink" title="计算机体系结构的六大理念"></a>计算机体系结构的六大理念</h2><ul><li>Abstraction——抽象</li><li>Technology Trends——技术趋势（Noiot趋势）</li><li>Principle of Locality/Memory Hierarchy——事物的存储位置和储存层次的结构的原则</li><li>Parallelism——平行，并发</li><li>Performance Measurement &amp; Improvement——计算机的性能是度量以及改进的</li><li>Dependability via Redundancy——可靠性与冗余进行比较</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi/Ubuntu Server 20.04 LTS安装MySQL5.67版本</title>
      <link href="2021/02/08/raspberry-pi/ubuntu-server-20.04-lts-an-zhuang-mysql5.67-ban-ben/"/>
      <url>2021/02/08/raspberry-pi/ubuntu-server-20.04-lts-an-zhuang-mysql5.67-ban-ben/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装Ubuntu Server 20.04 LTS</title>
      <link href="2021/02/08/raspberry-pi/shu-mei-pai-ubuntu-server-20.04-lts/"/>
      <url>2021/02/08/raspberry-pi/shu-mei-pai-ubuntu-server-20.04-lts/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派-Ubuntu-Server-20-04-LTS"><a href="#树莓派-Ubuntu-Server-20-04-LTS" class="headerlink" title="树莓派 Ubuntu Server 20.04 LTS"></a>树莓派 Ubuntu Server 20.04 LTS</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li>Raspberry Pi 4B 树莓派4B（4G）</li><li>TF disk 32GB</li><li>TF 读卡器</li></ul><h3 id="主机-or-笔记本"><a href="#主机-or-笔记本" class="headerlink" title="主机 or 笔记本"></a>主机 or 笔记本</h3><p>笔记本电脑、主机、PC等</p><h3 id="软件-amp-环境"><a href="#软件-amp-环境" class="headerlink" title="软件&amp;环境"></a>软件&amp;环境</h3><ul><li>Windows10</li><li>烧制的TF disk软件（Win32disk）</li><li><a href="https://ubuntu.com/download/raspberry-pi" target="_blank" rel="noopener">Ubuntu Server 20.04 LTS</a>（下载镜像）</li><li>VS Code</li><li>路由器（开启WIFi）</li></ul><h2 id="烧录步骤-amp-配置WIFI"><a href="#烧录步骤-amp-配置WIFI" class="headerlink" title="烧录步骤&amp;配置WIFI"></a>烧录步骤&amp;配置WIFI</h2><ol><li>TF Disk插入读卡器，插入笔记本</li><li>打开Win32Disk，选择烧录的镜像，点击<code>Write</code>（两分多钟左右）</li><li><strong>修改网络配置</strong>打开<code>system-boot</code>找到<code>network-config</code>文件</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># This file contains a netplan-compatible configuration which cloud-init</span><span class="token comment" spellcheck="true"># will apply on first-boot. Please refer to the cloud-init documentation and</span><span class="token comment" spellcheck="true"># the netplan reference for full details:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># https://cloudinit.readthedocs.io/</span><span class="token comment" spellcheck="true"># https://netplan.io/reference</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Some additional examples are commented out below</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">ethernets</span><span class="token punctuation">:</span>  <span class="token key atrule">eth0</span><span class="token punctuation">:</span>    <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">wifis</span><span class="token punctuation">:</span>  <span class="token key atrule">wlan0</span><span class="token punctuation">:</span>    <span class="token key atrule">dhcp4</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">access-points</span><span class="token punctuation">:</span>      <span class="token key atrule">"Redmi-3304"</span><span class="token punctuation">:</span>        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"7752045210"</span><span class="token comment" spellcheck="true">#      myworkwifi:</span><span class="token comment" spellcheck="true">#        password: "correct battery horse staple"</span><span class="token comment" spellcheck="true">#      workssid:</span><span class="token comment" spellcheck="true">#        auth:</span><span class="token comment" spellcheck="true">#          key-management: eap</span><span class="token comment" spellcheck="true">#          method: peap</span><span class="token comment" spellcheck="true">#          identity: "me@example.com"</span><span class="token comment" spellcheck="true">#          password: "passw0rd"</span><span class="token comment" spellcheck="true">#          ca-certificate: /etc/my_ca.pem</span></code></pre><p>其中xxxxx是WiFi名字，yyyy是密码，==双引号要保留==</p><p>这样就配置好了网络. 第一次通电的时候, 会通过这些信息连接网络</p><ol start="4"><li><p><strong>配置用户名</strong>. ubuntu 留有一组默认的用户名, 要求用户第一次登陆的时候改掉它。但是第一次接通电源的时候是无法连接到 WiFi 的, 需要断电再上电. 此时通过 SSH 登陆会遇到问题 <code>passwd: Authentication token manipulation error</code>. 因此, 我们需要使默认的用户名密码, 再坚持一会儿，坚持到下一次登陆。打开文件 <code>user-data</code>, 找到</p><pre class=" language-config"><code class="language-config">chpasswd:  expire: true  list:  - ubuntu:ubuntu</code></pre><p>把 <code>expire: true</code> 改为 <code>expire: false</code> 这样系统可以用这组默认用户名密码 <code>ubuntu:ubuntu</code> 登陆系统, 直到修改了密码</p></li><li><p>保存文件，<strong>弹出</strong> TF disk。（注意是==<strong>弹出</strong>==而不是直接拔）</p></li><li><p>把 TF disk 插入树莓派 RaspBerry Pi。</p></li><li><p>接通电源。</p></li><li><p>通过主机的热点界面观察树莓派是否接入。 (这次是不会接入的:P)</p></li><li><p>等待 2 分钟, 树莓派上的绿色指示灯不再闪烁，断电</p></li><li><p>再次接通电源。</p></li><li><p>这样, 树莓派的IP也获得了. SSH 登陆树莓派.</p></li><li><p>修改默认密码！这很重要！避免被恶意攻击！</p></li></ol><pre class=" language-shell"><code class="language-shell">sudo passwd ubuntu</code></pre><h2 id="设置远程ROOT登录"><a href="#设置远程ROOT登录" class="headerlink" title="设置远程ROOT登录"></a>设置远程ROOT登录</h2><p>查看ssh服务器是否安装并启动</p><pre class=" language-shell"><code class="language-shell">sudo ps -e | grep ssh</code></pre><p>安装ssh服务器（一般已经安装好了）</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install openssh-server</code></pre><p>安装ssh客户端</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install openssh-client</code></pre><p>配置sshd文件</p><pre class=" language-shell"><code class="language-shell">sudo vim /etc/ssh/sshd_config</code></pre><p>PermitRootLogin yes （默认为#PermitRootLogin prohibit-password）</p><h2 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h2><h3 id="更换步骤"><a href="#更换步骤" class="headerlink" title="更换步骤"></a>更换步骤</h3><p>在装好后进入<strong>Ubuntu Server</strong>后发现<code>apt-get</code>安装的时候速度奇慢无比，这是因为默认的是在英国的服务器上地址，这时候需要更换为国内源即可提高下载速度</p><p>备份源文件</p><pre class=" language-shell"><code class="language-shell">sudo cp /etc/apt/sources.list /etc/apt/sources_init.list</code></pre><p>进入更改源文件</p><pre class=" language-shell"><code class="language-shell">sudo vim /etc/apt/sources.list</code></pre><p>将下面放入开头</p><h4 id="阿里云镜像"><a href="#阿里云镜像" class="headerlink" title="阿里云镜像"></a>阿里云镜像</h4><pre class=" language-shell"><code class="language-shell">deb http://mirrors.aliyun.com/ubuntu-ports/dists/ focal main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu-ports/dists/ focal-security main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu-ports/dists/ focal-updates main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu-ports/dists/ focal-proposed main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu-ports/dists/ focal-backports main restricted universe multiverse#deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</code></pre><h4 id="清华大学镜像源"><a href="#清华大学镜像源" class="headerlink" title="清华大学镜像源"></a>清华大学镜像源</h4><pre class=" language-shell"><code class="language-shell">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</code></pre><h4 id="网易镜像源"><a href="#网易镜像源" class="headerlink" title="网易镜像源"></a>网易镜像源</h4><pre class=" language-shell"><code class="language-shell">deb http://mirrors.163.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ focal main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse</code></pre><h4 id="中科大镜像源"><a href="#中科大镜像源" class="headerlink" title="中科大镜像源"></a>中科大镜像源</h4><pre class=" language-shell"><code class="language-shell">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse#deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse#deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse#deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse#deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse#deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</code></pre><p>更新</p><pre class=" language-shell"><code class="language-shell">sudo apt-get updatesudo apt-get upgrade</code></pre><h3 id="有可能出现的坑"><a href="#有可能出现的坑" class="headerlink" title="有可能出现的坑"></a>有可能出现的坑</h3><h4 id="lock锁住了进程"><a href="#lock锁住了进程" class="headerlink" title="lock锁住了进程"></a>lock锁住了进程</h4><pre class=" language-shell"><code class="language-shell">E: Could not get lock /var/cache/apt/archives/lock - open (11 Resource temporarily unavailable)E: Unable to lock the download directory</code></pre><p>是因为上个操作锁住了apt进程，可以先清理<code>lock</code></p><pre class=" language-shell"><code class="language-shell">sudo rm -rf /var/cache/apt/archives/locksudo apt-get update</code></pre><p>正常更新软件</p><h4 id="无法install软件"><a href="#无法install软件" class="headerlink" title="无法install软件"></a>无法install软件</h4><p>有可能是出现之前的更新的时候没有成功，但是再次更新的时候显示无更新</p><p>把备份的重新<code>cp</code>之后采取从新来过的，更换网易的，或阿里的源</p><h2 id="配置中文"><a href="#配置中文" class="headerlink" title="配置中文"></a>配置中文</h2><p>安装之前先查看语言环境</p><pre class=" language-shell"><code class="language-shell">echo $LANG</code></pre><p>中文包</p><pre class=" language-shell"><code class="language-shell">language-pack-zh-hans 简体中文language-pack-zh-hans-baselanguage-pack-zh-hant 繁体中文language-pack-zh-hant-base</code></pre><p>安装中文包</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install language-pack-zh-han*</code></pre><p>运行语言支持检查</p><pre class=" language-shell"><code class="language-shell">sudo apt install $(check-language-support)</code></pre><p>修改配置文件：</p><pre class=" language-shell"><code class="language-shell">sudo vim /etc/default/locale </code></pre><p>将原始内容注释掉或删掉，替换为如下内容：</p><pre class=" language-shell"><code class="language-shell">LANG="zh_CN.UTF-8"LANGUAGE="zh_CN:zh"LC_NUMERIC="zh_CN"LC_TIME="zh_CN"LC_MONETARY="zh_CN"LC_PAPER="zh_CN"LC_NAME="zh_CN"LC_ADDRESS="zh_CN"LC_TELEPHONE="zh_CN"LC_MEASUREMENT="zh_CN"LC_IDENTIFICATION="zh_CN"LC_ALL="zh_CN.UTF-8"</code></pre><p>修改环境文件:</p><pre class=" language-shell"><code class="language-shell">sudo vim /etc/environment </code></pre><p>不修改原有内容！！！直接在原内容下面新开一行加入下列内容：</p><pre class=" language-shell"><code class="language-shell">LANG="zh_CN.UTF-8"LANGUAGE="zh_CN:zh"LC_NUMERIC="zh_CN"LC_TIME="zh_CN"LC_MONETARY="zh_CN"LC_PAPER="zh_CN"LC_NAME="zh_CN"LC_ADDRESS="zh_CN"LC_TELEPHONE="zh_CN"LC_MEASUREMENT="zh_CN"LC_IDENTIFICATION="zh_CN"LC_ALL="zh_CN.UTF-8"</code></pre><p>重启</p><pre class=" language-shell"><code class="language-shell">reboot</code></pre><h2 id="配置ROOT登录"><a href="#配置ROOT登录" class="headerlink" title="配置ROOT登录"></a>配置ROOT登录</h2><ol><li>执行sudo passwd修改root账号的密码；</li><li>执行su -切换到root账号；</li><li>编辑文件/etc/ssh/sshd_config，增加下面的</li></ol><pre class=" language-shell"><code class="language-shell">PermitRootLogin yes</code></pre><h2 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h2><h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><h3 id="安装MySQL（默认8-0版本）"><a href="#安装MySQL（默认8-0版本）" class="headerlink" title="安装MySQL（默认8.0版本）"></a>安装MySQL（默认8.0版本）</h3><pre class=" language-shell"><code class="language-shell">sudo apt-get updatesudo apt-get install mysql-serversudo apt-get install libmysqlclient-devsudo apt-get pip3 install mysqlclient</code></pre><p>如果不是在root模式的话目前是进不去的，需要进入root模式</p><pre class=" language-shell"><code class="language-shell">sudo -s</code></pre><pre class=" language-sql"><code class="language-sql">root<span class="token variable">@ubuntu</span>:<span class="token operator">/</span>home<span class="token operator">/</span><span class="token number">cdd</span><span class="token operator">/</span>Desktop<span class="token operator">/</span>Django<span class="token operator">/</span>typeidea<span class="token operator">-</span>env<span class="token operator">/</span>typeidea<span class="token operator">/</span>typeidea<span class="token comment" spellcheck="true"># mysql</span>Welcome <span class="token keyword">to</span> the MySQL monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token operator">or</span> \g<span class="token punctuation">.</span>Your MySQL connection id <span class="token operator">is</span> <span class="token number">22</span>Server version: <span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">21</span><span class="token operator">-</span>0ubuntu0<span class="token number">.20</span><span class="token punctuation">.</span><span class="token number">04.4</span> <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">,</span> Oracle <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> its affiliates<span class="token punctuation">.</span> <span class="token keyword">All</span> rights reserved<span class="token punctuation">.</span>Oracle <span class="token operator">is</span> <span class="token number">a</span> registered trademark <span class="token keyword">of</span> Oracle Corporation <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> itsaffiliates<span class="token punctuation">.</span> Other names may <span class="token number">be</span> trademarks <span class="token keyword">of</span> their respectiveowners<span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token string">'help;'</span> <span class="token operator">or</span> <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'\c'</span> <span class="token keyword">to</span> clear the <span class="token keyword">current</span> input statement<span class="token punctuation">.</span>mysql<span class="token operator">></span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 修改密码</span>mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'liu1995'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED WITH caching_sha2_password BY '</span>liu1995'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 刷新权限</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">exit</span><span class="token punctuation">;</span></code></pre><h4 id="这里就是设置完成新密码了——Test："><a href="#这里就是设置完成新密码了——Test：" class="headerlink" title="这里就是设置完成新密码了——Test："></a>这里就是设置完成新密码了——Test：</h4><pre class=" language-shell"><code class="language-shell">root@ubuntu:~# mysql -u root -pEnter password: # 你自己设置的密码Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 8Server version: 8.0.23-0ubuntu0.20.04.1 (Ubuntu)Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql></code></pre><h4 id="设置允许远程登录"><a href="#设置允许远程登录" class="headerlink" title="设置允许远程登录"></a>设置允许远程登录</h4><pre class=" language-shell"><code class="language-shell">vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><p>找到bind-address属性，后面的ip地址改为<code>0.0.0.0</code></p><pre class=" language-shell"><code class="language-shell">bind-address: 0.0.0.0:wq# 重启service MySQL restart</code></pre><p>登录到sql控制台</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>flush provileges<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 刷新</span></code></pre><p>由于启动了防火墙</p><pre class=" language-shell"><code class="language-shell">ufw allow 3306</code></pre><h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><pre class=" language-shell"><code class="language-shell"># 更新并安装sudo apt-get updatesudo apt install dirmngr gnupg apt-transport-https ca-certificates software-properties-commonsudo apt-get mongodb# 导入存储库钥匙wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -sudo add-apt-repository 'deb [arch=amd64] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse'</code></pre><p>MongoDB的最新版本是4.4版。 要安装另一个版本，请用适当的版本替换4.4。 启用存储库后，通过输入以下命令安装mongodb-org元软件包</p><pre class=" language-shell"><code class="language-shell">sudo apt install mongodb-org</code></pre><p>MongoDB在安装的时候会在<code>/etc/mongod.conf</code>创建文件这个就是配置文件了，数据目录是<code>/var/lib/mongodb</code>and日志目录<code>/var/log/mongodb</code></p><p>验证是否启动成功，请输入以下命令</p><pre class=" language-sql"><code class="language-sql">mongo <span class="token comment" spellcheck="true">--eval 'db.runCommand({ connectionStatus: 1 })'</span></code></pre><pre class=" language-sh"><code class="language-sh">MongoDB shell version v4.4.0connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodbImplicit session: session { "id" : UUID("2af3ab0e-2197-4152-8bd0-e33efffe1464") }MongoDB server version: 4.4.0{  "authInfo" : {    "authenticatedUsers" : [ ],    "authenticatedUserRoles" : [ ]  },  "ok" : 1}</code></pre><p>ok字段中的值为1表示成功</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><pre class=" language-shell"><code class="language-shell">sudo service mongod stopsudo apt-get purge mongodb-org*sudo rm -r /var/log/mongodbsudo rm -r /var/lib/mongodb</code></pre>]]></content>
      
      
      <categories>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EMQ X 消息服务器</title>
      <link href="2021/02/08/hou-duan/zhong-jian-jian/emq-x/"/>
      <url>2021/02/08/hou-duan/zhong-jian-jian/emq-x/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="What-is-EMQ-X？"><a href="#What-is-EMQ-X？" class="headerlink" title="What is EMQ X？"></a>What is EMQ X？</h2><p>首先了解一个概念，EMQ X是一个开源百万级别的分布式MQTT消息服务器（MQTT Messageing Broker），用于支持各种接入标准的MQTT协议的设备，实现从设备端到服务器端的消息转递（俗称中间件）以及从服务端到设备端的设备控制消息转发等。从而实现云端与线下的物联网的数据采集以及控制。</p><h2 id="Why-Choose-EMQ-X"><a href="#Why-Choose-EMQ-X" class="headerlink" title="Why Choose EMQ X"></a>Why Choose EMQ X</h2><p>首先EMQ与别的服务器相比，有着以下的有点：</p><ul><li>多版本的迭代，因为是开源所以经受过各种客户的生产环境严苛的操作</li><li>EMQ支持丰富的物联网协议，例：MQTT、MQTT-SN、CoAP、 LwM2M、LoRaWAN 和 WebSocket 等</li><li>大量优化过后的架构设计，支持超大规模的设备连接，企业单机版可支持百万级别，集群部署好可以支撑千万级别的连接</li><li>灵活易拓展，支持定制化</li><li>本地技术支持服务</li></ul><p>主题的使用是没有限制的，对于性能来说影响不大</p><p>对于开源版来说的话并不支持数据存储</p><h2 id="EMQ-X-与物联网平台的关系是什么"><a href="#EMQ-X-与物联网平台的关系是什么" class="headerlink" title="EMQ X 与物联网平台的关系是什么"></a>EMQ X 与物联网平台的关系是什么</h2><p>典型的物联网平台包括设备硬件、数据采集、数据存储、分析、Web / 移动应用等。EMQ X 位于数据采集这一层，分别与硬件和数据存储、分析进行交互，是物联网平台的核心：前端的硬件通过 MQTT 协议与位于数据采集层的 EMQ X 交互，通过 EMQ X 将数据采集后，通过 EMQ X 提供的数据接口，将数据保存到后台的持久化平台中（各种关系型数据库和 NOSQL 数据库），或者流式数据处理框架等，上层应用通过这些数据分析后得到的结果呈现给最终用户</p><h2 id="MQTT-协议与-HTTP-协议相比，有何优点和弱点"><a href="#MQTT-协议与-HTTP-协议相比，有何优点和弱点" class="headerlink" title="MQTT 协议与 HTTP 协议相比，有何优点和弱点"></a>MQTT 协议与 HTTP 协议相比，有何优点和弱点</h2><p>HTTP 协议是一个无状态的协议，每个 HTTP 请求为 TCP 短连接，每次请求都需要重新创建一个 TCP 连接（可以通过 keep-alive 属性来优化 TCP 连接的使用，多个 HTTP 请求可以共享该 TCP 连接）；而 MQTT 协议为长连接协议，每个客户端都会保持一个长连接。与 HTTP 协议相比优势在于 ：</p><ul><li>MQTT 的长连接可以用于实现从设备端到服务器端的消息传送之外，还可以实现从服务器端到设备端的实时控制消息发送，而 HTTP 协议要实现此功能只能通过轮询的方式，效率相对来说比较低；</li><li>MQTT 协议在维护连接的时候会发送心跳包，因此协议以最小代价内置支持设备 “探活” 的功能，而 HTTP 协议要实现此功能的话需要单独发出 HTTP 请求，实现的代价会更高；</li><li>低带宽、低功耗。MQTT 在传输报文的大小上与 HTTP 相比有巨大的优势，因为 MQTT 协议在连接建立之后，由于避免了建立连接所需要的额外的资源消耗，发送实际数据的时候报文传输所需带宽与 HTTP 相比有很大的优势，参考网上<a href="https://medium.com/@flespi/http-vs-mqtt-performance-tests-f9adde693b5f" target="_blank" rel="noopener">有人做的测评 (opens new window)</a>，发送一样大小的数据，MQTT 比 HTTP 少近 50 倍的网络传输数据，而且速度快了将近 20 倍。在网上有人做的<a href="http://stephendnicholas.com/posts/power-profiling-mqtt-vs-https" target="_blank" rel="noopener">另外一个评测显示 (opens new window)</a>，接收消息的场景，MQTT 协议的耗电量为 HTTP 协议的百分之一，而发送数据的时候 MQTT 协议的耗电量为 HTTP 协议的十分之一；</li><li>MQTT 提供消息质量控制（QoS），消息质量等级越高，消息交付的质量就越有保障，在物联网的应用场景下，用户可以根据不同的使用场景来设定不同的消息质量等级；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EMQ X </tag>
            
            <tag> 消息服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8使用Comparator排序</title>
      <link href="2021/02/05/hou-duan/java/ji-chu/java8-shi-yong-comparator-pai-xu/"/>
      <url>2021/02/05/hou-duan/java/ji-chu/java8-shi-yong-comparator-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8使用Comparator-comparing排序"><a href="#Java8使用Comparator-comparing排序" class="headerlink" title="Java8使用Comparator.comparing排序"></a>Java8使用Comparator.comparing排序</h1><h2 id="使用外部比较器Comparator进行排序比较"><a href="#使用外部比较器Comparator进行排序比较" class="headerlink" title="使用外部比较器Comparator进行排序比较"></a>使用外部比较器Comparator进行排序比较</h2><p>正常使用对集合元素进行排序比较的时候，可以使用<code>java.util.Comparator</code> 创建一个比较器来进行排序。Comparator接口同样也是一个函数式接口，可以使用<code>lambda</code>表达式，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparatorDemoTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AppMi appMi1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppMi</span><span class="token punctuation">(</span><span class="token string">"testDemo1"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.1.0"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AppMi appMi2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppMi</span><span class="token punctuation">(</span><span class="token string">"testDemo1"</span><span class="token punctuation">,</span> <span class="token string">"1.0.1"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.1.0"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AppMi appMi3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppMi</span><span class="token punctuation">(</span><span class="token string">"testDemo1"</span><span class="token punctuation">,</span> <span class="token string">"1.0.2"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.1.0"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AppMi appMi4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppMi</span><span class="token punctuation">(</span><span class="token string">"testDemo1"</span><span class="token punctuation">,</span> <span class="token string">"1.0.3"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.1.0"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AppMi appMi5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppMi</span><span class="token punctuation">(</span><span class="token string">"testDemo1"</span><span class="token punctuation">,</span> <span class="token string">"1.0.4"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.0.0"</span><span class="token punctuation">,</span> <span class="token string">"4.1.0"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>AppMi<span class="token operator">></span> appMiList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appMiList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>appMi1<span class="token punctuation">)</span><span class="token punctuation">;</span>        appMiList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>appMi2<span class="token punctuation">)</span><span class="token punctuation">;</span>        appMiList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>appMi3<span class="token punctuation">)</span><span class="token punctuation">;</span>        appMiList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>appMi4<span class="token punctuation">)</span><span class="token punctuation">;</span>        appMiList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>appMi5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> platformData <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        appMiList <span class="token operator">=</span> appMiList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>nexTest <span class="token operator">-</span><span class="token operator">></span> nexTest<span class="token punctuation">.</span><span class="token function">getPlatformData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> platformData<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>nexTest <span class="token operator">-</span><span class="token operator">></span> nexTest<span class="token punctuation">.</span><span class="token function">getMainAppVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>AppMi<span class="token operator">:</span><span class="token operator">:</span>getAppVersion<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sort 对象接收一个 Comparator 函数式接口，可以传入一个lambda表达式</span>        appMiList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span><span class="token function">getProductKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getProductKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>appMiList<span class="token punctuation">,</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span><span class="token function">getProductKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getProductKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appMiList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>appMiList<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>AppMi<span class="token operator">:</span><span class="token operator">:</span>getAppVersion<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span>AppMi<span class="token operator">:</span><span class="token operator">:</span>getMainAppVersion<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appMiList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AppMi</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String productKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> String appVersion<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mainAppVersion<span class="token punctuation">;</span>    <span class="token keyword">private</span> String jesVersion<span class="token punctuation">;</span>    <span class="token keyword">private</span> String minFirmwareVersion<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> platformData<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getProductKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> productKey<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProductKey</span><span class="token punctuation">(</span>String productKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productKey <span class="token operator">=</span> productKey<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAppVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> appVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAppVersion</span><span class="token punctuation">(</span>String appVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appVersion <span class="token operator">=</span> appVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMainAppVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mainAppVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMainAppVersion</span><span class="token punctuation">(</span>String mainAppVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainAppVersion <span class="token operator">=</span> mainAppVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getJesVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jesVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJesVersion</span><span class="token punctuation">(</span>String jesVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jesVersion <span class="token operator">=</span> jesVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMinFirmwareVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minFirmwareVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMinFirmwareVersion</span><span class="token punctuation">(</span>String minFirmwareVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minFirmwareVersion <span class="token operator">=</span> minFirmwareVersion<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlatformData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> platformData<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPlatformData</span><span class="token punctuation">(</span><span class="token keyword">int</span> platformData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>platformData <span class="token operator">=</span> platformData<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AppMi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AppMi</span><span class="token punctuation">(</span>String productKey<span class="token punctuation">,</span> String appVersion<span class="token punctuation">,</span> String mainAppVersion<span class="token punctuation">,</span> String jesVersion<span class="token punctuation">,</span> String minFirmwareVersion<span class="token punctuation">,</span><span class="token keyword">int</span> platformData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productKey <span class="token operator">=</span> productKey<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appVersion <span class="token operator">=</span> appVersion<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainAppVersion <span class="token operator">=</span> mainAppVersion<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jesVersion <span class="token operator">=</span> jesVersion<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minFirmwareVersion <span class="token operator">=</span> minFirmwareVersion<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>platformData <span class="token operator">=</span> platformData<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi/ubuntu Server常用命令</title>
      <link href="2021/01/31/raspberry-pi/ubuntu-server-chang-yong-ming-ling/"/>
      <url>2021/01/31/raspberry-pi/ubuntu-server-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取当前版本号</span><span class="token function">sudo</span> lsb release -a<span class="token comment" spellcheck="true"># 更新源以及缓存</span><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources_init.list<span class="token function">sudo</span> vim /etc/apt/sources.list<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token comment" spellcheck="true"># 重启</span><span class="token function">sudo</span> <span class="token function">reboot</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry Pi/树莓派WiFi实现远程控制</title>
      <link href="2021/01/25/raspberry-pi/shu-mei-pai-wifi-shi-xian-yuan-cheng-kong-zhi/"/>
      <url>2021/01/25/raspberry-pi/shu-mei-pai-wifi-shi-xian-yuan-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派WiFi实现远程控制"><a href="#树莓派WiFi实现远程控制" class="headerlink" title="树莓派WiFi实现远程控制"></a>树莓派WiFi实现远程控制</h1><p>总的来说有好几种远程控制的方法</p><ul><li>FTP</li><li>Ngrok（收费）</li><li>固定IP映射公网（DMZ）</li></ul><h2 id="固定IP映射公网（DMZ）"><a href="#固定IP映射公网（DMZ）" class="headerlink" title="固定IP映射公网（DMZ）"></a>固定IP映射公网（DMZ）</h2><p>我用的是红米的AC2100</p><p>这个一般上路由器都是会带有的</p><p>直接找到你当前树莓派的IP地址，之后使用静态IP固定下来</p><p>输入IP地址，点击应用</p><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>程序设计/Java8_Stem流</title>
      <link href="2021/01/19/cheng-xu-she-ji/java8-stem-liu/"/>
      <url>2021/01/19/cheng-xu-she-ji/java8-stem-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="实战攻略：Java8-Stream"><a href="#实战攻略：Java8-Stream" class="headerlink" title="实战攻略：Java8-Stream"></a>实战攻略：Java8-Stream</h1><h1 id="1-函数式的思考"><a href="#1-函数式的思考" class="headerlink" title="1.函数式的思考"></a>1.函数式的思考</h1><h2 id="1-1声明式编程"><a href="#1-1声明式编程" class="headerlink" title="1.1声明式编程"></a>1.1声明式编程</h2><p>一般通过编程实现一个系统有两种思考方式。</p><p>一种专注于如何实现，比如：“先做这个，紧接着做这个，然后…”。这种“如何做”风格的编程非常适合经典的面向对象，有时候也称之为<strong>命令式编程</strong></p><p>另一种更关注要做什么。这种“要做什么”风格的编程通常被称之为<strong>声明式编程</strong>。你制定规则，给出希望实现的目标，让系统来决定如何实现这个目标。好处也十分明显，因为更接近问题陈述</p><h2 id="1-2-为什么要采用函数式编程"><a href="#1-2-为什么要采用函数式编程" class="headerlink" title="1.2 为什么要采用函数式编程"></a>1.2 为什么要采用函数式编程</h2><ol><li>lambda表达式</li></ol><p>可以把lambda表达式理解为一种简洁的可传递匿名函数：它没有名称，但它有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表。</p><ul><li>匿名–它不像普通的方法那样有一个名确的名称</li><li>函数–因为lambda函数不像方法那样属于某个特定的类</li></ul><h1 id="2-引入流"><a href="#2-引入流" class="headerlink" title="2 引入流"></a>2 引入流</h1><h2 id="2-1-流是什么？"><a href="#2-1-流是什么？" class="headerlink" title="2.1 流是什么？"></a>2.1 流是什么？</h2><p>流是Java 8 API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。就现在来说，你可以把它们看成遍历数据集的高级迭代器。此外，流还可以透明地并行处理，你无须写任何多线程代码了。</p><p>从软件工程的角度看，新的方法有几个显而易见的好处：</p><ul><li>代码是以声明性方式写的：说明想要完成什么而不是说明如何实现一个操作（利用循环和if条件等控制流语句）。这种方法加上行为参数化让你可以轻松应对变化的需求：你很容易再创建一个代码版本，利用Lambda表达式来筛选而用不着去复制粘贴代码。这种方式的另一个好处是，线程模型与查询操作实现了解耦。具体的执行既可以串行，也可以并行。</li><li>你可以把几个基础操作链接起来，来表达复杂的数据处理流水线（在filter后面接上sorted、map和collect操作，如图所示），同时保持代码清晰可读。filter的结果被传给了sorted方法，再传给map方法，最后传给collect方法。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/163287/1610374238186-df3e3a70-088c-4541-b114-3606e31dd62e.jpeg?x-oss-process=image%2Fresize%2Cw_1500" alt="D4F772C9-F449-4EC7-9910-831BFC43DA5D.jpeg"></p><p>因为filter、sorted、map和collect等操作是与具体线程模型无关的高层次构件，所以它们的内部实现可以是单线程的，也可能透明地充分利用你的多核架构！在实践中，这意味着你用不着为了让某些数据处理任务并行而去操心线程和锁，Stream API都替你做好了！</p><p>总结一下，Java 8中的Stream API可以让你写出这样的代码：</p><ul><li><ul><li>声明性——更简洁，更易读；</li><li>可复合——更灵活；</li><li>可并行——性能更好。</li></ul></li></ul><p>以下内容中使用的例子：一个menu，它只是一张菜肴列表</p><pre><code>List&lt;Dish&gt; menu = Arrays.asList(    new Dish(&quot;pork&quot;, false, 800, Dish.Type.MEAT),    new Dish(&quot;beef&quot;, false, 700, Dish.Type.MEAT),    new Dish(&quot;chicken&quot;, false, 400, Dish.Type.MEAT),    new Dish(&quot;french fries&quot;, true, 530, Dish.Type.OTHER),    new Dish(&quot;rice&quot;, true, 350, Dish.Type.OTHER),    new Dish(&quot;season fruit&quot;, true, 120, Dish.Type.OTHER),    new Dish(&quot;pizza&quot;, true, 550, Dish.Type.OTHER),    new Dish(&quot;prawns&quot;, false, 300, Dish.Type.FISH),    new Dish(&quot;salmon&quot;, false, 450, Dish.Type.FISH) );</code></pre><p>Dish 类定义：</p><pre><code>public class Dish {    private final String name;    private final boolean vegetarian;    private final int calories;    private final Type type;    public Dish(String name, boolean vegetarian, int calories, Type type) {        this.name = name;        this.vegetarian = vegetarian;        this.calories = calories;        this.type = type;    }    public String getName() {        return name;    }    public boolean isVegetarian() {        return vegetarian;    }    public int getCalories() {        return calories;    }    public Type getType() {        return type;    }    @Override    public String toString() {        return name;    }    public enum Type { MEAT, FISH, OTHER }}</code></pre><h2 id="2-2-流简介"><a href="#2-2-流简介" class="headerlink" title="2.2 流简介"></a>2.2 流简介</h2><p>简短的定义就是“从支持数据处理操作的源生成的元素序列”。</p><ul><li><ul><li><strong>元素序列</strong>——就像集合一样，流也提供了一个接口，可以访问特定元素类型的一组有序值。因为集合是数据结构，所以它的主要目的是以特定的时间/空间复杂度存储和访问元素（如ArrayList 与LinkedList）。但流的目的在于表达计算，比如你前面见到的filter、sorted和map。集合讲的是数据，流讲的是计算。后面几节会详细解释这个思想。</li><li><strong>源</strong>——流会使用一个提供数据的源，比如集合、数组或I/O资源。请注意，从有序集合生成流时会保留原有的顺序。由列表生成的流，其元素顺序与列表一致。</li><li><strong>数据处理操作</strong>——流的数据处理功能支持类似于数据库的操作，以及函数式编程语言中的常用操作，比如filter、map、reduce、find、match、sort等。流操作可以顺序执行，也可以并行执行。</li></ul></li></ul><p>此外，流操作有两个重要的特点：</p><ul><li><ul><li><strong>流水线</strong>——很多流操作本身会返回一个流，这样多个操作就可以链接起来，构成一个更大的流水线。这使得一些优化成为可能，比如处理延迟和短路。流水线的操作可以看作类似对数据源进行数据库查询。</li><li><strong>内部迭代</strong>——与集合使用迭代器进行显式迭代不同，流的迭代操作是在后台进行的。</li></ul></li></ul><pre><code>import static java.util.stream.Collectors.toList;List&lt;String&gt; threeHighCaloricDishNames =  menu.stream()       // 从menu（菜肴列表）获得流      .filter(dish -&gt; dish.getCalories() &gt; 300)      // 建立操作流水线：首先选出高热量的菜肴      .map(Dish::getName)       // 获取菜名      .limit(3)       // 只选择头三个      .collect(toList());      // 将结果保存在另一个List中System.out.println(threeHighCaloricDishNames);       // 结果是[pork, beef, chicken]</code></pre><p>本例先是对menu调用stream方法，由菜单得到一个流。数据<strong>源</strong>是菜肴列表（菜单），它给流提供一个<strong>元素序列</strong>。接下来，对流应用一系列<strong>数据处理操作</strong>：filter、map、limit和collect。除了collect之外，所有这些操作都会返回另一个流，这样它们就可以接成一条<strong>流水线</strong>，于是就可以看作对源的一个查询。最后，collect操作开始处理流水线，并返回结果（它和别的操作不一样，因为它返回的不是流，在这里是一个List）。在调用collect之前，没有任何结果产生，实际上根本就没有从menu里选择元素。你可以这么理解：链中的方法调用都在排队等待，直到调用collect。图4-2显示了流操作的顺序：filter、map、limit、collect，每个操作简介如下。</p><ul><li>filter——接受一个Lambda，从流中排除某些元素。在本例中，通过传递Lambda d -&gt; d.getCalories() &gt; 300，选择出热量超过300卡路里的菜肴。</li><li>map——接受一个Lambda，将元素转换成其他形式或提取信息。在本例中，通过传递方法引用Dish::getName，相当于Lambda d -&gt; d.getName()，提取了每道菜的菜名。</li><li>limit——截断流，使其元素不超过给定数量。</li><li>collect——将流转换为其他形式。在本例中，流被转换为一个列表。它看起来有点儿像变魔术，稍后会详细解释collect的工作原理。现在，你可以把collect看作能够接受各种方案作为参数，并将流中的元素累积成为一个汇总结果的操作。这里的toList()就是将流转换为列表的方案。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610454893944-c559f99d-6dba-41b3-90de-40fa6ae5b49e.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><h2 id="2-3-流与集合"><a href="#2-3-流与集合" class="headerlink" title="2.3 流与集合"></a>2.3 流与集合</h2><p>先来打个直观的比方吧。比如说存在DVD里的电影，这就是一个集合（也许是字节，也许是帧，这个无所谓），因为它包含了整个数据结构。现在再来想想在互联网上通过视频流看同样的电影。现在这是一个流（字节流或帧流）。流媒体视频播放器只要提前下载用户观看位置的那几帧就可以了，这样不用等到流中大部分值计算出来，你就可以显示流的开始部分了（想想观看直播足球赛）。特别要注意，视频播放器可能没有将整个流作为集合，保存所需要的内存缓冲区——而且要是非得等到最后一帧出现才能开始看，那等待的时间就太长了。出于实现的考虑，你也可以让视频播放器把流的一部分缓存在集合里，但和概念上的差异不是一回事。</p><p>粗略地说，集合与流之间的差异就在于什么时候进行计算。集合是一个内存中的数据结构，它包含数据结构中目前所有的值——集合中的每个元素都得先算出来才能添加到集合中（你可以往集合里加东西或者删东西，但是不管什么时候，集合中的每个元素都是放在内存里的，元素都得先算出来才能成为集合的一部分）。</p><p>相比之下，流则是在概念上固定的数据结构（你不能添加或删除元素），其元素是按需计算的。这对编程有很大的好处。这个理念就是用户仅仅从流中提取需要的值，而这些值——在用户看不见的地方——只会按需生成。这是一种生产者–消费者的关系。从另一个角度来说，流就像是一个延迟创建的集合：只有在消费者要求的时候才会计算值（用管理学的话说这就是需求驱动，甚至是实时制造)。</p><p>与此相反，集合则是急切创建的（供应商驱动：先把仓库装满，再开始卖，就像那些昙花一现的圣诞新玩意儿一样）。以质数为例，要是想创建一个包含所有质数的集合，那这个程序算起来就没完没了了，因为总有新的质数要算，然后把它加到集合里面。当然这个集合是永远也创建不完的，消费者这辈子都见不着了。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610455320439-5740a162-ec25-4e2b-9473-34580d111d0d.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><h3 id="2-3-1-只能遍历一次"><a href="#2-3-1-只能遍历一次" class="headerlink" title="2.3.1 只能遍历一次"></a>2.3.1 只能遍历一次</h3><p>请注意，和迭代器类似，流只能遍历一次。遍历完之后，我们就说这个流已经被消费掉了。你可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样（这里假设它是集合之类的可重复的源，如果是I/O通道就“没戏”了）。例如，以下代码会抛出一个异常，说流已被消费掉了：</p><pre><code>List&lt;String&gt; title = Arrays.asList(&quot;Modern&quot;, &quot;Java&quot;, &quot;In&quot;, &quot;Action&quot;);Stream&lt;String&gt; s = title.stream();s.forEach(System.out::println);       // 打印标题中的每个单词s.forEach(System.out::println);      // java.lang.IllegalStateException:流已被操作或关闭</code></pre><p>所以要记得，流只能消费一次！</p><h3 id="2-3-2-外部迭代与内部迭代"><a href="#2-3-2-外部迭代与内部迭代" class="headerlink" title="2.3.2 外部迭代与内部迭代"></a>2.3.2 外部迭代与内部迭代</h3><p>使用Collection接口需要用户去做迭代（比如用for-each），这称为外部迭代。相反，Stream库使用内部迭代——它帮你把迭代做了，还把得到的流值存在了某个地方，你只要给出一个函数说要干什么就可以了。下面的代码列表说明了这种区别。</p><p>代码清单 1　集合：用for-each循环外部迭代</p><pre><code>List&lt;String&gt; names = new ArrayList&lt;&gt;();for(Dish dish: menu){       # 显式顺序迭代菜单列表    names.add(dish.getName());       # 提取名称并将其添加到累加器}</code></pre><p>请注意，for-each还隐藏了迭代中的一些复杂性。for-each结构是一个语法糖，它背后的东西用Iterator对象表达出来会更丑陋。</p><p>代码清单 2　集合：用背后的迭代器做外部迭代</p><pre><code>List&lt;String&gt; names = new ArrayList&lt;&gt;();Iterator&lt;String&gt; iterator = menu.iterator();while(iterator.hasNext()) {       # 显式迭代    Dish dish = iterator.next();    names.add(dish.getName());}</code></pre><p>代码清单 3　流：内部迭代</p><pre><code>List&lt;String&gt; names = menu.stream()                         .map(Dish::getName)       # 用getName方法参数化map，提取菜名                         .collect(toList());       # 开始执行操作流水线；没有迭代！</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610455746256-ae179d44-f1b7-453b-8f1d-176f9bdb8e63.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>测验：请用一种流操作重构以下代码</p><pre><code>List&lt;String&gt; highCaloricDishes = new ArrayList&lt;&gt;();Iterator&lt;String&gt; iterator = menu.iterator();while(iterator.hasNext()) {    Dish dish = iterator.next();    if(dish.getCalories() &gt; 300) {        highCaloricDishes.add(d.getName());    }}</code></pre><p>答案：密码-&gt;6666</p><pre class=" language-java"><code class="language-java">流水线中最后一个操作count返回一个<span class="token keyword">long</span>，这是一个非Stream的值。因此它是一个终端操作。所有前面的操作，filter、distinct、limit，都是连接起来的，并返回一个Stream，因此它们是中间操作。</code></pre><h2 id="2-4-流操作"><a href="#2-4-流操作" class="headerlink" title="2.4 流操作"></a>2.4 流操作</h2><p>java.util.stream.Stream中的Stream接口定义了许多操作。它们可以分为两大类。再来看一下前面的例子：</p><pre><code>List&lt;String&gt; names = menu.stream()       // 从菜单获得流                         .filter(dish -&gt; dish.getCalories() &gt; 300)       // 中间操作                         .map(Dish::getName)       // 中间操作                         .limit(3)       // 中间操作                         .collect(toList());       // 将Stream转换为List</code></pre><p>你可以看到两类操作：</p><ul><li>filter、map和limit可以连成一条流水线；</li><li>collect触发流水线执行并关闭它。</li></ul><p>可以连接起来的流操作称为中间操作，关闭流的操作称为终端操作。图4-5中展示了这两类操作。这种区分有什么意义呢？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610456020514-a9cbad5e-aaac-4bb9-bd31-e59f65b124e5.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><h3 id="2-4-1-中间操作"><a href="#2-4-1-中间操作" class="headerlink" title="2.4.1 中间操作"></a>2.4.1 中间操作</h3><p>诸如filter或sorted等中间操作会返回另一个流。这让多个操作可以连接起来形成一个查询。重要的是，除非流水线上触发一个终端操作，否则中间操作不会执行任何处理——它们很懒。这是因为中间操作一般都可以合并起来，在终端操作时一次性全部处理。</p><p>为了搞清楚流水线中到底发生了什么，我们把代码改一改，让每个Lambda都打印出当前处理的菜肴（就像很多演示和调试技巧一样，这种编程风格要是搁在生产代码里那就吓死人了，但是学习的时候可以直接看清楚求值的顺序）：</p><pre><code>List&lt;String&gt; names =    menu.stream()        .filter(dish -&gt; {                          System.out.println(&quot;filtering:&quot; + dish.getName());                          return dish.getCalories() &gt; 300;                     })   // 打印当前筛选的菜肴        .map(dish -&gt; {                       System.out.println(&quot;mapping:&quot; + dish.getName());                       return dish.getName();                  })  // 提取菜名时打印出来        .limit(3)        .collect(toList());System.out.println(names);</code></pre><p>此代码执行时将打印：</p><pre><code>filtering:porkmapping:porkfiltering:beefmapping:beeffiltering:chickenmapping:chicken[pork, beef, chicken]</code></pre><p>你会发现，有好几种优化利用了流的延迟性质。第一，尽管很多菜的热量都高于300卡路里，但只选出了前三个！这是因为limit操作和一种称为<strong>短路</strong>的技巧。第二，尽管filter和map是两个独立的操作，但它们合并到同一次遍历中了（我们把这种技术叫作<strong>循环合并</strong>）。</p><h3 id="2-4-2-终端操作"><a href="#2-4-2-终端操作" class="headerlink" title="2.4.2 终端操作"></a>2.4.2 终端操作</h3><p>终端操作会从流的流水线生成结果，其结果是任何不是流的值，比如List、Integer，甚至void。例如，在下面的流水线中，forEach是一个返回void的终端操作，它会对源中的每道菜应用一个Lambda。把System.out.println传递给forEach，并要求它打印出由menu生成的流中的每一个Dish：</p><pre><code>menu.stream().forEach(System.out::println);</code></pre><p>为了检验你对中间操作和终端操作的理解程度，试试以下测验吧。</p><p>测验4.2：中间操作与终端操作</p><p>在下列流水线中，你能找出中间操作和终端操作吗？</p><pre><code>long count = menu.stream()                 .filter(dish -&gt; dish.getCalories() &gt; 300)                 .distinct()                 .limit(3)                 .count();</code></pre><p>答案：密码-&gt;6666</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#9uRQx" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#9uRQx</a></p><h3 id="2-4-3-使用流"><a href="#2-4-3-使用流" class="headerlink" title="2.4.3 使用流"></a>2.4.3 使用流</h3><p>总而言之，流的使用一般包括三件事：</p><ul><li>一个<strong>数据源</strong>（如集合）来执行一个查询；</li><li>一个<strong>中间操作</strong>链，形成一条流的流水线；</li><li>一个<strong>终端操作</strong>，执行流水线，并能生成结果。</li></ul><p>流的流水线背后的理念类似于构建器模式。在构建器模式中有一个调用链用来设置一套配置（对流来说这就是一个中间操作链），接着是调用build方法（对流来说就是终端操作）。</p><h1 id="3-使用流"><a href="#3-使用流" class="headerlink" title="3. 使用流"></a>3. 使用流</h1><p>内容总览：</p><ul><li>筛选、切片和映射</li><li>查找、匹配和归约</li><li>使用数值范围等数值流</li><li>从多个源创建流</li><li>无限流</li></ul><h2 id="3-1-筛选"><a href="#3-1-筛选" class="headerlink" title="3.1 筛选"></a>3.1 筛选</h2><h3 id="3-1-1-用谓词筛选"><a href="#3-1-1-用谓词筛选" class="headerlink" title="3.1.1　用谓词筛选"></a>3.1.1　用谓词筛选</h3><p>Stream接口支持filter方法（你现在应该很熟悉了）。该操作会接受一个谓词（一个返回boolean的函数）作为参数，并返回一个包括所有符合谓词的元素的流。例如，你可以像图5-1所示的这样，筛选出所有素菜，创建一张素食菜单。</p><pre><code>List&lt;Dish&gt; vegetarianMenu = menu.stream()                                .filter(Dish::isVegetarian)   // 方法引用检查菜肴是否适合素食者                                .collect(toList());</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610459969628-36ed50d2-3c7c-48fa-8dcc-bfe04e0f09a9.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><h3 id="3-1-2-筛选各异的元素"><a href="#3-1-2-筛选各异的元素" class="headerlink" title="3.1.2　筛选各异的元素"></a>3.1.2　筛选各异的元素</h3><p>流还支持一个叫作distinct的方法，它会返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流。例如，以下代码会筛选出列表中所有的偶数，并确保没有重复（使用equals方法进行比较 ）。图5-2直观地显示了这个过程。</p><pre><code>List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);numbers.stream()       .filter(i -&gt; i % 2 == 0)       .distinct()       .forEach(System.out::println);</code></pre><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610460031643-3df215bd-30b9-4d2f-975a-c81f8d1a1fe0.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>在测验试试学过的内容：筛选</p><p>你将如何利用流来筛选前两个荤菜呢？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 可以把filter和limit组合在一起来解决这个问题，并用collect(toList())将流转换成一个列表。</span>List<span class="token operator">&lt;</span>Dish<span class="token operator">></span> dishes <span class="token operator">=</span>     menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>dish <span class="token operator">-</span><span class="token operator">></span> dish<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Dish<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>MEAT<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-2-流的切片"><a href="#3-2-流的切片" class="headerlink" title="3.2　流的切片"></a>3.2　流的切片</h2><p>本节会讨论如何通过其他方式选择或跳过流中的某些元素。使用Stream的一些操作结合谓词，你可以高效地选择或者丢弃流中的元素，譬如忽略流的前几个元素，或者按照设定的大小对流实施截短操作。</p><h3 id="3-2-1-使用谓词对流进行切片-（题外，Java9引入）"><a href="#3-2-1-使用谓词对流进行切片-（题外，Java9引入）" class="headerlink" title="3.2.1　使用谓词对流进行切片 （题外，Java9引入）"></a>3.2.1　使用谓词对流进行切片 （题外，Java9引入）</h3><p>Java 9引入了两个新方法，可以高效地选择流中的元素，这两个方法分别是：takeWhile和dropWhile。</p><h4 id="3-2-1-1-使用takeWhile"><a href="#3-2-1-1-使用takeWhile" class="headerlink" title="3.2.1.1 使用takeWhile"></a>3.2.1.1 使用takeWhile</h4><p>假设你需要处理下面这个菜单列表：</p><pre><code>List&lt;Dish&gt; specialMenu = Arrays.asList(    new Dish(&quot;seasonal fruit&quot;, true, 120, Dish.Type.OTHER),    new Dish(&quot;prawns&quot;, false, 300, Dish.Type.FISH),    new Dish(&quot;rice&quot;, true, 350, Dish.Type.OTHER),    new Dish(&quot;chicken&quot;, false, 400, Dish.Type.MEAT),    new Dish(&quot;french fries&quot;, true, 530, Dish.Type.OTHER));</code></pre><p>怎样才能从这些菜单中选出热量少于320卡路里的那些菜肴呢？你本能地想起了前面学习过的filter操作，它可以执行下面的动作：</p><pre><code>List&lt;Dish&gt; filteredMenu    = specialMenu.stream()                 .filter(dish -&gt; dish.getCalories() &lt; 320)                 .collect(toList());       //由季节性的水果、虾构成的列表</code></pre><p>然而，采用这种方式，初始列表中的元素已经按照热量进行了排序操作！这里采用filter的缺点是，你需要遍历整个流中的数据，对其中的每一个元素执行谓词操作。而你本可以在发现第一个热量大于（或者等于）320卡路里的菜肴时就停止处理的。如果你要处理的列表规模不大，这不算什么大问题，但是，如果你要处理的是一个由海量元素构成的流，采用恰当的方式所带来的性能提升还是很可观的。然而，怎样才能达到期望的效果呢？takeWhile操作就是为此而生的！它可以帮助你利用谓词对流进行分片（即便你要处理的流是无限流也毫无困难）。更妙的是，它会在遭遇第一个不符合要求的元素时停止处理。下面这段代码演示了如何使用takeWhile：</p><pre><code>List&lt;Dish&gt; slicedMenu1    = specialMenu.stream()                 .takeWhile(dish -&gt; dish.getCalories() &lt; 320)                 .collect(toList());       // 由季节性的水果、虾构成的列表</code></pre><h4 id="3-2-1-2-使用dropWhile"><a href="#3-2-1-2-使用dropWhile" class="headerlink" title="3.2.1.2 使用dropWhile"></a>3.2.1.2 使用dropWhile</h4><p>如果你想要的是其他的元素，又该怎么办呢？譬如，你想要找出那些热量大于320卡路里的元素。你可以借助dropWhile操作达到这一目标：</p><pre><code>List&lt;Dish&gt; slicedMenu2    = specialMenu.stream()                 .dropWhile(dish -&gt; dish.getCalories() &lt; 320)                 .collect(toList());      // 由米饭、鸡肉以及炸薯条构成的列表</code></pre><p>dropWhile操作是对takeWhile操作的补充。它会从头开始，丢弃所有谓词结果为false的元素。一旦遭遇谓词计算的结果为true，它就停止处理，并返回所有剩余的元素，即便要处理的对象是一个由无限数量元素构成的流，它也能工作得很好。</p><h3 id="3-2-2-截短流"><a href="#3-2-2-截短流" class="headerlink" title="3.2.2　截短流"></a>3.2.2　截短流</h3><p>流支持limit(n)方法，该方法会返回另一个不超过给定长度的流。所需的长度作为参数传递给limit。如果流是有序的，则最多会返回前n个元素。比如，你可以建立一个List，选出热量超过300卡路里的头三道菜：</p><pre><code>List&lt;Dish&gt; dishes = specialMenu                        .stream()                        .filter(dish -&gt; dish.getCalories() &gt; 300)                        .limit(3)                        .collect(toList());       // 列出米饭、鸡肉、炸薯条</code></pre><p>下图展示了filter和limit的组合。你可以看到，该方法只选出了符合谓词的头三个元素，然后就返回了结果</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610768275763-b6ca487e-c776-40c8-914e-8734b026bd2f.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>请注意，limit也可以用在无序流上，比如源是一个Set。这种情况下，limit的结果不会以任何顺序排列。</p><h3 id="3-2-3-跳过元素"><a href="#3-2-3-跳过元素" class="headerlink" title="3.2.3　跳过元素"></a>3.2.3　跳过元素</h3><p>流还支持skip(n)方法，返回一个扔掉了前n个元素的流。如果流中元素不足n个，则返回一个空流。请注意，limit(n)和skip(n)是互补的！例如，下面的代码将跳过热量超过300卡路里的头两道菜，并返回剩下的。图5-4展示了这个查询。</p><pre><code>List&lt;Dish&gt; dishes = menu.stream()                        .filter(d -&gt; d.getCalories() &gt; 300)                        .skip(2)                        .collect(toList());</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610768442463-17716607-83dd-4eb5-955e-8db6fd50e87a.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><h2 id="3-3-映射"><a href="#3-3-映射" class="headerlink" title="3.3　映射"></a>3.3　映射</h2><p>一个非常常见的数据处理套路就是从某些对象中选择信息。比如在SQL里，你可以从表中选择一列。Stream API也通过map和flatMap方法提供了类似的工具。</p><h3 id="3-3-1-对流中每一个元素应用函数"><a href="#3-3-1-对流中每一个元素应用函数" class="headerlink" title="3.3.1　对流中每一个元素应用函数"></a>3.3.1　对流中每一个元素应用函数</h3><p>流支持map方法，它会接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）。例如，下面的代码把方法引用Dish::getName传给了map方法，来提取流中菜肴的名称：</p><pre><code>List&lt;String&gt; dishNames = menu.stream()                             .map(Dish::getName)                             .collect(toList());</code></pre><p>因为getName方法返回一个String，所以map方法输出的流的类型就是Stream <String>。</p><p>让我们看一个稍微不同的例子，来巩固一下对map的理解。给定一个单词列表，你想要返回另一个列表，显示每个单词中有几个字母。怎么做呢？你需要对列表中的每个元素应用一个函数。这听起来正好该用map方法去做！应用的函数应该接受一个单词，并返回其长度。你可以像下面这样，给map传递一个方法引用String::length来解决这个问题：</p><pre><code>List&lt;String&gt; words = Arrays.asList(&quot;Modern&quot;, &quot;Java&quot;, &quot;In&quot;, &quot;Action&quot;);List&lt;Integer&gt; wordLengths = words.stream()                                 .map(String::length)                                 .collect(toList());</code></pre><p>现在回到提取菜名的例子。如果你要找出每道菜的名称有多长，该怎么做？可以像下面这样，再链接上一个map：</p><pre><code>List&lt;Integer&gt; dishNameLengths = menu.stream()                                    .map(Dish::getName)                                    .map(String::length)                                    .collect(toList());</code></pre><h3 id="3-3-2-流的扁平化"><a href="#3-3-2-流的扁平化" class="headerlink" title="3.3.2　流的扁平化"></a>3.3.2　流的扁平化</h3><p>你已经看到如何使用map方法返回列表中每个单词的长度了。让我们拓展一下：对于一张单词表，如何返回一张列表，列出里面各不相同的字符呢？例如，给定单词列表[“Hello”,”World”]，你想要返回列表[“H”,”e”,”l”, “o”,”W”,”r”,”d”]。</p><p>你可能会认为这很容易，你可以把每个单词映射成一张字符表，然后调用distinct来过滤重复的字符。第一个版本可能是这样的：</p><p>words.stream()</p><p>   .map(word -&gt; word.split(“”))</p><p>   .distinct()</p><p>   .collect(toList());</p><p>这个方法的问题在于，传递给map方法的Lambda为每个单词返回了一个String[]（String列表）。因此，map返回的流实际上是Stream&lt;String[]&gt;类型的。你真正想要的是用Stream<String>来表示一个字符流。下图说明了这个问题。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610768706452-369ce12b-d5af-46e2-9f1d-aaff4256f5b6.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p><strong>使用flatMap</strong></p><p>你可以像下面这样使用flatMap来解决这个问题：</p><pre><code>List&lt;String&gt; uniqueCharacters =  words.stream()       .map(word -&gt; word.split(&quot;&quot;))       // 将每个单词转换为由其字母构成的数组       .flatMap(Arrays::stream)       // 将各个生成流扁平化为单个流       .distinct()       .collect(toList());</code></pre><p>使用flatMap方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用flatMap(Arrays::stream)时生成的单个流都被合并起来，即扁平化为一个流。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610769055278-6b12138c-e387-4a2c-a3f2-115f51118f68.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>一言以蔽之，flatMap方法让你把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流。</p><p>后续会讨论更高级的Java 8模式，比如使用新的Optional类进行null检查时会再来看看flatMap。</p><p>为巩固你对于map和flatMap的理解，试试测验吧。</p><h3 id="3-3-3测验"><a href="#3-3-3测验" class="headerlink" title="3.3.3测验"></a>3.3.3测验</h3><p>(1) 给定一个数字列表，如何返回一个由每个数的平方构成的列表呢？例如，给定[1, 2, 3, 4, 5]，应该返回[1, 4, 9, 16, 25]。</p><p>答案： 6666</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#iPCy9" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#iPCy9</a></p><p>(2) 给定两个数字列表，如何返回所有的数对呢？例如，给定列表[1, 2, 3]和列表[3, 4]，应该返回[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]。为简单起见，你可以用有两个元素的数组来代表数对。</p><p>答案：6666</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#3wC4g" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#3wC4g</a></p><p>(3) 如何扩展前一个例子，只返回总和能被3整除的数对呢？</p><p>答案：6666</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#241bu" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#241bu</a></p><h2 id="3-4-查找与匹配"><a href="#3-4-查找与匹配" class="headerlink" title="3.4 查找与匹配"></a>3.4 查找与匹配</h2><p>另一个常见的数据处理套路是看看数据集中的某些元素是否匹配一个给定的属性。Stream API通过allMatch、anyMatch、noneMatch、findFirst和findAny方法提供了这样的工具。</p><h3 id="3-4-1-检查谓词是否至少匹配一个元素"><a href="#3-4-1-检查谓词是否至少匹配一个元素" class="headerlink" title="3.4.1　检查谓词是否至少匹配一个元素"></a>3.4.1　检查谓词是否至少匹配一个元素</h3><p>anyMatch方法可以回答“流中是否有一个元素能匹配给定的谓词”。比如，你可以用它来看看菜单里面是否有素食可选择：</p><pre><code>if(menu.stream().anyMatch(Dish::isVegetarian)){    System.out.println(&quot;The menu is (somewhat) vegetarian friendly!!&quot;);}</code></pre><p>anyMatch方法返回一个boolean，因此是一个终端操作。</p><h3 id="3-4-2-检查谓词是否匹配所有元素"><a href="#3-4-2-检查谓词是否匹配所有元素" class="headerlink" title="3.4.2　检查谓词是否匹配所有元素"></a>3.4.2　检查谓词是否匹配所有元素</h3><ul><li>allMatch方法的工作原理和anyMatch类似，但它会看看流中的元素是否都能匹配给定的谓词。比如，你可以用它来看看菜品是否有利健康（即所有菜的热量都低于1000卡路里）：</li></ul><pre><code>boolean isHealthy = menu.stream()                        .allMatch(dish -&gt; dish.getCalories() &lt; 1000);</code></pre><ul><li><strong>noneMatch</strong></li></ul><p>和allMatch相对的是noneMatch。它可以确保流中没有任何元素与给定的谓词匹配。比如，你可以用noneMatch重写前面的例子：</p><pre><code>boolean isHealthy = menu.stream()                        .noneMatch(dish -&gt; dish.getCalories() &gt;= 1000);</code></pre><p>anyMatch、allMatch和noneMatch这三个操作都用到了所谓的短路，这就是大家熟悉的Java中&amp;&amp;和||运算符短路在流中的版本。</p><ul><li><strong>短路求值</strong></li></ul><p>有些操作不需要处理整个流就能得到结果。例如，假设你需要对一个用and连起来的大布尔表达式求值。不管表达式有多长，你只需找到一个表达式为false，就可以推断整个表达式将返回false，所以用不着计算整个表达式。这就是短路。</p><p>对于流而言，某些操作（例如allMatch、anyMatch、noneMatch、findFirst和findAny）不用处理整个流就能得到结果。只要找到一个元素，就可以有结果了。同样，limit也是一个短路操作：它只需要创建一个给定大小的流，而用不着处理流中所有的元素。在碰到无限大小的流的时候，这种操作就有用了：它们可以把无限流变成有限流。</p><h3 id="3-4-3-查找元素"><a href="#3-4-3-查找元素" class="headerlink" title="3.4.3　查找元素"></a>3.4.3　查找元素</h3><p>findAny方法将返回当前流中的任意元素。它可以与其他流操作结合使用。比如，你可能想找到一道素食菜肴。可以结合使用filter和findAny方法来实现这个查询：</p><pre><code>Optional&lt;Dish&gt; dish =    menu.stream()        .filter(Dish::isVegetarian)        .findAny();</code></pre><p>流水线将在后台进行优化使其只需走一遍，并在利用短路找到结果时立即结束。</p><h3 id="3-4-4-查找第一个元素"><a href="#3-4-4-查找第一个元素" class="headerlink" title="3.4.4　查找第一个元素"></a>3.4.4　查找第一个元素</h3><p>有些流由一个出现顺序（encounter order）来指定流中项目出现的逻辑顺序（比如由List或排序好的数据列生成的流）。对于这种流，你可能想要找到第一个元素。为此有一个findFirst方法，它的工作方式类似于findAny。例如，给定一个数字列表，下面的代码能找出第一个平方能被3整除的数：</p><pre><code>List&lt;Integer&gt; someNumbers = Arrays.asList(1, 2, 3, 4, 5);Optional&lt;Integer&gt; firstSquareDivisibleByThree =    someNumbers.stream()               .map(n -&gt; n * n)               .filter(n -&gt; n % 3 == 0)               .findFirst(); // 9</code></pre><p>何时使用findFirst和findAny</p><p>你可能会想，为什么会同时有findFirst和findAny呢？答案是并行。找到第一个元素在并行上限制更多。如果你不关心返回的元素是哪个，请使用findAny，因为它在使用并行流时限制较少。</p><h2 id="3-5-归约"><a href="#3-5-归约" class="headerlink" title="3.5　归约"></a>3.5　归约</h2><p>到目前为止，你见到过的终端操作都是返回一个boolean（allMatch之类的）、void（forEach）或Optional对象（findAny等）。你也见过了使用collect来将流中的所有元素组合成一个List。</p><p>在本节中，你将看到如何把一个流中的元素组合起来，使用reduce操作来表达更复杂的查询，比如“计算菜单中的总卡路里”或“菜单中卡路里最高的菜是哪一个”。此类查询需要将流中所有元素反复结合起来，得到一个值，比如一个Integer。这样的查询可以被归类为归约操作（将流归约成一个值）。用函数式编程语言的术语来说，这称为折叠（fold），因为你可以将这个操作看成把一张长长的纸（你的流）反复折叠成一个小方块，而这就是折叠操作的结果。</p><h3 id="3-5-1-元素求和"><a href="#3-5-1-元素求和" class="headerlink" title="3.5.1　元素求和"></a>3.5.1　元素求和</h3><p>在研究如何使用reduce方法之前，先来看看如何使用for-each循环来对数字列表中的元素求和：</p><pre><code>int sum = 0;for (int x : numbers) {    sum += x;}</code></pre><p>numbers中的每个元素都用加法运算符反复迭代来得到结果。通过反复使用加法，你把一个数字列表归约成了一个数字。这段代码中有两个参数：</p><p>总和变量的初始值，在这里是0；</p><p>将列表中所有元素结合在一起的操作，在这里是+。</p><p>要是还能把所有的数字相乘，而不必去复制粘贴这段代码，岂不是很好？这正是reduce操作的用武之地，它对这种重复应用的模式做了抽象。你可以像下面这样对流中所有的元素求和：</p><pre><code>int sum = numbers.stream().reduce(0, (a, b) -&gt; a + b);</code></pre><p>reduce接受两个参数：</p><ul><li>一个初始值，这里是0；</li><li>一个BinaryOperator<T>来将两个元素结合起来产生一个新值，这里用的是lambda (a, b) -&gt; a + b。</li></ul><p>你也很容易把所有的元素相乘，只需将另一个Lambda (a, b) -&gt; a * b传递给reduce操作就可以了：</p><pre><code>int product = numbers.stream().reduce(1, (a, b) -&gt; a * b);</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610774542022-6854479e-c169-4aa9-beb9-d16a8bd2d74c.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>上图展示了reduce操作是如何作用于一个流的：Lambda反复结合每个元素，直到包含整数4、5、3、9的流被归约成一个值。</p><p>解析: reduce操作是如何对一个数字流求和的。0作为Lambda的第一个参数（a），从流中获得4作为第二个参数（b）。0 + 4得到4，它成了新的累积值。然后再用累积值和流中下一个元素5调用Lambda，产生新的累积值9。接下来，再用累积值和下一个元素3调用Lambda，得到12。最后，用12和流中最后一个元素9调用Lambda，得到最终结果21。</p><p>你可以使用方法引用让这段代码更简洁。在Java 8中，Integer类现在有了一个静态的sum方法来对两个数求和，这恰好是我们想要的，用不着反复用Lambda写同一段代码了：</p><pre><code>int sum = numbers.stream().reduce(0, Integer::sum);</code></pre><p>无初始值</p><p>reduce还有一个重载的变体，它不接受初始值，但是会返回一个Optional对象：</p><pre><code>Optional&lt;Integer&gt; sum = numbers.stream().reduce((a, b) -&gt; (a + b));</code></pre><p>为什么它返回一个Optional<Integer>呢？考虑流中没有任何元素的情况。reduce操作无法返回其和，因为它没有初始值。这就是为什么结果被包裹在一个Optional对象里，以表明和可能不存在。</p><h3 id="3-5-2-最大值和最小值"><a href="#3-5-2-最大值和最小值" class="headerlink" title="3.5.2　最大值和最小值"></a>3.5.2　最大值和最小值</h3><p>让我们来看看如何利用刚刚学到的reduce来计算流中最大或最小的元素。正如你在前面看到的，reduce接受两个参数：</p><ul><li>一个初始值；</li><li>一个Lambda来把两个流元素结合起来并产生一个新值。</li></ul><p>Lambda是一步步用加法运算符应用到流中每个元素上的，因此你需要一个给定两个元素能够返回最大值的Lambda。reduce操作会考虑新值和流中下一个元素，并产生一个新的最大值，直到整个流消耗完！你可以像下面这样使用reduce来计算流中的最大值，如图所示:</p><pre><code>Optional&lt;Integer&gt; max = numbers.stream().reduce(Integer::max);</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610775229374-616aeee7-f895-40c5-bc9d-47c54b9d423b.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png">￼</p><p>要计算最小值，你需要把Integer.min传给reduce来替换Integer.max：</p><pre><code>Optional&lt;Integer&gt; min = numbers.stream().reduce(Integer::min);</code></pre><p>你当然也可以写成Lambda (x, y) -&gt; x &lt; y ? x : y而不是Integer::min，不过后者比较易读。</p><p>为了检验你对于reduce操作的理解程度，试试测验吧！</p><p><strong><em>怎样用map和reduce方法数一数流中有多少个菜呢？\</em></strong></p><p>答案：6666</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#Q3LLd" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#Q3LLd</a></p><h3 id="3-5-3-归约方法的优势与并行化"><a href="#3-5-3-归约方法的优势与并行化" class="headerlink" title="3.5.3 归约方法的优势与并行化"></a><strong>3.5.3 归约方法的优势与并行化</strong></h3><p>相比于前面写的逐步迭代求和，使用reduce的好处在于，这里的迭代被内部迭代抽象掉了，这让内部实现得以选择并行执行reduce操作。而迭代式求和例子要更新共享变量sum，这不是那么容易<strong>并行化</strong>的。如果你加入了同步，很可能会发现线程竞争抵消了并行本应带来的性能提升！这种计算的并行化需要另一种办法：将输入分块，分块求和，最后再合并起来。但这样的话代码看起来就完全不一样了。但现在重要的是要认识到，可变的累加器模式对于并行化来说是死路一条。你需要一种新的模式，这正是reduce所提供的。使用流来对所有的元素并行求和时，你的代码几乎不用修改：stream()换成了parallelStream()。</p><pre><code>int sum = numbers.parallelStream().reduce(0, Integer::sum);</code></pre><p>但要并行执行这段代码也要付出一定代价，我们稍后会向你解释：传递给reduce的Lambda不能更改状态（如实例变量），而且操作必须满足结合律才可以按任意顺序执行。</p><h3 id="3-5-4-流操作：无状态和有状态"><a href="#3-5-4-流操作：无状态和有状态" class="headerlink" title="3.5.4 流操作：无状态和有状态"></a><strong>3.5.4 流操作：无状态和有状态</strong></h3><p>你已经看到了很多的流操作。乍一看流操作简直是灵丹妙药，而且只要在从集合生成流的时候把Stream换成parallelStream就可以实现并行。</p><p>当然，对于许多应用来说确实是这样，就像前面的那些例子。你可以把一张菜单变成流，用filter选出某一类的菜肴，然后对得到的流做map来对卡路里求和，最后reduce得到菜单的总热量。这个流计算甚至可以并行进行。但这些操作的特性并不相同。它们需要操作的内部状态还是有些问题的。</p><p>诸如map或filter等操作会从输入流中获取每一个元素，并在输出流中得到0或1个结果。这些操作一般都是无状态的：它们没有内部状态（假设用户提供的Lambda或方法引用没有内部可变状态）。</p><p>但诸如reduce、sum、max等操作需要内部状态来累积结果。在上面的情况下，内部状态很小。在我们的例子里就是一个int或double。不管流中有多少元素要处理，内部状态都是有界的。</p><p>相反，诸如sort或distinct等操作一开始都与filter和map差不多——都是接受一个流，再生成一个流（中间操作），但有一个关键的区别。从流中排序和删除重复项时都需要知道先前的历史。例如，排序要求所有元素都放入缓冲区后才能给输出流加入一个项目，这一操作的存储要求是无界的。要是流比较大或是无限的，就可能会有问题（把质数流倒序会做什么呢？它应当返回最大的质数，但数学告诉我们它不存在）。我们把这些操作叫作有状态操作。</p><p>你现在已经看到了很多流操作，可以用来表达复杂的数据处理查询。下表总结了迄今讲过的操作。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610775899087-b8a86934-c9af-464b-8e6c-e669abe6c429.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><h3 id="3-6-实践"><a href="#3-6-实践" class="headerlink" title="3.6 实践"></a>3.6 实践</h3><p>在本节中，你会将迄今学到的关于流的知识付诸实践。我们来看一个不同的领域：执行交易的交易员。你的经理让你为八个查询找到答案。你能做到吗？先尝试一下作为练习。</p><p>(1) 找出2011年发生的所有交易，并按交易额排序（从低到高）。</p><p>(2) 交易员都在哪些不同的城市工作过？</p><p>(3) 查找所有来自于剑桥的交易员，并按姓名排序。</p><p>(4) 返回所有交易员的姓名字符串，按字母顺序排序。</p><p>(5) 有没有交易员是在米兰工作的？</p><p>(6) 打印生活在剑桥的交易员的所有交易额。</p><p>(7) 所有交易中，最高的交易额是多少？</p><p>(8) 找到交易额最小的交易。</p><h3 id="3-6-1-领域：交易员和交易"><a href="#3-6-1-领域：交易员和交易" class="headerlink" title="3.6.1　领域：交易员和交易"></a>3.6.1　领域：交易员和交易</h3><p>以下是你要处理的领域，一个Traders和Transactions的列表：</p><pre><code>Trader raoul = new Trader(&quot;Raoul&quot;, &quot;Cambridge&quot;);Trader mario = new Trader(&quot;Mario&quot;,&quot;Milan&quot;);Trader alan = new Trader(&quot;Alan&quot;,&quot;Cambridge&quot;);Trader brian = new Trader(&quot;Brian&quot;,&quot;Cambridge&quot;);List&lt;Transaction&gt; transactions = Arrays.asList(    new Transaction(brian, 2011, 300),    new Transaction(raoul, 2012, 1000),    new Transaction(raoul, 2011, 400),    new Transaction(mario, 2012, 710),    new Transaction(mario, 2012, 700),    new Transaction(alan, 2012, 950));</code></pre><p>Trader和Transaction类的定义如下：</p><pre><code>public class Trader{    private final String name;    private final String city;    public Trader(String n, String c){        this.name = n;        this.city = c;    }    public String getName(){        return this.name;    }    public String getCity(){        return this.city;    }    public String toString(){        return &quot;Trader:&quot;+this.name + &quot; in &quot; + this.city;    }}public class Transaction{    private final Trader trader;    private final int year;    private final int value;    public Transaction(Trader trader, int year, int value){        this.trader = trader;        this.year = year;        this.value = value;    }    public Trader getTrader(){        return this.trader;    }    public int getYear(){        return this.year;    }    public int getValue(){        return this.value;    }    public String toString(){        return &quot;{&quot; + this.trader + &quot;, &quot; +               &quot;year: &quot;+this.year+&quot;, &quot; +               &quot;value:&quot; + this.value +&quot;}&quot;;    }}</code></pre><h3 id="3-6-2-解答"><a href="#3-6-2-解答" class="headerlink" title="3.6.2　解答"></a>3.6.2　解答</h3><p>解答在下面的代码清单中。你可以看看你对迄今所学知识的理解程度如何。</p><p>代码清单 1　找出2011年发生的所有交易，并按交易额排序（从低到高）</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#oXNNW" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#oXNNW</a></p><p>代码清单 2　交易员都在哪些不同的城市工作过</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#kczNj" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#kczNj</a></p><p>代码清单 3　查找所有来自于剑桥的交易员，并按姓名排序</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#jxuT1" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#jxuT1</a></p><p>代码清单 4　返回所有交易员的姓名字符串，按字母顺序排序</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#9UzST" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#9UzST</a></p><p>代码清单 5　有没有交易员是在米兰工作的</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#TYiF7" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#TYiF7</a></p><p>代码清单 6　打印生活在剑桥的交易员的所有交易额</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#T3hwJ" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#T3hwJ</a></p><p>代码清单 7　所有交易中，最高的交易额是多少</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#1o3CU" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#1o3CU</a></p><p>代码清单 8　找到交易额最小的交易</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#hLaCi" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#hLaCi</a></p><h2 id="3-7-数值流"><a href="#3-7-数值流" class="headerlink" title="3.7　数值流"></a>3.7　数值流</h2><p>我们在前面看到了可以使用reduce方法计算流中元素的总和。例如，你可以像下面这样计算菜单的热量：</p><pre><code>int calories = menu.stream()                   .map(Dish::getCalories)                   .reduce(0, Integer::sum);</code></pre><p>这段代码的问题是，它有一个暗含的装箱成本。每个Integer都必须拆箱成一个原始类型，再进行求和。要是可以直接像下面这样调用sum方法，岂不是更好？</p><pre><code>int calories = menu.stream()                   .map(Dish::getCalories)                   .sum();</code></pre><p>但这是不可能的。问题在于map方法会生成一个Stream<T>。虽然流中的元素是Integer类型，但Stream接口没有定义sum方法。为什么没有呢？比方说，你只有一个像menu那样的Stream<Dish>，把各种菜加起来是没有任何意义的。但不要担心，Stream API还提供了原始类型流特化，专门支持处理数值流的方法。</p><h3 id="3-7-1-原始类型流特化"><a href="#3-7-1-原始类型流特化" class="headerlink" title="3.7.1　原始类型流特化"></a>3.7.1　原始类型流特化</h3><p>Java 8引入了三个原始类型特化流接口来解决这个问题：<strong>IntStream</strong>、<strong>DoubleStream</strong>和<strong>LongStream</strong>，分别将流中的元素特化为int、long和double，从而避免了暗含的装箱成本。每个接口都带来了进行常用数值归约的新方法，比如对数值流求和的sum，找到最大元素的max。此外还有在必要时再把它们转换回对象流的方法。要记住的是，这些特化的原因并不在于流的复杂性，而是装箱造成的复杂性——即类似int和Integer之间的效率差异。</p><ul><li>映射到数值流</li></ul><p>将流转换为特化版本的常用方法是mapToInt、mapToDouble和mapToLong。这些方法和前面说的map方法的工作方式一样，只是它们返回的是一个特化流，而不是Stream<T>。例如，你可以像下面这样用mapToInt对menu中的卡路里求和：</p><pre><code>int calories = menu.stream()       // 返回一个Stream&lt;Dish&gt;                   .mapToInt(Dish::getCalories)       // 返回一个IntStream                   .sum();</code></pre><p>这里，mapToInt会从每道菜中提取热量（用一个Integer表示），并返回一个IntStream（而不是Stream<Integer>）。然后你就可以调用IntStream接口中定义的sum方法，对卡路里求和了！请注意，如果流是空的，sum则默认返回0。IntStream还支持其他的方便方法，如max、min、average等。</p><ul><li><strong>转换回对象流</strong></li></ul><p>同样，一旦有了数值流，你可能会想把它转换回非特化流。例如，IntStream上的操作只能产生原始整数：IntStream的map操作接受的Lambda必须接受int并返回int（一个IntUnaryOperator）。但是你可能想要生成另一类值，比如Dish。为此，你需要访问Stream接口中定义的那些更广义的操作。要把原始流转换成一般流（每个int都会装箱成一个Integer），可以使用boxed方法，如下所示：</p><pre><code>IntStream intStream = menu.stream().mapToInt(Dish::getCalories);       // 将Stream转换为数值流Stream&lt;Integer&gt; stream = intStream.boxed();       // 将数值流转换为Stream</code></pre><p>你在下一节中会看到，在需要将数值范围装箱成为一般流时，boxed尤其有用。</p><ul><li><strong>默认值OptionalInt</strong></li></ul><p>求和的那个例子很容易，因为它有一个默认值：0。但是，如果你要计算IntStream中的最大元素，就得换个法子了，因为0是错误的结果。如何区分没有元素的流和最大值真的是0的流呢？前面我们介绍了Optional类，这是一个可以表示值存在或不存在的容器。Optional可以用Integer、String等参考类型来参数化。对于三种原始流特化，也分别有一个Optional原始类型特化版本：OptionalInt、OptionalDouble和OptionalLong。</p><p>例如，要找到IntStream中的最大元素，可以调用max方法，它会返回一个OptionalInt：</p><pre><code>OptionalInt maxCalories = menu.stream()                              .mapToInt(Dish::getCalories)                              .max();int max = maxCalories.orElse(1);      // 如果没有最大值的话，显式提供一个默认最大值</code></pre><h3 id="3-7-2-数值范围"><a href="#3-7-2-数值范围" class="headerlink" title="3.7.2　数值范围"></a>3.7.2　数值范围</h3><p>和数字打交道时，有一个常用的东西就是数值范围。比如，假设你想要生成1和100之间的所有数字。Java 8引入了两个可以用于IntStream和LongStream的静态方法，帮助生成这种范围：range和rangeClosed。这两个方法都是第一个参数接受起始值，第二个参数接受结束值。但range是不包含结束值的，rangeClosed则包含结束值。来看一个例子：</p><pre><code>IntStream evenNumbers = IntStream.rangeClosed(1, 100)       // 表示范围[1, 100]                                     .filter(n -&gt; n % 2 == 0);       // 一个从1到100的偶数流    System.out.println(evenNumbers.count());       // 从1到100有50个偶数</code></pre><p>这里用了rangeClosed方法来生成1到100之间的所有数字。它会产生一个流，然后你可以链接filter方法，只选出偶数。到目前为止还没有进行任何计算。最后，你对生成的流调用count。因为count是一个终端操作，所以它会处理流，并返回结果50，这正是1到100（包括两端）中所有偶数的个数。请注意，比较一下，如果改用IntStream.range(1, 100)，则结果将会是49个偶数，因为range是不包含结束值的。</p><h2 id="3-8-构建流"><a href="#3-8-构建流" class="headerlink" title="3.8　构建流"></a>3.8　构建流</h2><p>希望到现在，我们已经让你相信，流对于表达数据处理查询是非常强大而有用的。到目前为止，你已经能够使用stream方法从集合生成流了。此外，我们还介绍了如何根据数值范围创建数值流。但创建流的方法还有许多！本节将介绍如何从值序列、数组、文件来创建流，甚至由生成函数来创建无限流！</p><p>5.8.1　由值创建流</p><p>你可以使用静态方法Stream.of，通过显式值创建一个流。它可以接受任意数量的参数。例如，以下代码直接使用Stream.of创建了一个字符串流。然后，你可以将字符串转换为大写，再一个个打印出来：</p><pre><code>Stream&lt;String&gt; stream = Stream.of(&quot;Modern &quot;, &quot;Java &quot;, &quot;In &quot;, &quot;Action&quot;);stream.map(String::toUpperCase).forEach(System.out::println);</code></pre><p>你可以使用empty得到一个空流，如下所示：</p><pre><code>Stream&lt;String&gt; emptyStream = Stream.empty();</code></pre><h3 id="3-8-2-由可空对象创建流"><a href="#3-8-2-由可空对象创建流" class="headerlink" title="3.8.2　由可空对象创建流"></a>3.8.2　由可空对象创建流</h3><p>Java 9提供了一个新方法可以由一个可空对象创建流。使用流的过程中，你可能也碰到过这种情况，即你处理的对象有可能为空，而你又需要把它们转换成流（或者由null构成的空的流）进行处理。譬如，如果对象不存在指定键对应的属性，方法System.getProperty就会返回一个null。为了使用流处理它，你需要显式地检查对象值是否为空，如下所示：</p><pre><code>String homeValue = System.getProperty(&quot;home&quot;);Stream&lt;String&gt; homeValueStream    = homeValue == null ? Stream.empty() : Stream.of(value);// 借助于Stream.ofNullable，这段代码可以改写得更加简洁：Stream&lt;String&gt; homeValueStream    = Stream.ofNullable(System.getProperty(&quot;home&quot;));//这种模式搭配flatMap处理由可空对象构成的流时尤其方便：Stream&lt;String&gt; values =    Stream.of(&quot;config&quot;, &quot;home&quot;, &quot;user&quot;)          .flatMap(key -&gt; Stream.ofNullable(System.getProperty(key)));</code></pre><h3 id="3-8-3-由数组创建流"><a href="#3-8-3-由数组创建流" class="headerlink" title="3.8.3　由数组创建流"></a>3.8.3　由数组创建流</h3><p>你可以使用静态方法Arrays.stream从数组创建一个流。它接受一个数组作为参数。例如，你可以将一个原始类型int的数组转换成一个IntStream，然后对IntStream求和以生成int，如下所示：</p><pre><code>int[] numbers = {2, 3, 5, 7, 11, 13};int sum = Arrays.stream(numbers).sum();       //总和是41</code></pre><h3 id="3-8-4-由文件生成流"><a href="#3-8-4-由文件生成流" class="headerlink" title="3.8.4　由文件生成流"></a>3.8.4　由文件生成流</h3><p>Java中用于处理文件等I/O操作的NIO API（非阻塞 I/O）已更新，以便利用Stream API。java.nio.file.Files中的很多静态方法都会返回一个流。例如，一个很有用的方法是Files.lines，它会返回一个由指定文件中的各行构成的字符串流。使用你迄今所学的内容，你可以用这个方法看看一个文件中有多少各不相同的词：</p><pre><code>long uniqueWords = 0;try(Stream&lt;String&gt; lines =          Files.lines(Paths.get(&quot;data.txt&quot;), Charset.defaultCharset())){       // 流会自动关闭，因此不需要执行额外的try-finally操作uniqueWords = lines.flatMap(line -&gt; Arrays.stream(line.split(&quot; &quot;)))      // 生成单词流                   .distinct()       // 删除重复项                   .count();       // 数一数有多少不重复的单词}catch(IOException e){       // 如果打开文件时出现异常则加以处理}</code></pre><p>你可以使用Files.lines得到一个流，其中的每个元素都是给定文件中的一行。因为流的源头是一个I/O资源，所以这个调用环绕在一个try/catch块中。事实上，调用Files.lines会打开一个I/O资源，这些I/O资源使用完毕后必须被关闭，否则会发生资源泄漏。在过去，你需要显式地声明一个finally块来完成这些回收工作。Stream接口通过实现AutoCloseable接口，很方便地替大家解决了这一问题。这意味着资源的管理都由try代码块全权负责了。一旦你接收到line构成的流，就可以调用line的split方法，将行拆分成单词。请特别留意，flatMap是如何生成一个扁平单词流的，而不是生成多个流，每一行一个单词流。最后，我们通过串接distinct和count方法，统计了流中有多少不重复的单词。</p><h3 id="3-8-5-由函数生成流：创建无限流"><a href="#3-8-5-由函数生成流：创建无限流" class="headerlink" title="3.8.5　由函数生成流：创建无限流"></a>3.8.5　由函数生成流：创建无限流</h3><p>Stream API提供了两个静态方法来从函数生成流：Stream.iterate和Stream.generate。这两个操作可以创建所谓的无限流：不像从固定集合创建的流那样有固定大小的流。由iterate和generate产生的流会用给定的函数按需创建值，因此可以无穷无尽地计算下去！一般来说，应该使用limit(n)来对这种流加以限制，以避免打印无穷多个值。</p><p>迭代</p><p>我们先来看一个iterate的简单例子，然后再解释：</p><pre><code>Stream.iterate(0, n -&gt; n + 2)      .limit(10)      .forEach(System.out::println);</code></pre><p>iterate方法接受一个初始值（在这里是0），还有一个依次应用在每个产生的新值上的Lambda（UnaryOperator<t>类型）。这里，使用Lambda n -&gt; n + 2，返回的是前一个元素加上2。因此，iterate方法生成了一个所有正偶数的流：流的第一个元素是初始值0。然后加上2来生成新的值2，再加上2来得到新的值4，以此类推。这种iterate操作基本上是顺序的，因为结果取决于前一次应用。请注意，此操作将生成一个无限流——这个流没有结尾，因为值是按需计算的，可以永远计算下去。我们说这个流是无界的。正如前面所讨论的，这是流和集合之间的一个关键区别。我们使用limit方法来显式限制流的大小。这里只选择了前10个偶数。然后可以调用forEach终端操作来消费流，并分别打印每个元素。</p><p>一般来说，在需要依次生成一系列值的时候应该使用iterate。</p><p>测验5.4：斐波那契元组序列</p><p>斐波那契数列是著名的经典编程练习。下面这个数列就是斐波那契数列的一部分：0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55…数列中开始的两个数字是0和1，后续的每个数字都是前两个数字之和。</p><p>斐波那契元组序列与此类似，是数列中数字和其后续数字组成的元组构成的序列：(0, 1), (1, 1), (1, 2), (2, 3), (3, 5), (5, 8), (8, 13), (13, 21) …</p><p>你的任务是用iterate方法生成斐波那契元组序列中的前20个元素。</p><p>让我们帮你入手吧。第一个问题是，iterate方法要接受一个UnaryOperator<t>作为参数，而你需要一个像(0,1)这样的元组流。你还是可以（这次又是比较草率地）使用一个数组的两个元素来代表元组。例如，new int[]{0,1}就代表了斐波那契序列(0, 1)中的第一个元素。这就是iterate方法的初始值：</p><pre><code>Stream.iterate(new int[]{0, 1}, ???)      .limit(20)      .forEach(t -&gt; System.out.println(&quot;(&quot; + t[0] + &quot;,&quot; + t[1] +&quot;)&quot;));</code></pre><p>在这个测验中，你需要搞清楚???代表的代码是什么。请记住，iterate会按顺序应用给定的Lambda。</p><p>答案：6666</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#qAZCo" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#qAZCo</a></p><h2 id="3-9-小结"><a href="#3-9-小结" class="headerlink" title="3.9 小结"></a>3.9 小结</h2><p>Stream API可以表达复杂的数据处理查询。常用的流操作总结在上述3.5.4表中。</p><ul><li>你可以使用filter、distinct、takeWhile (Java 9)、dropWhile (Java 9)、skip和limit对流做筛选和切片。</li><li>如果你明确地知道数据源是排序的，那么用takeWhile和dropWhile方法通常比filter高效得多。</li><li>你可以使用map和flatMap提取或转换流中的元素。</li><li>你可以使用findFirst和findAny方法查找流中的元素。你可以用allMatch、noneMatch和anyMatch方法让流匹配给定的谓词。</li><li>这些方法都利用了短路：找到结果就立即停止计算；没有必要处理整个流。</li><li>你可以利用reduce方法将流中所有的元素迭代合并成一个结果，例如求和或查找最大元素。</li><li>filter和map等操作是无状态的，它们并不存储任何状态。reduce等操作要存储状态才能计算出一个值。sorted和distinct等操作也要存储状态，因为它们需要把流中的所有元素缓存起来才能返回一个新的流。这种操作称为有状态操作。</li><li>流有三种基本的原始类型特化：IntStream、DoubleStream和LongStream。它们的操作也有相应的特化。</li><li>流不仅可以从集合创建，也可从值、数组、文件以及iterate与generate等特定方法创建。</li><li>无限流所包含的元素数量是无限的（想象一下所有可能的字符串构成的流）。这种情况是有可能的，因为流中的元素大多数都是即时产生的。使用limit方法，你可以由一个无限流创建一个有限流。</li></ul><h1 id="4-用流收集数据"><a href="#4-用流收集数据" class="headerlink" title="4 用流收集数据"></a>4 用流收集数据</h1><p>本节内容</p><ul><li>用Collectors类创建和使用收集器</li><li>将数据流归约为一个值</li><li>汇总：归约的特殊情况</li><li>数据分组和分区</li><li>开发你的自定义收集器</li></ul><p>我们在前一节中学到，流可以用类似于数据库的操作帮助你处理集合。你可以把Java 8的流看作花哨又懒惰的数据集迭代器。它们支持两种类型的操作：中间操作（如filter或map）和终端操作（如count、findFirst、forEach和reduce）。中间操作可以链接起来，将一个流转换为另一个流。这些操作不会消耗流，其目的是建立一个流水线。与此相反，终端操作会消耗流，以产生一个最终结果，例如返回流中的最大元素。它们通常可以通过优化流水线来缩短计算时间。</p><p>让我们来使用3.6.1 的模型来演示一些常见的例子：</p><ul><li>对一个交易列表按货币分组，获得该货币的所有交易额总和（返回一个Map&lt;Currency, Integer&gt;）。</li><li>将交易列表分成两组：贵的和不贵的（返回一个Map&lt;Boolean, List<Transaction>&gt;）。</li><li>创建多级分组，比如按城市对交易分组，然后进一步按照贵或不贵分组（返回一个Map&lt;String, Map&lt;Boolean, List<Transaction>&gt;&gt;）。</li></ul><p>指令式风格对交易按照货币分组，我们得到了如下方式：</p><pre><code>Map&lt;Currency, List&lt;Transaction&gt;&gt; transactionsByCurrencies =                                                  new HashMap&lt;&gt;();      // 建立累积交易分组的Mapfor (Transaction transaction : transactions) {       // 迭代Transaction的List    Currency currency = transaction.getCurrency();       // 提取Transaction的货币    List&lt;Transaction&gt; transactionsForCurrency =                                    transactionsByCurrencies.get(currency);    if (transactionsForCurrency == null) {       // 如果分组Map中没有这种货币的条目，就创建一个        transactionsForCurrency = new ArrayList&lt;&gt;();        transactionsByCurrencies                            .put(currency, transactionsForCurrency);    }    transactionsForCurrency.add(transaction);       // 将当前遍历的Transaction加入同一货币的Transaction的List}</code></pre><p>Stream中collect方法的一个更通用的Collector参数，就可以用一句话实现完全相同的结果：</p><pre><code>Map&lt;Currency, List&lt;Transaction&gt;&gt; transactionsByCurrencies =        transactions.stream().collect(groupingBy(Transaction::getCurrency));</code></pre><p>这一比差得还真多，对吧？</p><h2 id="4-1-收集器"><a href="#4-1-收集器" class="headerlink" title="4.1　收集器"></a>4.1　收集器</h2><h3 id="4-1-1-收集器用作高级归约"><a href="#4-1-1-收集器用作高级归约" class="headerlink" title="4.1.1　收集器用作高级归约"></a>4.1.1　收集器用作高级归约</h3><p>收集器非常有用，因为用它可以简洁而灵活地定义collect用来生成结果集合的标准。更具体地说，对流调用collect方法将对流中的元素触发一个归约操作（由Collector来参数化）。图6-1所示的归约操作所做的工作和代码清单6-1中的指令式代码一样。它遍历流中的每个元素，并让Collector进行处理。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610783571703-1fe6ece9-e436-4622-b91b-44abf9bb6748.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>一般来说，Collector会对元素应用一个转换函数（很多时候是不体现任何效果的恒等转换，例如toList），并将结果累积在一个数据结构中，从而产生这一过程的最终输出。例如，在前面所示的交易分组的例子中，转换函数提取了每笔交易的货币，随后使用货币作为键，将交易本身累积在生成的Map中。</p><p>如货币的例子中所示，Collector接口中方法的实现决定了如何对流执行归约操作。但Collectors实用类提供了很多静态工厂方法，可以方便地创建常见收集器的实例，只要拿来用就可以了。最直接和最常用的收集器是toList静态方法，它会把流中所有的元素收集到一个List中：</p><pre><code>List&lt;Transaction&gt; transactions =    transactionStream.collect(Collectors.toList());</code></pre><h3 id="4-1-2-预定义收集器"><a href="#4-1-2-预定义收集器" class="headerlink" title="4.1.2　预定义收集器"></a>4.1.2　预定义收集器</h3><p>剩下的部分主要探讨预定义收集器的功能，也就是那些可以从Collectors类提供的工厂方法（例如groupingBy）创建的收集器。它们主要提供了三大功能：</p><ul><li>将流元素归约和汇总为一个值；</li><li>元素分组；</li><li>元素分区。</li></ul><p>先来看看可以进行归约和汇总的收集器。它们在很多场合下都很方便，比如前面例子中提到的求一系列交易的总交易额。</p><p>然后你将看到如何对流中的元素进行分组，同时把前一个例子推广到多层次分组，或把不同的收集器结合起来，对每个子组进行进一步归约操作。我们还将谈到分组的特殊情况——分区，即使用谓词（返回一个布尔值的单参数函数）作为分组函数。</p><h2 id="4-2-归约和汇总"><a href="#4-2-归约和汇总" class="headerlink" title="4.2　归约和汇总"></a>4.2　归约和汇总</h2><h3 id="4-2-1-查找流中的最大值和最小值"><a href="#4-2-1-查找流中的最大值和最小值" class="headerlink" title="4.2.1　查找流中的最大值和最小值"></a>4.2.1　查找流中的最大值和最小值</h3><p>假设你想要找出菜单中热量最高的菜。你可以使用两个收集器，Collectors.maxBy和Collectors.minBy，来计算流中的最大值或最小值。这两个收集器接受一个Comparator参数来比较流中的元素。你可以创建一个Comparator来根据所含热量对菜肴进行比较，并把它传递给Collectors.maxBy：</p><pre><code>Comparator&lt;Dish&gt; dishCaloriesComparator =    Comparator.comparingInt(Dish::getCalories);Optional&lt;Dish&gt; mostCalorieDish =    menu.stream()        .collect(maxBy(dishCaloriesComparator));</code></pre><p>你可能在想Optional<Dish>是怎么回事。要回答这个问题，需要问“要是menu为空怎么办”。那就没有要返回的菜肴了！Java 8引入了Optional，它是一个容器，可以包含值也可以不包含值。这里它完美地代表了可能也可能不返回菜肴的情况。另一个常见的返回单个值的归约操作是对流中对象的一个数值字段求和。或者你可能想要求平均数。这种操作被称为汇总操作。让我们来看看如何使用收集器表达汇总操作。</p><h3 id="4-2-2-汇总"><a href="#4-2-2-汇总" class="headerlink" title="4.2.2　汇总"></a>4.2.2　汇总</h3><p>Collectors类专门为汇总提供了一个工厂方法：Collectors.summingInt。它可接受一个把对象映射为求和所需int的函数，并返回一个收集器；该收集器在传递给普通的collect方法后即执行我们需要的汇总操作。举个例子来说，你可以这样求出菜单列表的总热量：</p><pre><code>int totalCalories = menu.stream().collect(summingInt(Dish::getCalories));</code></pre><p>这里的收集过程如图所示。在遍历流时，会把每一道菜都映射为其热量，然后把这个数字累加到一个累加器（这里的初始值0）。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610785062777-153519fd-ed93-4dcb-b1c5-2414bf7a3bc0.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p><code>Collectors.summingLong</code>和<code>Collectors.summingDouble</code>方法的作用完全一样，可以用于求和字段为long或double的情况。</p><p>但汇总不仅仅是求和；还有<code>Collectors.averagingInt</code>，连同对应的<code>averagingLong</code>和<code>averagingDouble</code>可以计算数值的平均数：</p><pre><code>double avgCalories =    menu.stream().collect(averagingInt(Dish::getCalories));</code></pre><p>到目前为止，你已经看到了如何使用收集器来给流中的元素计数，找到这些元素数值属性的最大值和最小值，以及计算其总和和平均值。不过很多时候，你可能想要得到两个或更多这样的结果，而且你希望只需一次操作就可以完成。在这种情况下，你可以使用summarizingInt工厂方法返回的收集器。例如，通过一次summarizing操作你就可以数出菜单中元素的个数，并得到菜肴热量总和、平均值、最大值和最小值：</p><pre><code>IntSummaryStatistics menuStatistics =        menu.stream().collect(summarizingInt(Dish::getCalories));</code></pre><p>这个收集器会把所有这些信息收集到一个叫作IntSummaryStatistics的类里，它提供了方便的取值（getter）方法来访问结果。打印menuStatisticobject会得到以下输出：</p><pre><code>IntSummaryStatistics{count=9, sum=4300, min=120,                     average=477.777778, max=800}</code></pre><p>同样，相应的summarizingLong和summarizingDouble工厂方法有相关的LongSummary Statistics和DoubleSummaryStatistics类型，适用于收集的属性是原始类型long或double的情况</p><h3 id="4-2-3-连接字符串"><a href="#4-2-3-连接字符串" class="headerlink" title="4.2.3　连接字符串"></a>4.2.3　连接字符串</h3><p>joining工厂方法返回的收集器会把对流中每一个对象应用toString方法得到的所有字符串连接成一个字符串。这意味着你把菜单中所有菜肴的名称连接起来，如下所示：</p><pre><code>String shortMenu = menu.stream().map(Dish::getName).collect(joining());</code></pre><p>请注意，joining在内部使用了StringBuilder来把生成的字符串逐个追加起来。此外还要注意，如果Dish类有一个toString方法来返回菜肴的名称，那你无需用提取每一道菜名称的函数来对原流做映射就能够得到相同的结果：</p><pre><code>String shortMenu = menu.stream().collect(joining());</code></pre><p>二者均可产生以下字符串：</p><p>porkbeefchickenfrench friesriceseason fruitpizzaprawnssalmon</p><p>但该字符串的可读性并不好。幸好，joining工厂方法有一个重载版本可以接受元素之间的分界符，这样你就可以得到一个逗号分隔的菜肴名称列表：</p><pre><code>String shortMenu = menu.stream().map(Dish::getName).collect(joining(&quot;, &quot;));</code></pre><p>正如预期的那样，它会生成：</p><p>pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon</p><p>到目前为止，我们已经探讨了各种将流归约到一个值的收集器。</p><h3 id="4-2-4-广义的归约汇总"><a href="#4-2-4-广义的归约汇总" class="headerlink" title="4.2.4　广义的归约汇总"></a>4.2.4　广义的归约汇总</h3><p><strong>事实上，我们已经讨论的所有收集器，都是一个可以用reducing工厂方法定义的归约过程的特殊情况而已。</strong>Collectors.reducing工厂方法是所有这些特殊情况的一般化。可以说，先前讨论的案例仅仅是为了方便程序员而已。（但是，请记得方便程序员和可读性是头等大事！）例如，可以用reducing方法创建的收集器来计算你菜单的总热量，如下所示：</p><pre><code>int totalCalories = menu.stream().collect(reducing(                                   0, Dish::getCalories, (i, j) -&gt; i + j));</code></pre><p>它需要三个参数。</p><ul><li>第一个参数是归约操作的起始值，也是流中没有元素时的返回值，所以很显然对于数值和而言0是一个合适的值。</li><li>第二个参数就是你在4.2.2节中使用的函数，将菜肴转换成一个表示其所含热量的int。</li><li>第三个参数是一个BinaryOperator，将两个项目累积成一个同类型的值。这里它就是对两个int求和。</li></ul><p>同样，你可以使用下面这样单参数形式的reducing来找到热量最高的菜，如下所示：</p><pre><code>Optional&lt;Dish&gt; mostCalorieDish =    menu.stream().collect(reducing(        (d1, d2) -&gt; d1.getCalories() &gt; d2.getCalories() ? d1 : d2));</code></pre><p>你可以把单参数reducing工厂方法创建的收集器看作三参数方法的特殊情况，它把流中的第一个项目作为起点，把恒等函数（即一个函数仅仅是返回其输入参数）作为一个转换函数。这也意味着，要是把单参数reducing收集器传递给空流的collect方法，收集器就没有起点；正如2.2.1节中所解释的，它将因此而返回一个Optional<Dish>对象。</p><h4 id="4-2-4-1-收集与归约"><a href="#4-2-4-1-收集与归约" class="headerlink" title="4.2.4.1 收集与归约"></a>4.2.4.1 收集与归约</h4><p>你可能想知道，Stream接口的collect和reduce方法有何不同，因为两种方法通常会获得相同的结果。例如，你可以像下面这样使用reduce方法来实现toList Collector所做的工作：</p><pre><code>Stream&lt;Integer&gt; stream = Arrays.asList(1, 2, 3, 4, 5, 6).stream();List&lt;Integer&gt; numbers = stream.reduce(                               new ArrayList&lt;Integer&gt;(),                               (List&lt;Integer&gt; l, Integer e) -&gt; {                                         l.add(e);                                         return l; },                               (List&lt;Integer&gt; l1, List&lt;Integer&gt; l2) -&gt; {                                         l1.addAll(l2);                                         return l1; });</code></pre><p>这个解决方案有两个问题：<strong>一个语义问题和一个实际问题</strong>。语义问题在于，reduce方法旨在把两个值结合起来生成一个新值，它是一个不可变的归约。与此相反，collect方法的设计就是要改变容器，从而累积要输出的结果。这意味着，上面的代码片段是在滥用reduce方法，因为它在原地改变了作为累加器的List。你在下一节中会更详细地看到，以错误的语义使用reduce方法还会造成一个实际问题：这个归约过程不能并行工作，因为由多个线程并发修改同一个数据结构可能会破坏List本身。在这种情况下，如果你想要线程安全，就需要每次分配一个新的List，而对象分配又会影响性能。这就是collect方法特别适合表达可变容器上的归约的原因，更关键的是它适合并行操作。</p><h4 id="4-2-4-2-收集框架的灵活性：以不同的方法执行同样的操作"><a href="#4-2-4-2-收集框架的灵活性：以不同的方法执行同样的操作" class="headerlink" title="4.2.4.2 收集框架的灵活性：以不同的方法执行同样的操作"></a>4.2.4.2 收集框架的灵活性：以不同的方法执行同样的操作</h4><p>你还可以进一步简化前面使用reducing收集器的求和例子——引用Integer类的sum方法，而不用去写一个表达同一操作的Lambda表达式。这会得到以下程序：</p><pre><code>int totalCalories = menu.stream().collect(reducing(0,       // 初始值                              Dish::getCalories,       // 转换函数                              Integer::sum));       // 累积函数</code></pre><p>从逻辑上说，归约操作的工作原理如图所示：利用累积函数，把一个初始化为起始值的累加器，和把转换函数应用到流中每个元素上得到的结果不断迭代合并起来。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610786937388-5e84c1b9-0475-4c55-b590-76f3554e454d.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>图 -计算菜单总热量的归约过程</p><p>现实中，4.2节开始时提到的counting收集器也是类似地利用三参数reducing工厂方法实现的。它把流中的每个元素都转换成一个值为1的Long型对象，然后再把它们相加：</p><pre><code>public static &lt;T&gt; Collector&lt;T, ?, Long&gt; counting() {    return reducing(0L, e -&gt; 1L, Long::sum);}</code></pre><h4 id="4-2-4-3-使用泛型-通配符"><a href="#4-2-4-3-使用泛型-通配符" class="headerlink" title="4.2.4.3 使用泛型?通配符"></a>4.2.4.3 使用泛型?通配符</h4><p>在刚刚提到的代码片段中，你可能已经注意到了?通配符，它用作counting工厂方法返回的收集器签名中的第二个泛型类型。对这种记法你应该已经很熟悉了，特别是如果你经常使用Java的集合框架的话。在这里，它仅仅意味着收集器的累加器类型未知，换句话说，累加器本身可以是任何类型。我们在这里原封不动地写出了Collectors类中原始定义的方法签名，但在本节其余部分将避免使用任何通配符表示法，以使讨论尽可能简单。</p><p>我们在前面可能已经注意到，还有另一种方法不使用收集器也能执行相同操作——将菜肴流映射为每一道菜的热量，然后用前一个版本中使用的方法引用来归约得到的流：</p><pre><code>int totalCalories =    menu.stream().map(Dish::getCalories).reduce(Integer::sum).get();</code></pre><p>请注意，就像流的任何单参数reduce操作一样，<strong>reduce(Integer::sum)返回的不是int而是Optional<Integer></strong>，以便在空流的情况下安全地执行归约操作。然后你只需用Optional对象中的get方法来提取里面的值就行了。请注意，在这种情况下使用get方法是安全的，只是因为你已经确定菜肴流不为空。一般来说，使用Optional允许提供默认值的方法，如orElse或orElseGet来解开Optional中包含的值更为安全。最后，更简洁的方法是把流映射到一个IntStream，然后调用sum方法，你也可以得到相同的结果：</p><pre><code>int totalCalories = menu.stream().mapToInt(Dish::getCalories).sum();</code></pre><h4 id="4-2-4-4-根据情况选择最佳解决方案"><a href="#4-2-4-4-根据情况选择最佳解决方案" class="headerlink" title="4.2.4.4 根据情况选择最佳解决方案"></a>4.2.4.4 根据情况选择最佳解决方案</h4><p>这再次说明了，函数式编程（特别是Java 8的Collections框架中加入的基于函数式风格原理设计的新API）通常提供了多种方法来执行同一个操作。这个例子还说明，收集器在某种程度上比Stream接口上直接提供的方法用起来更复杂，但好处在于它们能提供更高水平的抽象和概括，也更容易重用和自定义。</p><p>我们的建议是，尽可能为手头的问题探索不同的解决方案，但在通用的方案里面，始终选择最专门化的一个。无论是从可读性还是性能上看，这一般都是最好的决定。例如，要计算菜单的总热量，我们更倾向于最后一个解决方案（使用IntStream），因为它最简明，也很可能最易读。同时，它也是性能最好的一个，因为IntStream可以让我们避免自动拆箱操作，也就是从Integer到int的隐式转换，它在这里毫无用处。</p><p>让我试下小测验，检验学习效果如何？</p><p>测验：用reducing连接字符串</p><p>以下哪一种reducing收集器的用法能够合法地替代joining收集器（如4.2.3节用法）？</p><p>String shortMenu = menu.stream().map(Dish::getName).collect(joining());</p><p>(1)</p><pre><code>String shortMenu = menu.stream().map(Dish::getName)        .collect(reducing((s1, s2) -&gt; s1 + s2)).get();</code></pre><p>(2)</p><pre><code>String shortMenu = menu.stream()        .collect(reducing((d1, d2) -&gt; d1.getName() + d2.getName())).get();</code></pre><p>(3)</p><pre><code>String shortMenu = menu.stream()        .collect(reducing(&quot;&quot;, Dish::getName, (s1, s2) -&gt; s1 + s2));</code></pre><p>答案：6666</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#KAv7v" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#KAv7v</a></p><h2 id="4-3-分组"><a href="#4-3-分组" class="headerlink" title="4.3 分组"></a>4.3 分组</h2><p>一个常见的数据库操作是根据一个或多个属性对集合中的项目进行分组。就像前面讲到按货币对交易进行分组的例子一样，如果用指令式风格来实现的话，这个操作可能会很麻烦、啰唆而且容易出错。但是，如果用Java 8所推崇的函数式风格来重写的话，就很容易转化为一个非常容易看懂的语句。来看看这个功能的第二个例子：假设你要把菜单中的菜按照类型进行分类，将有肉的放一组，有鱼的放一组，其他的都放另一组。用Collectors.groupingBy工厂方法返回的收集器就可以轻松地完成这项任务，如下所示：</p><pre><code>Map&lt;Dish.Type, List&lt;Dish&gt;&gt; dishesByType =                      menu.stream().collect(groupingBy(Dish::getType));</code></pre><p>其结果是下面的Map：</p><p>{FISH=[prawns, salmon], OTHER=[french fries, rice, season fruit, pizza], MEAT=[pork, beef, chicken]}</p><p>这里，你给groupingBy方法传递了一个Function（以方法引用的形式），它提取了流中每一道Dish的Dish.Type。我们把这个Function叫作分类函数，因为它用来把流中的元素分成不同的组。如图所示，分组操作的结果是一个Map，把分组函数返回的值作为映射的键，把流中所有具有这个分类值的项目的列表作为对应的映射值。在菜单分类的例子中，键就是菜的类型，值就是包含所有对应类型的菜肴的列表。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610788386175-3c6ebb37-c8a5-4daa-b704-9bec0a0246b6.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>图 在分组过程中对流中的项目进行分类</p><p>但是，分类函数不一定像方法引用那样可用，因为你想用以分类的条件可能比简单的属性访问器要复杂。例如，你可能想把热量不到400卡路里的菜划为“低热量”（diet），把热量在400到700卡路里之间的菜划为“普通”（normal），而把高于700卡路里的菜划为“高热量”（fat）。由于Dish类的作者没有把这个操作写成一个方法，因此无法使用方法引用，但你可以把这个逻辑写成Lambda表达式：</p><pre><code>public enum CaloricLevel { DIET, NORMAL, FAT }Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; dishesByCaloricLevel = menu.stream().collect(        groupingBy(dish -&gt; {                if (dish.getCalories() &lt;= 400) return CaloricLevel.DIET;                else if (dish.getCalories() &lt;= 700) return CaloricLevel.NORMAL;                else return CaloricLevel.FAT;        } ));</code></pre><p>现在，你已经知道如何同时按照菜肴的类型和热量对菜单中的菜肴进行分组。然而，如果你还需要对最初分组的结果做进一步操作——这也是很典型的应用场景，又该如何做呢？接下来的一节会介绍如何解决这个问题。</p><h3 id="4-3-1-操作分组的元素"><a href="#4-3-1-操作分组的元素" class="headerlink" title="4.3.1　操作分组的元素"></a>4.3.1　操作分组的元素</h3><p>执行完分组操作后，你往往还需要对每个分组中的元素执行操作。举个例子，假设你希望只按照菜肴的热量进行过滤操作，譬如找出那些热量大于500卡路里的菜肴。你可能会说，这种情况只要在分组之前执行过滤谓词就好了，如下所示：</p><pre><code>Map&lt;Dish.Type, List&lt;Dish&gt;&gt; caloricDishesByType =                    menu.stream().filter(dish -&gt; dish.getCalories() &gt; 500)                                 .collect(groupingBy(Dish::getType));</code></pre><p>这种解决方案可以工作，不过它也伴随着相关的缺陷。如果你试着用它处理我们的菜单，得到的结果是下面这种Map：</p><p>{OTHER=[french fries, pizza], MEAT=[pork, beef]}</p><p>发现问题了么？由于没有任何一道类型是FISH的菜符合我们的过滤谓词，这个键在结果映射中完全消失了。为了解决这个问题，Collectors类重载了工厂方法groupingBy，除了常见的分类函数，它的第二变量也接受一个Collector类型的参数。通过这种方式，我们把过滤谓词挪到了第二个Collector中，如下所示：</p><pre><code>Map&lt;Dish.Type, List&lt;Dish&gt;&gt; caloricDishesByType =        menu.stream()            .collect(groupingBy(Dish::getType,                     filtering(dish -&gt; dish.getCalories() &gt; 500, toList())));</code></pre><p>filtering方法也是Collectors类的一个静态工厂方法，它接受一个谓词对每一个分组中的元素执行过滤操作，你还可以更进一步地使用Collector对过滤的元素继续进行分组。通过这种方式，结果映射中依旧保存了FISH类型的条目，即便它映射的是一个空的列表：</p><p>{OTHER=[french fries, pizza], MEAT=[pork, beef], FISH=[]}</p><p>操作分组元素的另一种常见做法是使用一个映射函数对它们进行转换，这种方式也很有效。为了达成这个目标，Collectors类通过mapping方法提供了另一个Collector函数，它接受一个映射函数和另一个Collector函数作为参数。作为参数的Collector会收集对每个元素执行该映射函数的运行结果。这与你之前看到的过滤收集器很相似。使用新的方法，你可以将每道菜肴的分类添加到它们各自的菜名中，如下所示：</p><pre><code>Map&lt;Dish.Type, List&lt;String&gt;&gt; dishNamesByType =        menu.stream()            .collect(groupingBy(Dish::getType,                     mapping(Dish::getName, toList())));</code></pre><p>注意，这个例子中，结果映射的每个分组是一个由字符串构成的列表，而不是前面示例中的Dish类型。你还可以使用第三个Collector搭配groupingBy，再进行一次flatMap转换，这样得到的就不是一个普通的映射了。为了演示这种机制是如何工作的，假设我们有一个映射，它为每道菜肴关联了一个标签列表，如下所示：</p><pre><code>Map&lt;String, List&lt;String&gt;&gt; dishTags = new HashMap&lt;&gt;();dishTags.put(&quot;pork&quot;, asList(&quot;greasy&quot;, &quot;salty&quot;));dishTags.put(&quot;beef&quot;, asList(&quot;salty&quot;, &quot;roasted&quot;));dishTags.put(&quot;chicken&quot;, asList(&quot;fried&quot;, &quot;crisp&quot;));dishTags.put(&quot;french fries&quot;, asList(&quot;greasy&quot;, &quot;fried&quot;));dishTags.put(&quot;rice&quot;, asList(&quot;light&quot;, &quot;natural&quot;));dishTags.put(&quot;season fruit&quot;, asList(&quot;fresh&quot;, &quot;natural&quot;));dishTags.put(&quot;pizza&quot;, asList(&quot;tasty&quot;, &quot;salty&quot;));dishTags.put(&quot;prawns&quot;, asList(&quot;tasty&quot;, &quot;roasted&quot;));dishTags.put(&quot;salmon&quot;, asList(&quot;delicious&quot;, &quot;fresh&quot;));</code></pre><p>如果你需要提取出每组菜肴对应的标签，使用flatMapping Collector可以轻松实现：</p><pre><code>Map&lt;Dish.Type, Set&lt;String&gt;&gt; dishNamesByType =    menu.stream()        .collect(groupingBy(Dish::getType,                 flatMapping(dish -&gt; dishTags.get( dish.getName() ).stream(),                             toSet())));</code></pre><p>我们会为每道菜肴获取一个标签列表。这与在上一章碰到的情况很像，需要执行一个flatMap操作，将两层的结果列表归并为一层。此外，也请注意，这一次我们会将每一组flatMapping操作的结果保存到一个Set中，而不是之前的List中，这么做是为了避免同一类型的多道菜由于关联了同样的标签而导致标签重复出现在结果集中。这一操作的结果映射如下所示：</p><p>{MEAT=[salty, greasy, roasted, fried, crisp], FISH=[roasted, tasty, fresh, delicious], OTHER=[salty, greasy, natural, light, tasty, fresh, fried]}</p><p>截至目前，我们对菜单中的菜肴分组时使用的都是单一标准，譬如，按类型分，或者按热量分。然而，有些时候你可能希望同时使用多个标准进行分类，这种情况又该如何处理呢？分组操作的强大之处就在于它能高效地组合。来看看它是如何做到的这一点的。</p><h3 id="4-3-2-多级分组"><a href="#4-3-2-多级分组" class="headerlink" title="4.3.2　多级分组"></a>4.3.2　多级分组</h3><p>要实现多级分组，可以使用一个由双参数版本的Collectors.groupingBy工厂方法创建的收集器，它除了普通的分类函数之外，还可以接受collector类型的第二个参数。那么要进行二级分组的话，可以把一个内层groupingBy传递给外层groupingBy，并定义一个为流中项目分类的二级标准，如代码清单6-2所示。</p><p>代码清单 4-2　多级分组</p><pre><code>Map&lt;Dish.Type, Map&lt;CaloricLevel, List&lt;Dish&gt;&gt;&gt; dishesByTypeCaloricLevel = menu.stream().collect(      groupingBy(Dish::getType,       // 一级分类函数          groupingBy(dish -&gt; {       // 二级分类函数                  if (dish.getCalories() &lt;= 400) return CaloricLevel.DIET;                  else if (dish.getCalories() &lt;= 700) return CaloricLevel.NORMAL;                  else return CaloricLevel.FAT;          } )      ));</code></pre><p>这个二级分组的结果就是像下面这样的两级Map：</p><p>{MEAT={DIET=[chicken], NORMAL=[beef], FAT=[pork]},</p><p> FISH={DIET=[prawns], NORMAL=[salmon]},</p><p> OTHER={DIET=[rice, seasonal fruit], NORMAL=[french fries, pizza]}}</p><p>这里的外层Map的键就是第一级分类函数生成的值：“fish, meat, other”，而这个Map的值又是一个Map，键是二级分类函数生成的值：“normal, diet, fat”。最后，第二级Map的值是流中元素构成的List，是分别应用第一级和第二级分类函数所得到的对应第一级和第二级键的值：“salmon，pizza…” 这种多级分组操作可以扩展至任意层级，￼级分组就会得到一个代表￼级树形结构的￼级Map。</p><p>图4-5显示了为什么结构相当于￼维表格，并强调了分组操作的分类目的。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610792142552-a817190b-4777-458a-a755-04c928948a3c.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>图 4-5　￼层嵌套映射和￼维分类表之间的等价关系</p><p>一般来说，把groupingBy看作“桶”比较容易明白。第一个groupingBy给每个键建立了一个桶。然后再用下游的收集器去收集每个桶中的元素，以此得到￼级分组。</p><h3 id="4-3-3-按子组收集数据"><a href="#4-3-3-按子组收集数据" class="headerlink" title="4.3.3　按子组收集数据"></a>4.3.3　按子组收集数据</h3><p>在上一节中，我们看到可以把第二个groupingBy收集器传递给外层收集器来实现多级分组。但进一步说，传递给第一个groupingBy的第二个收集器可以是任何类型，而不一定是另一个groupingBy。例如，要数一数菜单中每类菜有多少个，可以传递counting收集器作为groupingBy收集器的第二个参数：</p><pre><code>Map&lt;Dish.Type, Long&gt; typesCount = menu.stream().collect(                    groupingBy(Dish::getType, counting()));</code></pre><p>其结果是下面的Map：</p><p>{MEAT=3, FISH=2, OTHER=4}</p><p>还要注意，普通的单参数groupingBy(f)（其中f是分类函数）实际上是groupingBy(f, toList())的简便写法。</p><p>再举一个例子，你可以把前面用于查找菜单中热量最高的菜肴的收集器改一改，按照菜的类型分类：</p><pre><code>Map&lt;Dish.Type, Optional&lt;Dish&gt;&gt; mostCaloricByType =    menu.stream()        .collect(groupingBy(Dish::getType,                            maxBy(comparingInt(Dish::getCalories))));</code></pre><p>这个分组的结果显然是一个Map，以Dish的类型作为键，以包装了该类型中热量最高的Dish的Optional<Dish>作为值：</p><p>{FISH=Optional[salmon], OTHER=Optional[pizza], MEAT=Optional[pork]}</p><p>注意　这个Map中的值是Optional，因为这是maxBy工厂方法生成的收集器的类型，但实际上，如果菜单中没有某一类型的Dish，这个类型就不会对应一个Optional.empty()值，而且根本不会出现在Map的键中。groupingBy收集器只有在应用分组条件后，第一次在流中找到某个键对应的元素时才会把键加入分组Map中。这意味着Optional包装器在这里不是很有用，因为它不会仅仅因为是归约收集器的返回类型而表达一个最终可能不存在却意外存在的值。</p><h4 id="4-3-3-1-收集器的结果转换为另一种类型"><a href="#4-3-3-1-收集器的结果转换为另一种类型" class="headerlink" title="4.3.3.1 收集器的结果转换为另一种类型"></a>4.3.3.1 收集器的结果转换为另一种类型</h4><p>因为分组操作的Map结果中的每个值上包装的Optional没什么用，所以你可能想要把它们去掉。要做到这一点，或者更一般地来说，把收集器返回的结果转换为另一种类型，你可以使用<strong>Collectors.collectingAndThen</strong>工厂方法返回的收集器，如下所示。</p><p>代码清单 6-3　查找每个子组中热量最高的Dish</p><pre><code>Map&lt;Dish.Type, Dish&gt; mostCaloricByType =    menu.stream()        .collect(groupingBy(Dish::getType,       // 分类函数                 collectingAndThen(                   maxBy(comparingInt(Dish::getCalories)),       //包装后的收集器                 Optional::get)));       //转换函数</code></pre><p>这个工厂方法接受两个参数——<strong>要转换的收集器</strong>以及<strong>转换函数</strong>，并返回另一个收集器。这个收集器相当于旧收集器的一个包装，collect操作的最后一步就是将返回值用转换函数做一个映射。在这里，被包起来的收集器就是用maxBy建立的那个，而转换函数Optional::get则把返回的Optional中的值提取出来。前面已经说过，这个操作放在这里是安全的，因为reducing收集器永远都不会返回Optional.empty()。其结果是下面的Map：</p><p>{FISH=salmon, OTHER=pizza, MEAT=pork}</p><p>把好几个收集器嵌套起来很常见，它们之间到底发生了什么可能不那么明显。图4-6可以直观地展示它们是怎么工作的。从最外层开始逐层向里，注意以下几点。</p><ul><li>收集器用虚线表示，因此groupingBy是最外层，根据菜肴的类型把菜单流分组，得到三个子流。</li></ul><p>groupingBy收集器包裹着collectingAndThen收集器，因此分组操作得到的每个子流都用这第二个收集器做进一步归约。</p><ul><li>collectingAndThen收集器又包裹着第三个收集器maxBy。</li><li>随后由归约收集器进行子流的归约操作，然后包含它的collectingAndThen收集器会对其结果应用Optional:get转换函数。</li><li>对三个子流分别执行这一过程并转换而得到的三个值，也就是各个类型中热量最高的Dish，将成为groupingBy收集器返回的Map中与各个分类键（Dish的类型）相关联的值。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610796921984-7293f8bd-7dbf-4098-91ab-e6e0d7d6c550.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><h4 id="4-3-3-2-与groupingBy联合使用的其他收集器的例子"><a href="#4-3-3-2-与groupingBy联合使用的其他收集器的例子" class="headerlink" title="4.3.3.2 与groupingBy联合使用的其他收集器的例子"></a>4.3.3.2 与groupingBy联合使用的其他收集器的例子</h4><p>一般来说，通过groupingBy工厂方法的第二个参数传递的收集器将会对分到同一组中的所有流元素执行进一步归约操作。例如，你还重用求出所有菜肴热量总和的收集器，不过这次是对每一组Dish求和：</p><pre><code>Map&lt;Dish.Type, Integer&gt; totalCaloriesByType =               menu.stream().collect(groupingBy(Dish::getType,                       summingInt(Dish::getCalories)));</code></pre><p>然而常常和groupingBy联合使用的另一个收集器是mapping方法生成的。这个方法接受两个参数：一个<strong>函数对流中的元素做变换</strong>，另一个则<strong>将变换的结果对象收集起来</strong>。其目的是在累加之前对每个输入元素应用一个映射函数，这样就可以让接受特定类型元素的收集器适应不同类型的对象。我们来看一个使用这个收集器的实际例子。比方说你想要知道，对于每种类型的Dish，菜单中都有哪些CaloricLevel。可以把groupingBy和mapping收集器结合起来，如下所示：</p><pre><code>Map&lt;Dish.Type, Set&lt;CaloricLevel&gt;&gt; caloricLevelsByType =menu.stream().collect(    groupingBy(Dish::getType, mapping(dish -&gt; {            if (dish.getCalories() &lt;= 400) return CaloricLevel.DIET;            else if (dish.getCalories() &lt;= 700) return CaloricLevel.NORMAL;            else return CaloricLevel.FAT; },    toSet() )));</code></pre><p>这里，就像前面见到过的，传递给映射方法的转换函数将Dish映射成了它的CaloricLevel：生成的CaloricLevel流传递给一个toSet收集器，它和toList类似，不过是把流中的元素累积到一个Set而不是List中，以便仅保留各不相同的值。如先前的示例所示，这个映射收集器将会收集分组函数生成的各个子流中的元素，让你得到这样的Map结果：</p><p>{OTHER=[DIET, NORMAL], MEAT=[DIET, NORMAL, FAT], FISH=[DIET, NORMAL]}</p><p>请注意在上一个示例中，对于返回的Set是什么类型并没有任何保证。但通过使用toCollection，你就可以有更多的控制。例如，你可以给它传递一个构造函数引用来要求HashSet：</p><pre><code>Map&lt;Dish.Type, Set&lt;CaloricLevel&gt;&gt; caloricLevelsByType =menu.stream().collect(    groupingBy(Dish::getType, mapping(dish -&gt; {            if (dish.getCalories() &lt;= 400) return CaloricLevel.DIET;            else if (dish.getCalories() &lt;= 700) return CaloricLevel.NORMAL;            else return CaloricLevel.FAT; },    toCollection(HashSet::new) )));</code></pre><h2 id="4-4-分区"><a href="#4-4-分区" class="headerlink" title="4.4　分区"></a>4.4　分区</h2><p>分区是分组的特殊情况：由一个谓词（返回一个布尔值的函数）作为分类函数，它称分区函数。分区函数返回一个布尔值，这意味着得到的分组Map的键类型是Boolean，于是它最多可以分为两组——true是一组，false是一组。例如，如果你是素食者或是请了一位素食的朋友来共进晚餐，可能会想要把菜单按照素食和非素食分开：</p><pre><code>Map&lt;Boolean, List&lt;Dish&gt;&gt; partitionedMenu =             menu.stream().collect(partitioningBy(Dish::isVegetarian));       // 分区函数</code></pre><p>这会返回下面的Map：</p><p>{false=[pork, beef, chicken, prawns, salmon],</p><p> true=[french fries, rice, season fruit, pizza]}</p><p>那么通过Map中键为true的值，就可以找出所有的素食菜肴了：</p><pre><code>List&lt;Dish&gt; vegetarianDishes = partitionedMenu.get(true);</code></pre><p>请注意，用同样的分区谓词，对菜单List创建的流作筛选，然后把结果收集到另外一个List中也可以获得相同的结果：</p><pre><code>List&lt;Dish&gt; vegetarianDishes =            menu.stream().filter(Dish::isVegetarian).collect(toList());</code></pre><h3 id="4-4-1-分区的优势"><a href="#4-4-1-分区的优势" class="headerlink" title="4.4.1　分区的优势"></a>4.4.1　分区的优势</h3><p>分区的好处在于保留了分区函数返回true或false的两套流元素列表。在上一个例子中，要得到非素食Dish的List，你可以使用两个筛选操作来访问partitionedMenu这个Map中false键的值：一个利用谓词，一个利用该谓词的非。而且就像你在分组中看到的，partitioningBy工厂方法有一个重载版本，可以像下面这样传递第二个收集器：</p><pre><code>Map&lt;Boolean, Map&lt;Dish.Type, List&lt;Dish&gt;&gt;&gt; vegetarianDishesByType =menu.stream().collect(        partitioningBy(Dish::isVegetarian,       // 分区函数                       groupingBy(Dish::getType)));       // 第二个收集器</code></pre><p>这将产生一个二级Map：</p><p>{false={FISH=[prawns, salmon], MEAT=[pork, beef, chicken]},</p><p> true={OTHER=[french fries, rice, season fruit, pizza]}}</p><p>这里，对于分区产生的素食和非素食子流，分别按类型对菜肴分组，得到了一个二级Map，和4.3.1节的二级分组得到的结果类似。再举一个例子，你可以重用前面的代码来找到素食和非素食中热量最高的菜：</p><pre><code>Map&lt;Boolean, Dish&gt; mostCaloricPartitionedByVegetarian =menu.stream().collect(    partitioningBy(Dish::isVegetarian,        collectingAndThen(maxBy(comparingInt(Dish::getCalories)),                          Optional::get)));</code></pre><p>这将产生以下结果：</p><p>{false=pork, true=pizza}</p><p>本节开始时说过，你可以把分区看作分组的一种特殊情况。值得一提的是，由partitioningBy返回的Map实现其结构更紧凑，也更高效，这是因为它只包含两个键：true和false。实际上，它的内部实现就是一个特殊的Map，只有两个字段。groupingBy和partitioningBy收集器之间的相似之处并不止于此。你在下一个测验中会看到，还可以按照和4.3.1节中分组类似的方式进行多级分区。</p><p>测验：使用partitioningBy</p><p>我们已经看到，和groupingBy收集器类似，partitioningBy收集器也可以结合其他收集器使用。尤其是它可以与第二个partitioningBy收集器一起使用来实现多级分区。以下多级分区的结果会是什么呢？</p><p>(1)</p><pre><code>menu.stream().collect(partitioningBy(Dish::isVegetarian,                      partitioningBy(d -&gt; d.getCalories() &gt; 500)));</code></pre><p>(2)</p><pre><code>menu.stream().collect(partitioningBy(Dish::isVegetarian,                      partitioningBy(Dish:: getType)));</code></pre><p>(3)</p><pre><code>menu.stream().collect(partitioningBy(Dish::isVegetarian,                      counting()));</code></pre><p>答案：6666</p><p>此处为语雀加密文本，点击链接查看：<a href="https://www.yuque.com/bwcx/tnz/hqniyo#ZWy3x" target="_blank" rel="noopener">https://www.yuque.com/bwcx/tnz/hqniyo#ZWy3x</a></p><p>表4-1 Collectors 类的静态工厂方法</p><table><thead><tr><th>工厂方法</th><th>返回类型</th><th>用于</th></tr></thead><tbody><tr><td>toList</td><td>List<T></td><td>把流中所有项目收集到一个List</td></tr><tr><td>使用示例：List<Dish> dishes = menuStream.collect(toList());</td><td></td><td></td></tr><tr><td>toSet</td><td>Set<T></td><td>把流中所有项目收集到一个Set，删除重复项</td></tr><tr><td>使用示例：Set<Dish> dishes = menuStream.collect(toSet());</td><td></td><td></td></tr><tr><td>toCollection</td><td>Collection<T></td><td>把流中所有项目收集到给定的供应源创建的集合</td></tr><tr><td>使用示例：Collection<Dish> dishes = menuStream.collect(toCollection(), ArrayList::new);</td><td></td><td></td></tr><tr><td>counting</td><td>Long</td><td>计算流中元素的个数</td></tr><tr><td>使用示例：long howManyDishes = menuStream.collect(counting());</td><td></td><td></td></tr><tr><td>summingInt</td><td>Integer</td><td>对流中项目的一个整数属性求和</td></tr><tr><td>使用示例：int totalCalories = menuStream.collect(summingInt(Dish::getCalories));</td><td></td><td></td></tr><tr><td>averagingInt</td><td>Double</td><td>计算流中项目Integer属性的平均值</td></tr><tr><td>使用示例：double avgCalories = menuStream.collect(averagingInt(Dish::getCalories));</td><td></td><td></td></tr><tr><td>summarizingInt</td><td>IntSummaryStatistics</td><td>收集关于流中项目Integer属性的统计值，例如最大、最小、总和与平均值</td></tr><tr><td>使用示例：IntSummaryStatistics menuStatistics =  menuStream.collect(summarizingInt(Dish::getCalories));</td><td></td><td></td></tr><tr><td>joining</td><td>String</td><td>连接对流中每个项目调用toString方法所生成的字符串</td></tr><tr><td>使用示例：String shortMenu = menuStream.map(Dish::getName).collect(joining(“, “));</td><td></td><td></td></tr><tr><td>maxBy</td><td>Optional<T></td><td>一个包裹了流中按照给定比较器选出的最大元素的Optional，或如果流为空则为Optional.empty()</td></tr><tr><td>使用示例：Optional<Dish> fattest =  menuStream.collect(maxBy(comparingInt(Dish::getCalories)));</td><td></td><td></td></tr><tr><td>minBy</td><td>Optional<T></td><td>一个包裹了流中按照给定比较器选出的最小元素的Optional，或如果流为空则为Optional.empty()</td></tr><tr><td>使用示例：Optional<Dish> lightest =  menuStream.collect(minBy(comparingInt(Dish::getCalories)));</td><td></td><td></td></tr><tr><td>reducing</td><td>归约操作产生的类型</td><td>从一个作为累加器的初始值开始，利用BinaryOperator与流中的元素逐个结合，从而将流归约为单个值</td></tr><tr><td>使用示例：int totalCalories =  menuStream.collect(reducing(0, Dish::getCalories, Integer::sum));</td><td></td><td></td></tr><tr><td>collectingAndThen</td><td>转换函数返回的类型</td><td>包裹另一个收集器，对其结果应用转换函数</td></tr><tr><td>使用示例：int howManyDishes = menuStream.collect(collectingAndThen(toList(), List::size));</td><td></td><td></td></tr><tr><td>groupingBy</td><td>Map&lt;K, List<T>&gt;</td><td>根据项目的一个属性的值对流中的项目作分组，并将属性值作为结果Map的键</td></tr><tr><td>使用示例：Map&lt;Dish.Type,List<Dish>&gt; dishesByType =  menuStream.collect(groupingBy(Dish::getType));</td><td></td><td></td></tr><tr><td>partitioningBy</td><td>Map&lt;Boolean, List<T>&gt;</td><td>根据对流中每个项目应用谓词的结果来对项目进行分区</td></tr><tr><td>使用示例：Map&lt;Boolean,List<Dish>&gt; vegetarianDishes =  menuStream.collect(partitioningBy(Dish::isVegetarian));</td><td></td><td></td></tr></tbody></table><h1 id="5-并行数据处理"><a href="#5-并行数据处理" class="headerlink" title="5 并行数据处理"></a>5 并行数据处理</h1><p>我们已经知道新的Stream接口能让你以声明的方式操纵数据集。我们还解释了由外部迭代切换到内部迭代后，原生Java库可以更好地控制流元素的处理。为加速数据集的处理，往往需要进行额外的显式优化，新的方式将Java程序员从之前的优化工作中解脱了出来。迄今为止，使用Stream最重要的好处是现在能对这些集合执行操作流水线，可以充分利用计算机的多个核了。</p><p>例如，Java 7之前，要对集合数据执行并行处理非常麻烦。第一，你得明确地把包含数据的数据结构拆分成若干子部分。第二，你要给每个子部分分配一个独立的线程。第三，你需要在恰当的时候对它们进行同步来避免不希望出现的竞争条件，等待所有线程完成，最后把这些部分结果合并起来。Java 7引入了一个名为“分支/合并”的框架，能让这些操作更稳定、更不易出错。</p><p>在本节中，你将了解Stream接口如何让你不太费力就能对数据集执行并行操作。它允许你声明性地将顺序流转变成并行流。此外，你还将了解Java是如何做到这一点的，或者更确切的说，流是如何在幕后应用Java 7引入的分支/合并框架的。你还会发现，了解并行流内部是如何工作的很重要，因为如果你忽视这一方面，就可能因误用而得到意外的结果，而这个意外结果极有可能是错误的。</p><h2 id="5-1-并行流"><a href="#5-1-并行流" class="headerlink" title="5.1　并行流"></a>5.1　并行流</h2><p>使用Stream接口能非常方便地并行处理其元素：对收集源调用parallelStream方法就能将集合转换为并行流。并行流就是一个把内容拆分成多个数据块，用不同线程分别处理每个数据块的流。这样一来，你就可以自动地把工作负荷分配到多核处理器的所有核，让它们都忙起来。我们用一个简单的例子来验证一下这个思想。</p><p>假设你需要写一个方法，接受数字￼作为参数，并返回从1到给定参数的所有数字的和。一个直接（也许有点土）的方法是生成由一个数字组成的无限流，将它限制到传入的数目，然后使用对两个数字求和的BinaryOperator来归约这个流，代码如下所示：</p><pre><code>public long sequentialSum(long n) {    return Stream.iterate(1L, i -&gt; i + 1)       // 生成自然数无限流                 .limit(n)       // 限制到前n个数                 .reduce(0L, Long::sum);       // 对所有数字求和来归约流}</code></pre><p>如果采用更为传统的Java术语，上述代码与下面这种迭代方式其实是等价的：</p><pre><code>public long iterativeSum(long n) {    long result = 0;    for (long i = 1L; i &lt;= n; i++) {        result += i;    }    return result;}</code></pre><p>这似乎是利用并行处理的好机会，特别是￼很大的时候。那怎么入手呢？你要对结果变量进行同步吗？用多少个线程呢？谁负责生成数呢？谁来做加法呢？</p><p>根本用不着担心。用并行流的话，这问题就简单多了！</p><h3 id="5-1-1-将顺序流转换为并行流"><a href="#5-1-1-将顺序流转换为并行流" class="headerlink" title="5.1.1　将顺序流转换为并行流"></a>5.1.1　将顺序流转换为并行流</h3><p>对顺序流调用parallel方法，你可以将流转换成并行流，让前面的函数式归约过程（也就是求和）并行执行：</p><pre><code>public long parallelSum(long n) {    return Stream.iterate(1L, i -&gt; i + 1)                 .limit(n)                 .parallel()       // 将流转换为并行流                 .reduce(0L, Long::sum);}</code></pre><p>在上面的代码中，对流中所有数字求和的归约过程，其执行方式与前面介绍的大同小异，不同之处在于现在Stream由内部被分成了几块。因此能对不同的块执行独立并行的归约操作，如图5-1所示。最后，各个子流部分归约的返回值会被同一个归约操作整合，得到整个原始流的归约结果。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610887311672-0b0ec14b-93f8-4a73-b9a9-ae7c4c040fbe.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>图 5-1　并行归约操作</p><p>请注意，实际上，对顺序流调用parallel方法并不意味着流本身有任何实际的变化。它其实仅仅在内部设置了一个boolean标志，表示你想让调用parallel之后进行的所有操作都并行执行。类似地，你只需要对并行流调用sequential方法就可以把它变成顺序流。请注意，你可能以为把这两个方法结合起来，就可以更精细地控制遍历流时哪些操作要并行执行，哪些要顺序执行。例如，你可以这样做：</p><pre><code>stream.parallel()      .filter(...)      .sequential()      .map(...)      .parallel()      .reduce();</code></pre><p>但最后一次parallel或sequential调用会影响整个流水线。在本例中，流水线会并行执行，因为最后调用的是它。</p><p><strong>配置并行流使用的线程池</strong></p><p>看看流的parallel方法，你可能会想，并行流用的线程是从哪儿来的？有多少个？怎么自定义这个过程呢？</p><p>并行流内部使用了默认的ForkJoinPool（5.2节会进一步讲到分支/合并框架），它默认的线程数量就是你的处理器数量，这个值是由Runtime.getRuntime().availableProcessors()得到的。</p><p>但是这并非一成不变，你可以通过系统属性java.util.concurrent.ForkJoinPool.common.parallelism来修改线程池大小，如下所示：</p><pre><code>System.setProperty(&quot;java.util.concurrent.ForkJoinPool.common.parallelism&quot;,&quot;12&quot;);</code></pre><p>这是一个全局设置，因此它会对代码中所有的并行流产生影响。反过来说，目前我们还无法专为某个并行流指定这个值。一般而言，让ForkJoinPool的大小等于处理器数量是个不错的默认值，除非你有很充足的理由，否则强烈建议你不要修改它。</p><p>回到数字求和练习的例子，我们说过，在多核处理器上运行并行版本时，会有显著的性能提升。现在你有三个方法，用三种不同的方式（迭代式、顺序归约和并行归约）做完全相同的操作，让我们看看谁最快吧！</p><h3 id="5-1-2-正确使用并行流"><a href="#5-1-2-正确使用并行流" class="headerlink" title="5.1.2　正确使用并行流"></a>5.1.2　正确使用并行流</h3><p>错用并行流而产生错误的首要原因，就是使用的算法改变了某些共享状态。下面是另一种实现对前￼个自然数求和的方法，但这会改变一个共享累加器：</p><pre><code>public long sideEffectSum(long n) {    Accumulator accumulator = new Accumulator();    LongStream.rangeClosed(1, n).forEach(accumulator::add);    return accumulator.total;}public class Accumulator {    public long total = 0;    public void add(long value) { total += value; }}</code></pre><p>这种代码非常普遍，特别是对那些熟悉指令式编程范式的程序员来说。这段代码和你习惯的那种指令式迭代数字列表的方式很像：初始化一个累加器，一个个遍历列表中的元素，把它们和累加器相加。</p><p>那这种代码又有什么问题呢？不幸的是，它真的无可救药，因为它在本质上就是顺序的。每次访问total都会出现数据竞争。如果你尝试用同步来修复，那就完全失去并行的意义了。为了说明这一点，试着把Stream变成并行的：</p><pre><code>public long sideEffectParallelSum(long n) {    Accumulator accumulator = new Accumulator();    LongStream.rangeClosed(1, n).parallel().forEach(accumulator::add);    return accumulator.total;}</code></pre><p>用代码来执行这个方法，并打印每次执行的结果：</p><pre><code>System.out.println(&quot;SideEffect parallel sum done in: &quot; +    measurePerf(ParallelStreams::sideEffectParallelSum, 10_000_000L) + &quot;    msecs&quot; );</code></pre><p>你可能会得到类似于下面这种输出：</p><pre><code>Result: 5959989000692Result: 7425264100768Result: 6827235020033Result: 7192970417739Result: 6714157975331Result: 7497810541907Result: 6435348440385Result: 6999349840672Result: 7435914379978Result: 7715125932481SideEffect parallel sum done in: 49 msecs</code></pre><p>这回方法的性能无关紧要了，唯一要紧的是每次执行都会返回不同的结果，都离正确值50000005000000差很远。这是由于多个线程在同时访问累加器，执行total += value，而这一句虽然看似简单，却不是一个原子操作。问题的根源在于，forEach中调用的方法有副作用，它会改变多个线程共享的对象的可变状态。要是你想用并行Stream又不想引发类似的意外，就必须避免这种情况。</p><p>现在你知道了，共享可变状态会影响并行流以及并行计算。现在，记住要避免共享可变状态，确保并行Stream得到正确的结果。接下来，我们会看到一些实用建议，你可以由此判断什么时候可以利用并行流来提升性能。</p><h3 id="5-1-3-高效使用并行流"><a href="#5-1-3-高效使用并行流" class="headerlink" title="5.1.3　高效使用并行流"></a>5.1.3　高效使用并行流</h3><p>一般而言，想给出任何关于什么时候该用并行流的定量建议都是不可能也毫无意义的，因为任何类似于“仅当超过1000个元素的时候才用并行流”的建议对于某台特定机器上的某个特定操作可能是对的，但在略有差异的另一种情况下可能就是大错特错。尽管如此，我们至少可以提出一些定性意见，帮你决定某个特定情况下是否有必要使用并行流。</p><ul><li>如果有疑问，测量（可使用Java微基准套件-Java microbenchmark harness，JMH）。把顺序流转成并行流轻而易举，却不一定是好事。本节中已经指出，并行流并不总是比顺序流快。此外，并行流有时候会和你的直觉不一致，所以在考虑选择顺序流还是并行流时，第一个也是最重要的建议就是用适当的基准来检查其性能。</li><li>留意装箱。自动装箱和拆箱操作会大大降低性能。Java 8中有原始类型流（IntStream、LongStream和DoubleStream）来避免这种操作，但凡有可能都应该用这些流。</li><li>有些操作本身在并行流上的性能就比顺序流差。特别是limit和findFirst等依赖于元素顺序的操作，它们在并行流上执行的代价非常大。例如，findAny会比findFirst性能好，因为它不一定要按顺序来执行。你总是可以调用unordered方法来把有序流变成无序流。那么，如果你需要流中的￼个元素而不是专门要前￼个的话，对无序并行流调用limit可能会比单个有序流（比如数据源是一个List）更高效。</li><li>还要考虑流的操作流水线的总计算成本。设￼是要处理的元素的总数，￼是一个元素通过流水线的大致处理成本，则￼就是这个对成本的一个粗略的定性估计。￼值较高就意味着使用并行流时性能好的可能性比较大。</li><li>对于较小的数据量，选择并行流几乎从来都不是一个好的决定。并行处理少数几个元素的好处还抵不上并行化造成的额外开销。</li><li>要考虑流背后的数据结构是否易于分解。例如，ArrayList的拆分效率比LinkedList高得多，因为前者用不着遍历就可以平均拆分，后者则必须遍历。另外，用range工厂方法创建的原始类型流也可以快速分解。</li><li>流自身的特点以及流水线中的中间操作修改流的方式，都可能会改变分解过程的性能。例如，一个SIZED流可以分成大小相等的两部分，这样每个部分都可以比较高效地并行处理，但筛选操作可能丢弃的元素个数无法预测，从而导致流本身的大小未知。</li><li>还要考虑终端操作中合并步骤的代价是大是小（例如Collector中的combiner方法）。如果这一步代价很大，那么组合每个子流产生的部分结果所付出的代价就可能会超出通过并行流得到的性能提升。</li></ul><p>表5-1按照可分解性总结了一些流数据源适不适于并行。</p><p><strong>表 5-1　流的数据源和可分解性</strong></p><table><thead><tr><th>源</th><th>可分解性</th></tr></thead><tbody><tr><td>ArrayList</td><td>极佳</td></tr><tr><td>LinkedList</td><td>差</td></tr><tr><td>IntStream.range</td><td>极佳</td></tr><tr><td>Stream.iterate</td><td>差</td></tr><tr><td>HashSet</td><td>好</td></tr><tr><td>TreeSet</td><td>好</td></tr></tbody></table><p>最后，我们还要强调并行流背后使用的基础架构是Java 7中引入的分支/合并框架。并行汇总的示例证明了要想正确使用并行流，了解它的内部原理至关重要，所以下一节会仔细研究分支/合并框架。</p><h2 id="5-2-分支-合并框架"><a href="#5-2-分支-合并框架" class="headerlink" title="5.2　分支/合并框架"></a>5.2　分支/合并框架</h2><p>分支/合并框架的目的是以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。它是ExecutorService接口的一个实现，它把子任务分配给线程池（称为ForkJoinPool）中的工作线程。首先来看看如何定义任务和子任务。</p><h3 id="5-2-1-使用RecursiveTask"><a href="#5-2-1-使用RecursiveTask" class="headerlink" title="5.2.1　使用RecursiveTask"></a>5.2.1　使用RecursiveTask</h3><p>要把任务提交到这个池，必须创建RecursiveTask<R>的一个子类，其中R是并行化任务（以及所有子任务）产生的结果类型，或者如果任务不返回结果，则是RecursiveAction类型（当然它可能会更新其他非局部机构）。要定义RecursiveTask，只需实现它唯一的抽象方法compute：</p><pre><code>protected abstract R compute();</code></pre><p>这个方法同时定义了将任务拆分成子任务的逻辑，以及无法再拆分或不方便再拆分时，生成单个子任务结果的逻辑。正由于此，这个方法的实现类似于下面的伪代码：</p><pre><code>if (任务足够小或不可分) {    顺序计算该任务} else {    将任务分成两个子任务    递归调用本方法，拆分每个子任务，等待所有子任务完成    合并每个子任务的结果}</code></pre><p>一般来说，并没有确切的标准决定一个任务是否应该再拆分，但有几种试探方法可以帮助你做出这一决定。5.2.2节会进一步澄清。递归的任务拆分过程如图5-3所示。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610889015241-b0da99ae-9453-49ad-bbcf-0cb6b1b60a71.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>图 5-3　分支/合并过程</p><p>你可能已经注意到，这只不过是著名的分治算法的并行版本而已。这里举一个用分支/合并框架的实际例子，还以前面的例子为基础，让我们试着用这个框架为一个数字范围（这里用一个long[]数组表示）求和。如前所述，你需要先为RecursiveTask类做一个实现，就是下面代码清单中的ForkJoinSumCalculator。</p><p>代码清单 5-2　用分支/合并框架执行并行求和</p><pre><code>public class ForkJoinSumCalculator                extends java.util.concurrent.RecursiveTask&lt;Long&gt; {       // 扩展RecursiveTask来创建可以用于分支/合并框架的任务        private final long[] numbers;       // 要求和的数字数组        private final int start;       // 由子任务处理的子数组的起始和终止位置        private final int end;        public static final long THRESHOLD = 10_000;       // 将任务分解为子任务的阈值大小        public ForkJoinSumCalculator(long[] numbers) {       // 公共构造函数用于创建主任务            this(numbers, 0, numbers.length);        }        private ForkJoinSumCalculator(long[] numbers, int start, int end) {       // 私有构造函数用于以递归方式为主任务创建子任务            this.numbers = numbers;            this.start = start;            this.end = end;        }        @Override        protected Long compute() {       // 重写RecursiveTask抽象方法            int length = end - start;       // 该任务负责求和的子数组大小            if (length &lt;= THRESHOLD) {                return computeSequentially();       // 如果大小小于或等于阈值，就顺序计算结果            }            ForkJoinSumCalculator leftTask =                new ForkJoinSumCalculator(numbers, start, start + length/2);       // 创建一个子任务来为数组的前一半求和            leftTask.fork();       // 利用ForkJoinPool的另一个线程异步地执行新创建的子任务            ForkJoinSumCalculator rightTask =                new ForkJoinSumCalculator(numbers, start + length/2, end);       // 创建一个子任务来为数组的后一半求和            Long rightResult = rightTask.compute();       // 同步执行第二个子任务，有可能进行进一步的递归划分            Long leftResult = leftTask.join();       // 读取第一个子任务的结果，如果尚未完成就等待            return leftResult + rightResult;       // 整合两个子任务的计算结果        }        private long computeSequentially() {       // 大小小于阈值时所采用的一个简单的顺序算法            long sum = 0;            for (int i = start; i &lt; end; i++) {                sum += numbers[i];            }            return sum;        }    }</code></pre><p>现在编写一个方法来并行对前￼个自然数求和就很简单了。你只需把想要的数字数组传给ForkJoinSumCalculator的构造函数：</p><pre><code>public static long forkJoinSum(long n) {    long[] numbers = LongStream.rangeClosed(1, n).toArray();    ForkJoinTask&lt;Long&gt; task = new ForkJoinSumCalculator(numbers);    return new ForkJoinPool().invoke(task);}</code></pre><p>这里用了一个LongStream来生成包含前￼个自然数的数组，然后创建一个ForkJoinTask（RecursiveTask的父类），并把数组传递给代码清单5-2所示的ForkJoinSumCalculator的公共构造函数。最后，你创建了一个新的ForkJoinPool，并把任务传给它的调用方法。在ForkJoinPool中执行时，最后一个方法返回的值就是ForkJoinSumCalculator类定义的任务结果。</p><p>请注意在实际应用时，使用多个ForkJoinPool是没有什么意义的。正是出于这个原因，一般来说把它实例化一次，然后把实例保存在静态字段中，使之成为单例，这样就可以在软件中任何部分方便地重用了。这里创建时用了其默认的无参数构造函数，这意味着想让线程池使用JVM能够使用的所有处理器。更确切地说，该构造函数将使用Runtime.availableProcessors的返回值来决定线程池使用的线程数。请注意availableProcessors方法虽然看起来是处理器，但它实际上返回的是可用核的数量，包括超线程生成的虚拟核。</p><p><strong>运行ForkJoinSumCalculator</strong></p><p>当把ForkJoinSumCalculator任务传给ForkJoinPool时，这个任务就由池中的一个线程执行，这个线程会调用任务的compute方法。该方法会检查任务是否小到足以顺序执行，如果不够小则会把要求和的数组分成两半，分给两个新的ForkJoinSumCalculator，而它们也由ForkJoinPool安排执行。因此，这一过程可以递归重复，把原任务分为更小的任务，直到满足不方便或不可能再进一步拆分的条件（本例中是求和的项目数小于等于10 000）。这时会顺序计算每个任务的结果，然后由分支过程创建的（隐含的）任务二叉树遍历回到它的根。接下来会合并每个子任务的部分结果，从而得到总任务的结果。这一过程如图5-4所示。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610889287586-75d86307-a27e-45a3-9664-3380cf117dd5.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>图 5-4　分支/合并算法</p><h3 id="5-2-2-使用分支-合并框架的最佳做法"><a href="#5-2-2-使用分支-合并框架的最佳做法" class="headerlink" title="5.2.2　使用分支/合并框架的最佳做法"></a>5.2.2　使用分支/合并框架的最佳做法</h3><p>虽然分支/合并框架还算简单易用，但不幸的是它也很容易被误用。以下是几个有效使用它的最佳做法。</p><ul><li>对一个任务调用join方法会阻塞调用方，直到该任务做出结果。因此，有必要在两个子任务的计算都开始之后再调用它。否则，你得到的版本会比原始的顺序算法更慢且更复杂，因为每个子任务都必须等待另一个子任务完成才能启动。</li><li>不应该在RecursiveTask内部使用ForkJoinPool的invoke方法。相反，你应该始终直接调用compute或fork方法，只有顺序代码才应该用invoke来启动并行计算。</li><li>对子任务调用fork方法可以把它排进ForkJoinPool。同时对左边和右边的子任务调用它似乎很自然，但这样做的效率要比直接对其中一个调用compute低。这样做你可以为其中一个子任务重用同一线程，从而避免在线程池中多分配一个任务造成的开销。</li><li>调试使用分支/合并框架的并行计算可能有点棘手。特别是你平常都在你喜欢的IDE里面看栈跟踪（stack trace）来找问题，但放在分支/合并计算上就不行了，因为调用compute的线程并不是概念上的调用方，后者是调用fork的那个。</li><li>和并行流一样，你不应理所当然地认为在多核处理器上使用分支/合并框架就比顺序计算快。我们已经说过，一个任务可以分解成多个独立的子任务，才能让性能在并行化时有所提升。所有这些子任务的运行时间都应该比分出新任务所花的时间长。一个惯用方法是把输入/输出放在一个子任务里，计算放在另一个里，这样计算就可以和输入/输出同时进行。此外，在比较同一算法的顺序和并行版本的性能时还有别的因素要考虑。就像任何其他Java代码一样，分支/合并框架需要“预热”或者说要执行几遍才会被JIT编译器优化。这就是为什么在测量性能之前跑几遍程序很重要，我们的测试框架就是这么做的。同时还要知道，编译器内置的优化可能会为顺序版本带来一些优势（例如执行死码分析——删去从未被使用的计算）。</li></ul><p>对于分支/合并拆分策略还有最后一点补充：你必须选择一个标准，来决定子任务是要进一步拆分还是已小到可以顺序求值。下一节中会就此给出一些提示。</p><h3 id="5-2-3-工作窃取"><a href="#5-2-3-工作窃取" class="headerlink" title="5.2.3　工作窃取"></a>5.2.3　工作窃取</h3><p>在ForkJoinSumCalculator的例子中，我们决定在要求和的数组中最多包含10 000个项目时就不再创建子任务了。这个选择是很随意的，但大多数情况下也很难找到一个好的启发式方法来确定它，只能试几个不同的值来尝试优化它。在我们的测试案例中，我们先用了一个有1000万项目的数组，意味着ForkJoinSumCalculator至少会分出1000个子任务来。这似乎有点浪费资源，因为我们用来运行它的机器上只有四个核。在这个特定例子中可能确实是这样，因为所有的任务都受CPU约束，预计所花的时间也差不多。</p><p>但分出大量的小任务一般来说都是一个好的选择。这是因为，理想情况下，划分并行任务时，应该让每个任务都用完全相同的时间完成，让所有的CPU核都同样繁忙。不幸的是，实际中，每个子任务所花的时间可能天差地别，要么是因为划分策略效率低，要么是有不可预知的原因，比如磁盘访问慢，或是需要和外部服务协调执行。</p><p>分支/合并框架工程用一种称为工作窃取（work stealing）的技术来解决这个问题。在实际应用中，这意味着这些任务差不多被平均分配到ForkJoinPool中的所有线程上。每个线程都为分配给它的任务保存一个双向链式队列，每完成一个任务，就会从队列头上取出下一个任务开始执行。基于前面所述的原因，某个线程可能早早完成了分配给它的所有任务，也就是它的队列已经空了，而其他的线程还很忙。这时，这个线程并没有闲下来，而是随机选了一个别的线程，从队列的尾巴上“偷走”一个任务。这个过程一直继续下去，直到所有的任务都执行完毕，所有的队列都清空。这就是为什么要划成许多小任务而不是少数几个大任务，这有助于更好地在工作线程之间平衡负载。</p><p>一般来说，这种工作窃取算法用于在池中的工作线程之间重新分配和平衡任务。图5-5展示了这个过程。当工作线程队列中有一个任务被分成两个子任务时，一个子任务就被闲置的工作线程“偷走”了。如前所述，这个过程可以不断递归，直到规定子任务应顺序执行的条件为真。</p><p>￼<img src="https://cdn.nlark.com/yuque/0/2021/png/163287/1610889682097-8ea10d9f-2f41-43e8-b416-38dff026af0a.png?x-oss-process=image%2Fresize%2Cw_1500" alt="image.png"></p><p>图 5-5　分支/合并框架使用的工作窃取算法</p><p>现在你应该清楚流如何使用分支/合并框架来并行处理它的项目了，不过还有一点没有讲。本节中我们分析了一个例子，你明确地指定了将数字数组拆分成多个任务的逻辑。但是，使用本节前面讲的并行流时就用不着这么做了，这就意味着，肯定有一种自动机制来为你拆分流。这种新的自动机制称为Spliterator，有兴趣的同学可以深入去了解。</p><p>– 本文基本摘自《Java实战 第二版》</p><p>本文来自</p><h4 id="图南志"><a href="#图南志" class="headerlink" title="图南志"></a><a href="https://www.yuque.com/bwcx/tnz" target="_blank" rel="noopener">图南志</a></h4><p>而后今将图南</p><p>关注</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tools/Spring微服务技术栈</title>
      <link href="2021/01/16/tools/spring-wei-fu-wu-ji-zhu-zhan/"/>
      <url>2021/01/16/tools/spring-wei-fu-wu-ji-zhu-zhan/</url>
      
        <content type="html"><![CDATA[<ul><li><p>服务注册和服务发现：consul</p></li><li><p>服务健康检查：consul</p></li><li><p>配置管理：consul、archaius</p></li><li><p>集群容错：hystrix</p></li><li><p>计数监控：codahale-metrics、java-statsd-client、hystrix-dashboard、turbine、statsd、graphite、grafana</p></li><li><p>服务路由：ribbon</p></li><li><p>服务通信：retrofit、AsyncHttpClient(不选择okhttp，是因为okhttp性能比较差)</p></li><li><p>文档输出：swagger</p></li><li><p>日志统计：logback+ELK</p></li><li><p>简化代码：lombok</p></li><li><p>消息队列：rabbitmq</p></li><li><p>分布式锁：redis实现和consul实现</p></li><li><p>本地缓存：guava cache</p></li><li><p>链路跟踪：zipkin、brave</p></li><li><p>基本技术：springboot</p></li><li><p>安全鉴权：auth2、openId connect</p></li><li><p>自动化构建与部署：gitlab + jenkins + docker + k8s</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/SUMMARY</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/summary/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/summary/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="README.md">概述</a></li><li><a href="SUMMARY.md">目录</a></li><li><a href="">1、Feign</a><ul><li>[0、声明式调用 Feign 入门.md](1、Feign/0、声明式调用 Feign 入门.md)</li><li>[1、Feign 动态代理.md](1、Feign/1、Feign 动态代理.md)</li><li>[2、MethodHandler 方法执行器.md](1、Feign/2、MethodHandler 方法执行器.md)</li><li><a href="1、Feign/3、请求模板.md">3、请求模板.md</a></li><li><a href="1、Feign/4、编码器.md">4、编码器.md</a></li><li><a href="1、Feign/5、重试机制.md">5、重试机制.md</a></li></ul></li><li><a href="">2、Ribbon</a><ul><li>[1、Ribbon 的简单使用.md](2、Ribbon/1、Ribbon 的简单使用.md)</li><li><a href="2、Ribbon/2、Ribbon原理概览.md">2、Ribbon原理概览.md</a></li><li><a href="2、Ribbon/3、负载均衡器的核心.md">3、负载均衡器的核心.md</a></li></ul></li><li><a href="">3、Hystrix</a><ul><li><a href="3、Hystrix/1、Hystrix在SpringBoot中的使用.md">1、Hystrix在SpringBoot中的使用.md</a></li><li><a href="3、Hystrix/2、创建执行命令调用.md">2、创建执行命令调用.md</a></li><li><a href="3、Hystrix/3、Hystrix的基本功能.md">3、Hystrix的基本功能.md</a></li><li><a href="3、Hystrix/4、Hystrix的工作原理.md">4、Hystrix的工作原理.md</a></li><li><a href="3、Hystrix/5、Hystrix的执行命令方式.md">5、Hystrix的执行命令方式.md</a></li><li><a href="3、Hystrix/6、执行缓存.md">6、执行缓存.md</a></li><li><a href="3、Hystrix/7、正常执行逻辑.md">7、正常执行逻辑.md</a></li><li><a href="3、Hystrix/8、超时时间.md">8、超时时间.md</a></li><li><a href="3、Hystrix/9、失败回调.md">9、失败回调.md</a></li><li><a href="3、Hystrix/10、注解方式的实现.md">10、注解方式的实现.md</a></li></ul></li><li><a href="">4、OpenFeign</a><ul><li><a href="4、OpenFeign/1、OpenFeign介绍.md">1、OpenFeign介绍.md</a></li><li><a href="4、OpenFeign/2、超时时间.md">2、超时时间.md</a></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/README</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/readme/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/4、OpenFeign/2、超时机制</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/4-openfeign/2-chao-shi-ji-zhi/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/4-openfeign/2-chao-shi-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p><code>Spring Cloud</code> 作为微服务解决方案 全家桶，集合了丰富的微服务组件，可以设置超时时间的几个组件<code>Feign</code>、<code>Hystrix</code>,<code>Ribbon</code>、<code>Http</code> 、<code>zuul</code>。这里我们只讨论<code>Feign</code>、<code>Hystrix</code>,<code>Ribbon</code>、<code>Http</code> 这四个组件。</p><h1 id="接口调用的流程"><a href="#接口调用的流程" class="headerlink" title="接口调用的流程"></a>接口调用的流程</h1><p>Spring Cloud 在接口调用上，大致会经过如下几个组件配合：<br><code>Feign</code> —–&gt; <code>Hystrix</code> —&gt;<code>Ribbon</code> —&gt; <code>Http Client（apache http components 或者 Okhttp）</code></p><p><img src="assets/20190531225313194.png" alt="Spring Cloud服务调用轨迹"></p><ul><li><strong>接口化请求调用</strong><br>当调用被<code>@FeignClient</code>注解修饰的接口时，在框架内部，会将请求转换成Feign的请求实例<code>feign.Request</code>，然后交由Feign框架处理。</li><li><strong>Hystrix ：熔断处理机制</strong><br>Feign的调用关系，会被Hystrix代理拦截，对每一个Feign调用请求，Hystrix都会将其包装成<code>HystrixCommand</code>,参与Hystrix的流控和熔断规则。如果请求判断需要熔断，则Hystrix直接熔断，抛出异常或者使用<code>FallbackFactory</code>返回熔断<code>Fallback</code>结果；如果通过，则将调用请求传递给<code>Ribbon</code>组件。</li><li><strong>Ribbon ：服务地址选择</strong><br>当请求传递到<code>Ribbon</code>之后,<code>Ribbon</code>会根据自身维护的服务列表，根据服务的服务质量，如平均响应时间，Load等，结合特定的规则，从列表中挑选合适的服务实例，选择好机器之后，然后将机器实例的信息请求传递给<code>Http Client</code>客户端，<code>HttpClient</code>客户端来执行真正的Http接口调用；</li><li><strong>HttpClient ：Http客户端，真正执行Http调用</strong><br>根据上层<code>Ribbon</code>传递过来的请求，已经指定了服务地址，则HttpClient开始执行真正的Http请求。</li></ul><h1 id="feign的默认配置"><a href="#feign的默认配置" class="headerlink" title="feign的默认配置"></a>feign的默认配置</h1><p>feign 的配置可以采用<code>feign.client.config.&lt;feginName&gt;....</code>的格式为每个feign客户端配置，对于默认值，可以使用<code>feign.client.config.default..</code>的方式进行配置,该配置项在<code>Spring Cloud</code>中，使用<code>FeignClientProperties</code>类表示</p><pre class=" language-yml"><code class="language-yml">feign:  client:    config:      <feignName>:        connectTimeout: 5000        readTimeout: 5000        loggerLevel: full        errorDecoder: com.example.SimpleErrorDecoder        retryer: com.example.SimpleRetryer        requestInterceptors:          - com.example.FooRequestInterceptor          - com.example.BarRequestInterceptor        decode404: false        encoder: com.example.SimpleEncoder        decoder: com.example.SimpleDecoder        contract: com.example.SimpleContract</code></pre><p><code>feign</code>的管理连接超时的配置项：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## 网络连接时间</span><span class="token attr-name">feign.client.config.&lt;clientname>.connectTimeout</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">## 读超时时间</span><span class="token attr-name">feign.client.config.&lt;clientname>.readTimeout</span><span class="token punctuation">=</span></code></pre><h2 id="Spring-Cloud-加载feign配置项的原理"><a href="#Spring-Cloud-加载feign配置项的原理" class="headerlink" title="Spring Cloud 加载feign配置项的原理"></a><strong>Spring Cloud 加载feign配置项的原理</strong></h2><ol><li>检查是否Feign是否制定了上述的配置项，即是否有<code>FeignClientProperties</code>实例；</li><li>如果有上述的配置项，则表明<code>Feign</code>是通过<code>properties</code>初始化的,即<code>configureUsingProperties</code>;</li><li>根据配置项<code>feign.client.defaultToProperties</code>的结果，使用不同的配置覆盖策略。</li></ol><p><img src="assets/20190531225354335.png" alt="在这里插入图片描述"></p><h2 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h2><h3 id="没有通过配置文件配置"><a href="#没有通过配置文件配置" class="headerlink" title="没有通过配置文件配置"></a><strong>没有通过配置文件配置</strong></h3><p>org.springframework.cloud.openfeign.FeignClientFactoryBean#configureUsingConfiguration</p><p>在这种模式下，将使用<code>configureUsingConfiguration</code>,此时将会使用Spring 运行时自动注入的Bean完成配置。</p><p>默认情况下，Spring Cloud对此超时时间的设置为：</p><pre class=" language-props"><code class="language-props">connectTimeoutMillis = 10 * 1000readTimeoutMillis = 60 * 1000</code></pre><h3 id="配置了FeignClientProperties-并且配置了feign-client-defaultToProperties-true"><a href="#配置了FeignClientProperties-并且配置了feign-client-defaultToProperties-true" class="headerlink" title="配置了FeignClientProperties,并且配置了feign.client.defaultToProperties = true"></a>配置了<code>FeignClientProperties</code>,并且配置了<code>feign.client.defaultToProperties = true</code></h3><p>配置了<code>FeignClientProperties</code>,并且配置了<code>feign.client.defaultToProperties = true</code>,此时的这种场景，其配置覆盖顺序如下所示：<br><code>configureUsingConfiguration</code>—&gt; <code>configurationUsingPropeties(&quot;default&quot;)</code>—-&gt; <code>configurationUsingProperties(&quot;&lt;client-name&gt;&quot;)</code></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">feign</span><span class="token punctuation">:</span><span class="token attr-name">  client</span><span class="token punctuation">:</span><span class="token attr-name">    config</span><span class="token punctuation">:</span><span class="token attr-name">      default</span><span class="token punctuation">:</span><span class="token attr-name">        connectTimeout</span><span class="token punctuation">:</span> <span class="token attr-value">5000</span><span class="token attr-name">        readTimeout</span><span class="token punctuation">:</span> <span class="token attr-value">5000</span><span class="token attr-name">      &lt;client-name></span><span class="token punctuation">:</span><span class="token attr-name">        connectTimeout</span><span class="token punctuation">:</span> <span class="token attr-value">4000</span><span class="token attr-name">        readTimeout</span><span class="token punctuation">:</span> <span class="token attr-value">4000</span></code></pre><blockquote><p>最终超时时间为：<code>connectionTimeout=4000</code>,<code>readTimeout=4000</code></p></blockquote><h3 id="配置了FeignClientProperties-并且配置了feign-client-defaultToProperties-false"><a href="#配置了FeignClientProperties-并且配置了feign-client-defaultToProperties-false" class="headerlink" title="配置了FeignClientProperties,并且配置了feign.client.defaultToProperties = false"></a>配置了<code>FeignClientProperties</code>,并且配置了<code>feign.client.defaultToProperties = false</code></h3><p>configurationUsingPropeties(“default”)—-&gt; configurationUsingProperties(“<client-name>“)—&gt; configureUsingConfiguration<br>如果按照这种策略，则最终的超时时间设置就为connectionTimeout=10000,readTimeout=6000</p><h1 id="Hystrix的超时设置"><a href="#Hystrix的超时设置" class="headerlink" title="Hystrix的超时设置"></a>Hystrix的超时设置</h1><p>Hystrix的超时设置，在于命令执行的时间，这个时间要稍微比Feign的超时时间稍微长些。</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">hystrix.command.default.execution.isolation.strategy</span> <span class="token punctuation">=</span> <span class="token attr-value">THREAD</span><span class="token attr-name">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span> <span class="token punctuation">=</span> <span class="token attr-value">10000</span><span class="token attr-name">hystrix.command.default.execution.timeout.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">hystrix.command.default.execution.isolation.thread.interruptOnTimeout</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">hystrix.command.default.execution.isolation.thread.interruptOnFutureCancel</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span></code></pre><blockquote><p>Hystrix的超时时间是站在命令执行时间来看的，和Feign设置的超时时间在设置上并没有关联关系。Hystrix不仅仅可以封装Http调用，还可以封装任意的代码执行片段。Hystrix是从<code>命令对象</code>的角度去定义，某个命令执行的超时时间，超过此此时间，命令将会直接熔断。<br>假设hystrix 的默认超时时间设置了<code>10000</code>,即<code>10秒</code>，而feign 设置的是<code>20秒</code>，那么<code>Hystrix</code>会在10秒到来是直接熔断返回，不会等到<code>feign</code>的20秒执行结束，也不会中断尚未执行完的<code>feign</code>调用。</p></blockquote><h1 id="Ribbon-的超时时间"><a href="#Ribbon-的超时时间" class="headerlink" title="Ribbon 的超时时间"></a>Ribbon 的超时时间</h1><p>Ribbon的超时时间可以通过如下配置项指定，默认情况下，这两项的值和feign的配置保持一致：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">&lt;service-name>.ribbon.ConnectTimeout</span><span class="token punctuation">=</span> <span class="token attr-value">&lt;feign-default: 10000></span><span class="token attr-name">&lt;service-name>.ribbon.ReadTimeout</span><span class="token punctuation">=</span> <span class="token attr-value">&lt;feign-default:6000></span></code></pre><p>org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient#getClientConfig</p><pre class=" language-java"><code class="language-java">IClientConfig <span class="token function">getClientConfig</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Options options <span class="token comment" spellcheck="true">/*feign配置项*/</span><span class="token punctuation">,</span> String clientName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IClientConfig requestConfig<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">==</span> DEFAULT_OPTIONS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            requestConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientFactory<span class="token punctuation">.</span><span class="token function">getClientConfig</span><span class="token punctuation">(</span>clientName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            requestConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FeignOptionsClientConfig</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> requestConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FeignOptionsClientConfig</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultClientConfigImpl</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将Feign的配置设置为Ribbon的`IClientConfig`中</span>        <span class="token keyword">public</span> <span class="token function">FeignOptionsClientConfig</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Options options<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setProperty</span><span class="token punctuation">(</span>CommonClientConfigKey<span class="token punctuation">.</span>ConnectTimeout<span class="token punctuation">,</span>                    options<span class="token punctuation">.</span><span class="token function">connectTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setProperty</span><span class="token punctuation">(</span>CommonClientConfigKey<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">readTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span></code></pre><blockquote><p><code>Ribbon</code>的超时时间通过<code>Feign</code>配置项加载,构造其<code>Ribbon</code>客户端表示：<code>IClientConfig</code>,实际上该超时时间并没有实际使用的场景，仅仅作为配置项。<br>由上面的原则可以看出，当<code>feign</code>设置了超时时间，<code>Ribbon</code>会依据<code>feign</code>的设置同步。Ribbon的这个超时时间，用于指导真正调用接口时，设置真正实现者的超时时间。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/4、OpenFeign/1、OpenFeign介绍</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/4-openfeign/1-openfeign-jie-shao/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/4-openfeign/1-openfeign-jie-shao/</url>
      
        <content type="html"><![CDATA[<p> <strong>Spring Cloud OpenFeign</strong></p><p>将 Feign 集成到 Spring Cloud 体系中，实现服务的<strong>声明式 HTTP 调用</strong>。相比单纯的fegin和SpringBoot进行了整合，Spring Cloud OpenFeign 进一步将 Feign 和 <a href="https://github.com/spring-cloud/spring-cloud-openfeign/blob/2.2.x/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/loadbalancer/FeignLoadBalancerAutoConfiguration.java" target="_blank" rel="noopener">Ribbon 整合</a>，提供了负载均衡的功能。另外，Feign 自身已经完成和 <a href="https://github.com/OpenFeign/feign/tree/master/hystrix" target="_blank" rel="noopener">Hystrix 整合</a>，提供了服务容错的功能。</p><p>spring-cloud-starter-feign 和 openFegin本质上是一样的，实际上引入的还是openFegin。</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="Spring-Cloud-OpenFeign-最简使用"><a href="#Spring-Cloud-OpenFeign-最简使用" class="headerlink" title="Spring Cloud OpenFeign 最简使用"></a>Spring Cloud OpenFeign 最简使用</h1><p> 引入 maven</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p> @EnableFeignClients 注解扫描包</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span>  <span class="token comment" spellcheck="true">// 默认扫描 FeignApplication.class 包下 @FeignClient 注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>FeignApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> @FeignClient 配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"echo-server"</span><span class="token punctuation">,</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:10010"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EchoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/echo/{msg}"</span><span class="token punctuation">)</span>    String <span class="token function">echo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>总结：</strong> 至此，可以像使用普通接口一样调用 http 了</p><h1 id="Feign-整体装配流程分析"><a href="#Feign-整体装配流程分析" class="headerlink" title="Feign 整体装配流程分析"></a>Feign 整体装配流程分析</h1><p><img src="assets/image-20210103185843578.png" alt="image-20210103185843578"></p><p>OpenFeign 装配有两个入口：</p><ul><li>自动装配（spring.factories）</li><li>@EnableFeignClients 自动扫描</li></ul><h1 id="Feign-自动装配"><a href="#Feign-自动装配" class="headerlink" title="Feign 自动装配"></a>Feign 自动装配</h1><p> 自动装配（spring.factories）,Feign组件的配置主要有3个自动化配置类：</p><p><img src="assets/image-20210103194033885.png" alt="image-20210103194033885"></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\org.springframework.cloud.openfeign.ribbon.FeignRibbonClientAutoConfiguration,\org.springframework.cloud.openfeign.hateoas.FeignHalAutoConfiguration,\org.springframework.cloud.openfeign.FeignAutoConfiguration,\org.springframework.cloud.openfeign.encoding.FeignAcceptGzipEncodingAutoConfiguration,\org.springframework.cloud.openfeign.encoding.FeignContentGzipEncodingAutoConfiguration,\org.springframework.cloud.openfeign.loadbalancer.FeignLoadBalancerAutoConfiguration</span></code></pre><ul><li><code>FeignAutoConfiguration</code> 自动装配 FeignContext 和 Targeter，以及 Client 配置。</li></ul><ul><li><p><code>FeignRibbonClientAutoConfiguration</code> <strong>实现负载均衡，负载均衡是在 Client 这一层实现的。</strong></p><ul><li><code>HttpClientFeignLoadBalancedConfiguration</code> ApacheHttpClient 实现负载均衡</li><li><code>OkHttpFeignLoadBalancedConfiguration</code> OkHttpClient实现负载均衡</li><li><code>DefaultFeignLoadBalancedConfiguration</code> Client.Default实现负载均衡</li></ul></li></ul><h2 id="FeignAutoConfiguration"><a href="#FeignAutoConfiguration" class="headerlink" title="FeignAutoConfiguration"></a>FeignAutoConfiguration</h2><ul><li><code>FeignContext</code> 是每个 FeignClient 的装配上下文，默认的配置是 FeignClientsConfiguration</li><li><code>Targeter</code> 有两种实现：一是 DefaultTargeter，直接调用 Feign.Builder； <strong>二是 HystrixTargeter，调用 HystrixFeign.Builder，开启熔断。</strong></li><li><code>Client</code> ：自动装配 ApacheHttpClient，OkHttpClient，装配条件不满足，默认是 Client.Default。但这些 Client 都没有实现负载均衡。</li></ul><p>配置Feign上下文（FeignContext）、配置Targeter、配置Client(仅仅组件)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FeignAutoConfiguration 自动装配 FeignContext</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>FeignClientSpecification<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> FeignContext <span class="token function">feignContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FeignContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FeignContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setConfigurations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="FeignContext"><a href="#FeignContext" class="headerlink" title="FeignContext"></a>FeignContext</h3><p>FeignContext 是每个 Feign 客户端配置的上下文环境，会将初始化一个 Feign 的组件都在一个子 ApplicationContext 中初始化，从而隔离不同的 Feign 客户端。换名话说，不同名称的 @FeignClient 都会初始化一个子的 Spring 容器。</p><blockquote><p>每个 Feign 客户端除了默认 FeignClientsConfiguration，还可以自定义配置类 FeignClientSpecification,在 @EnableFeignClients 和 @FeignClient 注解的时候指定</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignContext</span> <span class="token keyword">extends</span> <span class="token class-name">NamedContextFactory</span><span class="token operator">&lt;</span>FeignClientSpecification<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FeignContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>FeignClientsConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"feign"</span><span class="token punctuation">,</span> <span class="token string">"feign.client.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="FeignClientsConfiguration"><a href="#FeignClientsConfiguration" class="headerlink" title="FeignClientsConfiguration"></a>FeignClientsConfiguration</h3><p>FeignClientsConfiguration 是 Feign 的默认配置，可以通过 @EnableFeignClients 和 @FeignClient 修改默认配置。FeignClientsConfiguration 主要配置如下：</p><p>org.springframework.cloud.openfeign.FeignClientsConfiguration</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignClientsConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Decoder <span class="token function">feignDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptionalDecoder</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ResponseEntityDecoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringDecoder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 适配 Spring MVC 注解</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Contract <span class="token function">feignContract</span><span class="token punctuation">(</span>ConversionService feignConversionService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringMvcContract</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parameterProcessors<span class="token punctuation">,</span> feignConversionService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Feign<span class="token punctuation">.</span>Builder <span class="token function">feignBuilder</span><span class="token punctuation">(</span>Retryer retryer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Feign<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retryer</span><span class="token punctuation">(</span>retryer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><h3 id="Targeter"><a href="#Targeter" class="headerlink" title="Targeter"></a>Targeter</h3><blockquote><p> Targeter 有两种实现：一是 DefaultTargeter，直接调用 Feign.Builder； 二是 HystrixTargeter，调用 HystrixFeign.Builder，开启熔断。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FeignAutoConfiguration 自动装配 Targeter</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"feign.hystrix.HystrixFeign"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HystrixFeignTargeterConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Targeter <span class="token function">feignTargeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HystrixTargeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"feign.hystrix.HystrixFeign"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultFeignTargeterConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Targeter <span class="token function">feignTargeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTargeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>HttpClientFeign 没有实现负载均衡。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FeignClientsConfiguration 不实现负载均衡的 Client。OkHttpFeignConfiguration 类似</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ApacheHttpClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"com.netflix.loadbalancer.ILoadBalancer"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CloseableHttpClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"feign.httpclient.enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientFeignConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Client <span class="token function">feignClient</span><span class="token punctuation">(</span>HttpClient httpClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApacheHttpClient</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="FeignClientsConfiguration-1"><a href="#FeignClientsConfiguration-1" class="headerlink" title="FeignClientsConfiguration"></a>FeignClientsConfiguration</h2><p>Decoder、Encoder、Retryer、Contract（SpringMvcContract）、FeignBuilder</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignClientsConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ObjectFactory<span class="token operator">&lt;</span>HttpMessageConverters<span class="token operator">></span> messageConverters<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>AnnotatedParameterProcessor<span class="token operator">></span> parameterProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>FeignFormatterRegistrar<span class="token operator">></span> feignFormatterRegistrars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Logger logger<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Decoder <span class="token function">feignDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntityDecoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringDecoder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Encoder <span class="token function">feignEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringEncoder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Contract <span class="token function">feignContract</span><span class="token punctuation">(</span>ConversionService feignConversionService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringMvcContract</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parameterProcessors<span class="token punctuation">,</span> feignConversionService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FormattingConversionService <span class="token function">feignConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FormattingConversionService conversionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFormattingConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FeignFormatterRegistrar feignFormatterRegistrar <span class="token operator">:</span> feignFormatterRegistrars<span class="token punctuation">)</span> <span class="token punctuation">{</span>            feignFormatterRegistrar<span class="token punctuation">.</span><span class="token function">registerFormatters</span><span class="token punctuation">(</span>conversionService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> conversionService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*默认使用的Feign Builer*/</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HystrixCommand<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HystrixFeign<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HystrixFeignConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"feign.hystrix.enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> Feign<span class="token punctuation">.</span>Builder <span class="token function">feignHystrixBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> HystrixFeign<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Retryer <span class="token function">feignRetryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Retryer<span class="token punctuation">.</span>NEVER_RETRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Feign<span class="token punctuation">.</span>Builder <span class="token function">feignBuilder</span><span class="token punctuation">(</span>Retryer retryer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Feign<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retryer</span><span class="token punctuation">(</span>retryer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>FeignLoggerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> FeignLoggerFactory <span class="token function">feignLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFeignLoggerFactory</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="FeignRibbonClientAutoConfiguration"><a href="#FeignRibbonClientAutoConfiguration" class="headerlink" title="FeignRibbonClientAutoConfiguration"></a>FeignRibbonClientAutoConfiguration</h2><blockquote><p>Request Options（超时配置）、配置Client(带负载均衡)</p></blockquote><p>FeignRibbonClientAutoConfiguration 实现了负载均衡。SpringClientFactory 实际是 RibbonClientFactory，功能等同于 FeignContext，用于装配 Ribbon 的基本组件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ILoadBalancer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Feign<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span>FeignAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> FeignHttpClientProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HttpClientFeignLoadBalancedConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        OkHttpFeignLoadBalancedConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        DefaultFeignLoadBalancedConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignRibbonClientAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// CachingSpringLoadBalancerFactory 用于组装 FeignLoadBalancer</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"org.springframework.retry.support.RetryTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CachingSpringLoadBalancerFactory <span class="token function">cachingLBClientFactory</span><span class="token punctuation">(</span>            SpringClientFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CachingSpringLoadBalancerFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> FeignRibbonClientAutoConfiguration 之上 import 了三个配置类，HttpClientFeignLoadBalancedConfiguration、OkHttpFeignLoadBalancedConfiguration、DefaultFeignLoadBalancedConfiguration。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">class</span> <span class="token class-name">DefaultFeignLoadBalancedConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> Client <span class="token function">feignClient</span><span class="token punctuation">(</span>CachingSpringLoadBalancerFactory cachingFactory<span class="token punctuation">,</span>                              SpringClientFactory clientFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// cachingFactory 用于组装 FeignLoadBalancer</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerFeignClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Client<span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>                    cachingFactory<span class="token punctuation">,</span> clientFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>@EnableFeignClients 注入 FeignClientsRegistrar，FeignClientsRegistrar 开启自动扫描，将包下 @FeignClient 标注的接口包装成 FeignClientFactoryBean 对象，最终通过 Feign.Builder 生成该接口的代理对象。而 Feign.Builder 的默认配置是 FeignClientsConfiguration，是在 FeignAutoConfiguration 自动注入的。</p><p>Feign组件初始化是从<code>@EnableFeignClients</code>注解开始的。</p><p>核心有2个方法，<code>basePackages</code>与<code>defaultConfiguration</code>，前者用于定义扫描包路径，后者用于定义<code>@FeignClient</code>组件的配置类，在配置类中可以自己定义Feign请求的<code>Decoder</code>解码器、<code>Encoder</code>编码器、<code>Contract</code>组件扫描构造器。<br>在注解上有一个关键注解<code>@Import(FeignClientsRegistrar.class)</code>，导入了Feign组件的注册器，用于扫描Feign组件与初始化Feign组件的Bean定义信息</p><h2 id="FeignClientsRegistrar"><a href="#FeignClientsRegistrar" class="headerlink" title="FeignClientsRegistrar"></a>FeignClientsRegistrar</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FeignClientsRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span>         <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>            BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注册 @EnableFeignClients#defaultConfiguration 默认配置类</span>        <span class="token function">registerDefaultConfiguration</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 扫描所有的 @FeignClient 注解</span>        <span class="token function">registerFeignClients</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="registerDefaultConfiguration"><a href="#registerDefaultConfiguration" class="headerlink" title="registerDefaultConfiguration"></a><strong>registerDefaultConfiguration</strong></h2><p>registerDefaultConfiguration 最终调用 <code>registerClientConfiguration(registry, name,defaultAttrs.get(&quot;defaultConfiguration&quot;))</code> 将 @EnableFeignClients 的默认配置注入到容器中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerDefaultConfiguration</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>            BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> defaultAttrs <span class="token operator">=</span> metadata                <span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>EnableFeignClients<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果存在自定义配置则定义配置Bean</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultAttrs <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> defaultAttrs<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"defaultConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">hasEnclosingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                name <span class="token operator">=</span> <span class="token string">"default."</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">getEnclosingClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                name <span class="token operator">=</span> <span class="token string">"default."</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">registerClientConfiguration</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> name<span class="token punctuation">,</span>                    defaultAttrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"defaultConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> FeignAutoConfiguration 自动装配 FeignContext 时的 <code>List&lt;FeignClientSpecification&gt; configurations</code> ，就是将 @EnableFeignClients 和 @FeignClient 的 configuration 属性注册到 Spring 的容器中。</p><h2 id="registerFeignClients"><a href="#registerFeignClients" class="headerlink" title="registerFeignClients"></a><strong>registerFeignClients</strong></h2><p>registerFeignClients 将 @FeignClient 标注的接口装配成 FeignClientFactoryBean 注入到容器中。FeignClientFactoryBean#getObject 最终会调用 feign.target 生成最终的代理对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerFeignClients</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>            BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassPathScanningCandidateComponentProvider scanner <span class="token operator">=</span> <span class="token function">getScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> basePackages<span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attrs <span class="token operator">=</span> metadata                <span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>EnableFeignClients<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定扫描类注解类型为@FeignClient的类</span>        AnnotationTypeFilter annotationTypeFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>                FeignClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> clients <span class="token operator">=</span> attrs <span class="token operator">==</span> null <span class="token operator">?</span> null                <span class="token operator">:</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"clients"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clients <span class="token operator">==</span> null <span class="token operator">||</span> clients<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>annotationTypeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>            basePackages <span class="token operator">=</span> <span class="token function">getBasePackages</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> clientClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            basePackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>                basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                clientClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            AbstractClassTestingTypeFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractClassTestingTypeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span>ClassMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String cleaned <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\$"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> clientClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cleaned<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">AllTypeFilter</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> annotationTypeFilter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//扫描定义的Feign组件包路径</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidateComponents <span class="token operator">=</span> scanner                    <span class="token punctuation">.</span><span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinition candidateComponent <span class="token operator">:</span> candidateComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>candidateComponent <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// verify annotated class is an interface</span>                    AnnotatedBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> candidateComponent<span class="token punctuation">;</span>                    AnnotationMetadata annotationMetadata <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token string">"@FeignClient can only be specified on an interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes <span class="token operator">=</span> annotationMetadata                            <span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>                                    FeignClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String name <span class="token operator">=</span> <span class="token function">getClientName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">registerClientConfiguration</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> name<span class="token punctuation">,</span>                            attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"configuration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">registerFeignClient</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerFeignClient</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">,</span>            AnnotationMetadata annotationMetadata<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义Feign组件的创建工厂FeignClientFactoryBean</span>        BeanDefinitionBuilder definition <span class="token operator">=</span> BeanDefinitionBuilder                <span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>FeignClientFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">validate</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token function">getUrl</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span> <span class="token function">getPath</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"decode404"</span><span class="token punctuation">,</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"decode404"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">,</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"fallbackFactory"</span><span class="token punctuation">,</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fallbackFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        definition<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        String alias <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"FeignClient"</span><span class="token punctuation">;</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> primary <span class="token operator">=</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// has a default, won't be null</span>        beanDefinition<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span>primary<span class="token punctuation">)</span><span class="token punctuation">;</span>        String qualifier <span class="token operator">=</span> <span class="token function">getQualifier</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            alias <span class="token operator">=</span> qualifier<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BeanDefinitionHolder holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> className<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> alias <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="FeignClientFactoryBean"><a href="#FeignClientFactoryBean" class="headerlink" title="FeignClientFactoryBean"></a>FeignClientFactoryBean</h2><p>Feign代理Bean实例创建是通过FeignClientFactoryBean。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. FeignAutoConfiguration 自动装配 FeignContext</span>    FeignContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>FeignContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Feign<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token function">feign</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. url不存在，则一定是负载均衡</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">+=</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token function">loadBalance</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> context<span class="token punctuation">,</span>                               <span class="token keyword">new</span> <span class="token class-name">HardCodedTarget</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. url存在，不用负载均衡</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Client client <span class="token operator">=</span> <span class="token function">getOptional</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token keyword">instanceof</span> <span class="token class-name">LoadBalancerFeignClient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>LoadBalancerFeignClient<span class="token punctuation">)</span> client<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        builder<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4 FeignAutoConfiguration 自动装配 Targeter</span>    Targeter targeter <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Targeter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用 feign.target 生成动态代理</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> targeter<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> builder<span class="token punctuation">,</span> context<span class="token punctuation">,</span>                               <span class="token keyword">new</span> <span class="token class-name">HardCodedTarget</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>@FeignClient 标注的接口，最终通过 targeter.target 生成最终的代理对象。在 FeignClientFactoryBean 中有 2 个重要的对象 FeignClient 和 Targeter，这两个对象都是通过 FeignAutoConfiguration 自动注入的。</p><h1 id="带熔断功能的HystrixTargeter"><a href="#带熔断功能的HystrixTargeter" class="headerlink" title="带熔断功能的HystrixTargeter"></a>带熔断功能的HystrixTargeter</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HystrixTargeter</span> <span class="token keyword">implements</span> <span class="token class-name">Targeter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">target</span><span class="token punctuation">(</span>FeignClientFactoryBean factory<span class="token punctuation">,</span> Feign<span class="token punctuation">.</span>Builder feign<span class="token punctuation">,</span> FeignContext context<span class="token punctuation">,</span>                        Target<span class="token punctuation">.</span>HardCodedTarget<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Feign实例不是HystrixFeign.Builder的则忽略，调用原生的构建方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>feign <span class="token keyword">instanceof</span> <span class="token class-name">feign<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>HystrixFeign<span class="token punctuation">.</span>Builder</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> feign<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//以下方法则使用HystrixFeign Builder （自定义了构建实际代理对象HystrixInvocationHandler）构建一个执行处理器</span>        feign<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>HystrixFeign<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token punctuation">(</span>feign<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>HystrixFeign<span class="token punctuation">.</span>Builder<span class="token punctuation">)</span> feign<span class="token punctuation">;</span>        SetterFactory setterFactory <span class="token operator">=</span> <span class="token function">getOptional</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span>            SetterFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setterFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setterFactory</span><span class="token punctuation">(</span>setterFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fallback <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fallback <span class="token operator">!=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">targetWithFallback</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> target<span class="token punctuation">,</span> builder<span class="token punctuation">,</span> fallback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fallbackFactory <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFallbackFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fallbackFactory <span class="token operator">!=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">targetWithFallbackFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> target<span class="token punctuation">,</span> builder<span class="token punctuation">,</span> fallbackFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> feign<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">targetWithFallbackFactory</span><span class="token punctuation">(</span>String feignClientName<span class="token punctuation">,</span> FeignContext context<span class="token punctuation">,</span>                                            Target<span class="token punctuation">.</span>HardCodedTarget<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">,</span>                                            HystrixFeign<span class="token punctuation">.</span>Builder builder<span class="token punctuation">,</span>                                            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fallbackFactoryClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FallbackFactory<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> fallbackFactory <span class="token operator">=</span> <span class="token punctuation">(</span>FallbackFactory<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">)</span>            <span class="token function">getFromContext</span><span class="token punctuation">(</span><span class="token string">"fallbackFactory"</span><span class="token punctuation">,</span> feignClientName<span class="token punctuation">,</span> context<span class="token punctuation">,</span> fallbackFactoryClass<span class="token punctuation">,</span> FallbackFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* We take a sample fallback from the fallback factory to check if it returns a fallback        that is compatible with the annotated feign interface. */</span>        Object exampleFallback <span class="token operator">=</span> fallbackFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>exampleFallback<span class="token punctuation">,</span>            String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>            <span class="token string">"Incompatible fallbackFactory instance for feign client %s. Factory may not produce null!"</span><span class="token punctuation">,</span>                feignClientName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>exampleFallback<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                    <span class="token string">"Incompatible fallbackFactory instance for feign client %s. Factory produces instances of '%s', but should produce instances of '%s'"</span><span class="token punctuation">,</span>                    feignClientName<span class="token punctuation">,</span> exampleFallback<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> fallbackFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">targetWithFallback</span><span class="token punctuation">(</span>String feignClientName<span class="token punctuation">,</span> FeignContext context<span class="token punctuation">,</span>                                     Target<span class="token punctuation">.</span>HardCodedTarget<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">,</span>                                     HystrixFeign<span class="token punctuation">.</span>Builder builder<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T fallbackInstance <span class="token operator">=</span> <span class="token function">getFromContext</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">,</span> feignClientName<span class="token punctuation">,</span> context<span class="token punctuation">,</span> fallback<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> fallbackInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getFromContext</span><span class="token punctuation">(</span>String fallbackMechanism<span class="token punctuation">,</span> String feignClientName<span class="token punctuation">,</span> FeignContext context<span class="token punctuation">,</span>                                 Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object fallbackInstance <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>feignClientName<span class="token punctuation">,</span> beanType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fallbackInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                <span class="token string">"No "</span> <span class="token operator">+</span> fallbackMechanism <span class="token operator">+</span> <span class="token string">" instance of type %s found for feign client %s"</span><span class="token punctuation">,</span>                beanType<span class="token punctuation">,</span> feignClientName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>targetType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                    String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                        <span class="token string">"Incompatible "</span> <span class="token operator">+</span> fallbackMechanism <span class="token operator">+</span> <span class="token string">" instance. Fallback/fallbackFactory of type %s is not assignable to %s for feign client %s"</span><span class="token punctuation">,</span>                        beanType<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> feignClientName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> fallbackInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getOptional</span><span class="token punctuation">(</span>String feignClientName<span class="token punctuation">,</span> FeignContext context<span class="token punctuation">,</span>        Class<span class="token operator">&lt;</span>T<span class="token operator">></span> beanType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>feignClientName<span class="token punctuation">,</span> beanType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="HystrixInvocationHandler"><a href="#HystrixInvocationHandler" class="headerlink" title="HystrixInvocationHandler"></a>HystrixInvocationHandler</h2><p>最终HystrixTargeter创建出HystrixInvocationHandler</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/9、失败回调</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/9-shi-bai-hui-diao/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/9-shi-bai-hui-diao/</url>
      
        <content type="html"><![CDATA[<p>以下情况会进行失败回退</p><ul><li>处理<strong>链路处于熔断</strong>的回退逻辑</li><li>处理<strong>信号量获得失败</strong>的回退逻辑</li><li>处理<strong>线程池提交任务拒绝</strong>的回退逻辑</li><li>处理<strong>命令执行超时</strong>的回退逻辑</li><li>处理<strong>命令执行异常</strong>的回退逻辑</li></ul><h1 id="熔断和信号量回调"><a href="#熔断和信号量回调" class="headerlink" title="熔断和信号量回调"></a>熔断和信号量回调</h1><p>在正常执行逻辑的时候回先判断是否熔断，如果没有熔断则判断获取信息量是否成功</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">applyHystrixSemantics</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// mark that we're starting execution on the ExecutionHook</span>    <span class="token comment" spellcheck="true">// if this hook throws an exception, then a fast-fail occurs with no fallback.  No state is left inconsistent</span>    executionHook<span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* determine if we're allowed to execute */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">.</span><span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//...</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>executionSemaphore<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//....</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">handleSemaphoreRejectionViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">handleShortCircuitViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="熔断回调"><a href="#熔断回调" class="headerlink" title="熔断回调"></a>熔断回调</h2><p>如果是熔断回调，则异常信息为<code>Hystrix circuit short-circuited and is OPEN</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">handleShortCircuitViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// record that we are returning a short-circuited fallback</span>    eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>SHORT_CIRCUITED<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// short-circuit and go directly to fallback (or throw an exception if no fallback implemented)</span>    Exception shortCircuitException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Hystrix circuit short-circuited and is OPEN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutionException</span><span class="token punctuation">(</span>shortCircuitException<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getFallbackOrThrowException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> HystrixEventType<span class="token punctuation">.</span>SHORT_CIRCUITED<span class="token punctuation">,</span> FailureType<span class="token punctuation">.</span>SHORTCIRCUIT<span class="token punctuation">,</span>                <span class="token string">"short-circuited"</span><span class="token punctuation">,</span> shortCircuitException<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="获取信号量回调"><a href="#获取信号量回调" class="headerlink" title="获取信号量回调"></a>获取信号量回调</h2><p>异常信息为<code>could not acquire a semaphore for execution</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">handleSemaphoreRejectionViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Exception semaphoreRejectionException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"could not acquire a semaphore for execution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutionException</span><span class="token punctuation">(</span>semaphoreRejectionException<span class="token punctuation">)</span><span class="token punctuation">;</span>    eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>SEMAPHORE_REJECTED<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"HystrixCommand Execution Rejection by Semaphore."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// debug only since we're throwing the exception and someone higher will do something with it</span>    <span class="token comment" spellcheck="true">// retrieve a fallback or throw an exception if no fallback available</span>    <span class="token keyword">return</span> <span class="token function">getFallbackOrThrowException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> HystrixEventType<span class="token punctuation">.</span>SEMAPHORE_REJECTED<span class="token punctuation">,</span> FailureType<span class="token punctuation">.</span>REJECTED_SEMAPHORE_EXECUTION<span class="token punctuation">,</span>            <span class="token string">"could not acquire a semaphore for execution"</span><span class="token punctuation">,</span> semaphoreRejectionException<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="执行命令过程中的异常"><a href="#执行命令过程中的异常" class="headerlink" title="执行命令过程中的异常"></a>执行命令过程中的异常</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">executeCommandAndObserve</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> HystrixRequestContext currentRequestContext <span class="token operator">=</span> HystrixRequestContext<span class="token punctuation">.</span><span class="token function">getContextForCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span>    <span class="token comment" spellcheck="true">//异常回调处理</span>    <span class="token keyword">final</span> Func1<span class="token operator">&lt;</span>Throwable<span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span> handleFallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Throwable<span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Exception e <span class="token operator">=</span> <span class="token function">getExceptionFromThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutionException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 线程池提交任务拒绝异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">handleThreadPoolRejectionViaFallback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 执行命令超时异常</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">HystrixTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">handleTimeoutViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">HystrixBadRequestException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">handleBadRequestByEmittingError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">HystrixBadRequestException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token function">handleFailureViaFallback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span>    Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> execution<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">executionTimeoutEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        execution <span class="token operator">=</span> <span class="token function">executeCommandWithSpecifiedIsolation</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HystrixObservableTimeoutOperator</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        execution <span class="token operator">=</span> <span class="token function">executeCommandWithSpecifiedIsolation</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> execution<span class="token punctuation">.</span><span class="token function">doOnNext</span><span class="token punctuation">(</span>markEmits<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doOnCompleted</span><span class="token punctuation">(</span>markOnCompleted<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">onErrorResumeNext</span><span class="token punctuation">(</span>handleFallback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//异常回调</span>            <span class="token punctuation">.</span><span class="token function">doOnEach</span><span class="token punctuation">(</span>setRequestContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a><strong>超时</strong></h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">handleTimeoutViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getFallbackOrThrowException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> HystrixEventType<span class="token punctuation">.</span>TIMEOUT<span class="token punctuation">,</span> FailureType<span class="token punctuation">.</span>TIMEOUT<span class="token punctuation">,</span> <span class="token string">"timed-out"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="命令执行异常"><a href="#命令执行异常" class="headerlink" title="命令执行异常"></a><strong>命令执行异常</strong></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/8、超时时间</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/8-chao-shi-shi-jian/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/8-chao-shi-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>开启<strong>执行超时</strong>功能，需要配置 ：</p><ul><li><code>HystrixCommandProperties.executionTimeoutEnabled</code>,执行命令超时功能开关。<ul><li>值 ：Boolean</li><li>默认值 ：<code>true</code></li></ul></li><li><code>HystrixCommandProperties.executionTimeoutInMilliseconds</code> ,执行命令超时时长。<ul><li>值 ：Integer</li><li>单位 ：毫秒</li><li>默认值 ：1000 毫秒</li></ul></li></ul><p>在正常的流程，获取执行命令的方法<code>executeCommandAndObserve</code>里面有队超时的判断</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">executeCommandAndObserve</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> HystrixRequestContext currentRequestContext <span class="token operator">=</span> HystrixRequestContext<span class="token punctuation">.</span><span class="token function">getContextForCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...省略部分代码</span>    Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> execution<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">executionTimeoutEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        execution <span class="token operator">=</span> <span class="token function">executeCommandWithSpecifiedIsolation</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//添加超时定时器</span>                <span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HystrixObservableTimeoutOperator</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        execution <span class="token operator">=</span> <span class="token function">executeCommandWithSpecifiedIsolation</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> execution<span class="token punctuation">.</span><span class="token function">doOnNext</span><span class="token punctuation">(</span>markEmits<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doOnCompleted</span><span class="token punctuation">(</span>markOnCompleted<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">onErrorResumeNext</span><span class="token punctuation">(</span>handleFallback<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doOnEach</span><span class="token punctuation">(</span>setRequestContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只有超时时间开启的时候才会进行添加超时的定时器</p><h1 id="Hystrix-定时任务监听器"><a href="#Hystrix-定时任务监听器" class="headerlink" title="Hystrix 定时任务监听器"></a>Hystrix 定时任务<strong>监听器</strong></h1><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HystrixObservableTimeoutOperator</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Operator</span><span class="token operator">&lt;</span>R<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//...</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">final</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token operator">></span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//超时的时候需要执行的动作</span>        <span class="token keyword">final</span> HystrixContextRunnable timeoutRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixContextRunnable</span><span class="token punctuation">(</span>originalCommand<span class="token punctuation">.</span>concurrencyStrategy<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果超时就会抛出异常</span>                child<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HystrixTimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间监听器</span>        TimerListener listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果时间到了，还是未执行就抛出异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>originalCommand<span class="token punctuation">.</span>isCommandTimedOut<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>TimedOutStatus<span class="token punctuation">.</span>NOT_EXECUTED<span class="token punctuation">,</span> TimedOutStatus<span class="token punctuation">.</span>TIMED_OUT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//发送超时事件</span>                    originalCommand<span class="token punctuation">.</span>eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>TIMEOUT<span class="token punctuation">,</span> originalCommand<span class="token punctuation">.</span>commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 取消订阅，关闭远程请求</span>                    s<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用超时处理</span>                    timeoutRunnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//if it did not start, then we need to mark a command start for concurrency metrics, and then issue the timeout</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIntervalTimeInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> originalCommand<span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">executionTimeoutInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加定时任务</span>        <span class="token keyword">final</span> Reference<span class="token operator">&lt;</span>TimerListener<span class="token operator">></span> tl <span class="token operator">=</span> HystrixTimer<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTimerListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set externally so execute/queue can see this</span>        originalCommand<span class="token punctuation">.</span>timeoutTimer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span>        <span class="token comment" spellcheck="true">// if s is unsubscribed we want to unsubscribe the parent</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>先创建超时任务，然后在时间监听器里面调用超时任务。最后创建超时定时任务的线程池，执行的任务就是时间监听器</p><h1 id="Hystrix-定时任务执行器"><a href="#Hystrix-定时任务执行器" class="headerlink" title="Hystrix 定时任务执行器"></a>Hystrix 定时任务<strong>执行器</strong></h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Reference<span class="token operator">&lt;</span>TimerListener<span class="token operator">></span> <span class="token function">addTimerListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> TimerListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">startThreadIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// add the listener</span>    Runnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                listener<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed while ticking TimerListener"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JDK自带的定时线程池</span>    ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> f <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">getIntervalTimeInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">getIntervalTimeInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TimerReference</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h1><p><strong>不同执行隔离策略此处的表现不同</strong>。</p><ul><li><code>ExecutionIsolationStrategy.THREAD</code> ：该策略下提供取消订阅( <code>#unsubscribe()</code> )，并且命令执行超时，<strong>强制</strong>取消命令的执行。</li><li>ExecutionIsolationStrategy.SEMAPHORE<code>：该策略下**未**提供取消订阅(</code>#unsubscribe()` )时，对超时执行命令的取消。</li></ul><p><code>com.netflix.hystrix.AbstractCommand#executeCommandWithSpecifiedIsolation</code>方法有具体的实现</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/7、正常执行逻辑</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/7-zheng-chang-zhi-xing-luo-ji/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/7-zheng-chang-zhi-xing-luo-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="assets/01.jpeg" alt="img"></p><p><strong>蓝</strong>圈正常执行逻辑。</p><h1 id="正常执行逻辑"><a href="#正常执行逻辑" class="headerlink" title="正常执行逻辑"></a>正常执行逻辑</h1><p>当缓存特性<strong>未开启</strong>，或者缓存<strong>未命中</strong>时，使用 <code>applyHystrixSemantics</code> 传入 <code>Observable#defer(...)</code> 方法，声明<strong>执行命令</strong>的 Observable</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Func0<span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span> applyHystrixSemantics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// commandState 处于 UNSUBSCRIBED 时，不执行命令</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>commandState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>CommandState<span class="token punctuation">.</span>UNSUBSCRIBED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获得 执行Observable</span>        <span class="token keyword">return</span> <span class="token function">applyHystrixSemantics</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="applyHystrixSemantics"><a href="#applyHystrixSemantics" class="headerlink" title="applyHystrixSemantics"></a>applyHystrixSemantics</h1><p><strong><em>\</em>熔断器检查以及尝试信号量隔离检查**</strong></p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">applyHystrixSemantics</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executionHook<span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行前的操作</span>        <span class="token comment" spellcheck="true">/* determine if we're allowed to execute */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">.</span><span class="token function">attemptExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//熔断器检查，是否打开</span>            <span class="token comment" spellcheck="true">//尝试信号量隔离，若是信号量则executionSemaphore是TryableSemaphoreActual类的实例</span>            <span class="token keyword">final</span> TryableSemaphore executionSemaphore <span class="token operator">=</span> <span class="token function">getExecutionSemaphore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//信号量是否的标识</span>            <span class="token keyword">final</span> AtomicBoolean semaphoreHasBeenReleased <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//单个信号量是回调</span>            <span class="token keyword">final</span> Action0 singleSemaphoreRelease <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>semaphoreHasBeenReleased<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        executionSemaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//事情通知回调</span>            <span class="token keyword">final</span> Action1<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> markExceptionThrown <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>EXCEPTION_THROWN<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若是线程隔离，则executionSemaphore是TryableSemaphoreNoOp类的实例</span>            <span class="token comment" spellcheck="true">// 信号量 获得</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>executionSemaphore<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* used to track userThreadExecutionTime */</span>                    <span class="token comment" spellcheck="true">// 标记 executionResult 调用开始时间</span>                    executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setInvocationStartTime</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 获得 执行Observable</span>                    <span class="token keyword">return</span> <span class="token function">executeCommandAndObserve</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//继续向下执行命令</span>                            <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>markExceptionThrown<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行发生异常</span>                            <span class="token punctuation">.</span><span class="token function">doOnTerminate</span><span class="token punctuation">(</span>singleSemaphoreRelease<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行终止的时候释放信号量</span>                            <span class="token punctuation">.</span><span class="token function">doOnUnsubscribe</span><span class="token punctuation">(</span>singleSemaphoreRelease<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取消订阅时执行</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//处理信号量拒绝的失败回退逻辑</span>                <span class="token keyword">return</span> <span class="token function">handleSemaphoreRejectionViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//处理链路熔断的失败回退逻辑</span>            <span class="token keyword">return</span> <span class="token function">handleShortCircuitViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="信号量接口"><a href="#信号量接口" class="headerlink" title="信号量接口"></a>信号量接口</h1><p>TryableSemaphore</p><p><code>com.netflix.hystrix.AbstractCommand.TryableSemaphore</code> ，Hystrix 定义的信号量<strong>接口</strong>。代码如下 ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">TryableSemaphore</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getNumberOfPermitsUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>TryableSemaphore 共有两个子类实现 ：</p><ul><li>TryableSemaphoreNoOp</li><li>TryableSemaphoreActual</li></ul><h2 id="TryableSemaphoreNoOp"><a href="#TryableSemaphoreNoOp" class="headerlink" title="TryableSemaphoreNoOp"></a>TryableSemaphoreNoOp</h2><p><strong>无操作</strong>的信号量</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TryableSemaphoreNoOp</span> <span class="token keyword">implements</span> <span class="token class-name">TryableSemaphore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> TryableSemaphore DEFAULT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TryableSemaphoreNoOp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfPermitsUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>#tryAcquire()</code> 方法，每次都返回的是 <code>true</code> ；<code>#release()</code> 方法，无任何操作。</p><p>Thread，该方式不使用信号量，因此使用 TryableSemaphoreNoOp ，这样每次调用 <code>#tryAcquire()</code> 都能返回 <code>true</code> 。</p><h2 id="TryableSemaphoreActual"><a href="#TryableSemaphoreActual" class="headerlink" title="TryableSemaphoreActual"></a>TryableSemaphoreActual</h2><p><strong>真正的</strong>的信号量实现，不过实际上使用的是计算器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TryableSemaphoreActual</span> <span class="token keyword">implements</span> <span class="token class-name">TryableSemaphore</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> HystrixProperty<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numberOfPermits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TryableSemaphoreActual</span><span class="token punctuation">(</span>HystrixProperty<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numberOfPermits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfPermits <span class="token operator">=</span> numberOfPermits<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> currentCount <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">></span> numberOfPermits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfPermitsUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>numberOfPermits</code> 属性，信号量<strong>上限</strong>。是一个接口，可以实现动态调整信号量的<strong>上限</strong>，这就是为什么不使用Semaphore</p><h1 id="获取信号量"><a href="#获取信号量" class="headerlink" title="获取信号量"></a>获取信号量</h1><p>获取信号量对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TryableSemaphore<span class="token operator">></span> executionSemaphorePerCircuit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TryableSemaphore<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span> TryableSemaphore <span class="token function">getExecutionSemaphore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">executionIsolationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ExecutionIsolationStrategy<span class="token punctuation">.</span>SEMAPHORE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>executionSemaphoreOverride <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TryableSemaphore _s <span class="token operator">=</span> executionSemaphorePerCircuit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不存在时，创建 TryableSemaphoreActual</span>                <span class="token comment" spellcheck="true">// we didn't find one cache so setup</span>               executionSemaphorePerCircuit<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TryableSemaphoreActual</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">executionIsolationSemaphoreMaxConcurrentRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// assign whatever got set (this or another thread)</span>                <span class="token keyword">return</span> executionSemaphorePerCircuit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> _s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> executionSemaphoreOverride<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// return NoOp implementation since we're not using SEMAPHORE isolation</span>        <span class="token keyword">return</span> TryableSemaphoreNoOp<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据<strong>执行隔离策略</strong>不同获取不同的信号量实现 ：</p><ul><li><code>Thread</code> ，该方式不使用信号量，因此使用 TryableSemaphoreNoOp 。</li><li>Semaphore，该方式使用信号量，因此使用 TryableSemaphoreActual 。<ul><li>相同的 <code>commandKey</code> ，使用相同的 TryableSemaphoreActual 。</li></ul></li></ul><h1 id="获取执行命令的数据源"><a href="#获取执行命令的数据源" class="headerlink" title="获取执行命令的数据源"></a>获取执行命令的数据源</h1><p>执行命令 Observable。</p><p>调用命令方法执行，并对执行的各种事件进行响应。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">executeCommandAndObserve</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> HystrixRequestContext currentRequestContext <span class="token operator">=</span> HystrixRequestContext<span class="token punctuation">.</span><span class="token function">getContextForCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对执行的各种事件进行响应</span>    <span class="token keyword">final</span> Action1<span class="token operator">&lt;</span>R<span class="token operator">></span> markEmits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>R r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//发送emit事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldOutputOnNextEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>EMIT<span class="token punctuation">)</span><span class="token punctuation">;</span>                eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>EMIT<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//发送SUCCESS事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">commandIsScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> latency <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> executionResult<span class="token punctuation">.</span><span class="token function">getStartTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                eventNotifier<span class="token punctuation">.</span><span class="token function">markCommandExecution</span><span class="token punctuation">(</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">executionIsolationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> latency<span class="token punctuation">,</span> executionResult<span class="token punctuation">.</span><span class="token function">getOrderedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> latency<span class="token punctuation">,</span> HystrixEventType<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                circuitBreaker<span class="token punctuation">.</span><span class="token function">markSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//　　　命令完成时</span>    <span class="token keyword">final</span> Action0 markOnCompleted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">commandIsScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> latency <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> executionResult<span class="token punctuation">.</span><span class="token function">getStartTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                eventNotifier<span class="token punctuation">.</span><span class="token function">markCommandExecution</span><span class="token punctuation">(</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">executionIsolationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> latency<span class="token punctuation">,</span> executionResult<span class="token punctuation">.</span><span class="token function">getOrderedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> latency<span class="token punctuation">,</span> HystrixEventType<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                circuitBreaker<span class="token punctuation">.</span><span class="token function">markSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//　　命令出现异常时</span>    <span class="token keyword">final</span> Func1<span class="token operator">&lt;</span>Throwable<span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span> handleFallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Throwable<span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Exception e <span class="token operator">=</span> <span class="token function">getExceptionFromThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutionException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">handleThreadPoolRejectionViaFallback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">HystrixTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">handleTimeoutViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">HystrixBadRequestException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">handleBadRequestByEmittingError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * Treat HystrixBadRequestException from ExecutionHook like a plain HystrixBadRequestException.                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">HystrixBadRequestException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token function">handleFailureViaFallback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//【请求缓存】</span>    <span class="token keyword">final</span> Action1<span class="token operator">&lt;</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token operator">>></span> setRequestContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token operator">></span> rNotification<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setRequestContextIfNeeded</span><span class="token punctuation">(</span>currentRequestContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得执行命令的Observable</span>    Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> execution<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">executionTimeoutEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        execution <span class="token operator">=</span> <span class="token function">executeCommandWithSpecifiedIsolation</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HystrixObservableTimeoutOperator</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        execution <span class="token operator">=</span> <span class="token function">executeCommandWithSpecifiedIsolation</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//数据源的回调函数</span>    <span class="token keyword">return</span> execution<span class="token punctuation">.</span><span class="token function">doOnNext</span><span class="token punctuation">(</span>markEmits<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doOnCompleted</span><span class="token punctuation">(</span>markOnCompleted<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">onErrorResumeNext</span><span class="token punctuation">(</span>handleFallback<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doOnEach</span><span class="token punctuation">(</span>setRequestContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="executeCommandWithSpecifiedIsolation"><a href="#executeCommandWithSpecifiedIsolation" class="headerlink" title="executeCommandWithSpecifiedIsolation"></a>executeCommandWithSpecifiedIsolation</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">executeCommandWithSpecifiedIsolation</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">executionIsolationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ExecutionIsolationStrategy<span class="token punctuation">.</span>THREAD<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用线程池执行</span>            <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutionOccurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commandState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>CommandState<span class="token punctuation">.</span>OBSERVABLE_CHAIN_CREATED<span class="token punctuation">,</span> CommandState<span class="token punctuation">.</span>USER_CODE_EXECUTED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"execution attempted while in state : "</span> <span class="token operator">+</span> commandState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    metrics<span class="token punctuation">.</span><span class="token function">markCommandStart</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">,</span> threadPoolKey<span class="token punctuation">,</span> ExecutionIsolationStrategy<span class="token punctuation">.</span>THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用命令开始执行metrics</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCommandTimedOut<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TimedOutStatus<span class="token punctuation">.</span>TIMED_OUT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// the command timed out in the wrapping thread so we will return immediately</span>                        <span class="token comment" spellcheck="true">// and not increment any of the counters below or other such logic</span>                        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"timed out before executing run()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>ThreadState<span class="token punctuation">.</span>NOT_USING_THREAD<span class="token punctuation">,</span> ThreadState<span class="token punctuation">.</span>STARTED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//修改threadState状态</span>                        <span class="token comment" spellcheck="true">//we have not been unsubscribed, so should proceed</span>                        HystrixCounters<span class="token punctuation">.</span><span class="token function">incrementGlobalConcurrentThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        threadPool<span class="token punctuation">.</span><span class="token function">markThreadExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用线程池开始方法metrics</span>                        <span class="token comment" spellcheck="true">// store the command that is being run</span>                        endCurrentThreadExecutingCommand <span class="token operator">=</span> Hystrix<span class="token punctuation">.</span><span class="token function">startCurrentThreadExecutingCommand</span><span class="token punctuation">(</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutedInThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置在线程池中执行</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            executionHook<span class="token punctuation">.</span><span class="token function">onThreadStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用hook的onThread</span>                            executionHook<span class="token punctuation">.</span><span class="token function">onRunStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用hook的onRunStart</span>                            executionHook<span class="token punctuation">.</span><span class="token function">onExecutionStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用hook的onExecutionStart</span>                            <span class="token keyword">return</span> <span class="token function">getUserExecutionObservable</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//command has already been unsubscribed, so return immediately</span>                        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnTerminate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>ThreadState<span class="token punctuation">.</span>STARTED<span class="token punctuation">,</span> ThreadState<span class="token punctuation">.</span>TERMINAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">handleThreadEnd</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>ThreadState<span class="token punctuation">.</span>NOT_USING_THREAD<span class="token punctuation">,</span> ThreadState<span class="token punctuation">.</span>TERMINAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//if it was never started and received terminal, then no need to clean up (I don't think this is possible)</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//if it was unsubscribed, then other cleanup handled it</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnUnsubscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>ThreadState<span class="token punctuation">.</span>STARTED<span class="token punctuation">,</span> ThreadState<span class="token punctuation">.</span>UNSUBSCRIBED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">handleThreadEnd</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>ThreadState<span class="token punctuation">.</span>NOT_USING_THREAD<span class="token punctuation">,</span> ThreadState<span class="token punctuation">.</span>UNSUBSCRIBED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//if it was never started and was cancelled, then no need to clean up</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//if it was terminal, then other cleanup handled it</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>threadPool<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用线程池执行</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">executionIsolationThreadInterruptOnTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> _cmd<span class="token punctuation">.</span>isCommandTimedOut<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TimedOutStatus<span class="token punctuation">.</span>TIMED_OUT<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutionOccurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commandState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>CommandState<span class="token punctuation">.</span>OBSERVABLE_CHAIN_CREATED<span class="token punctuation">,</span> CommandState<span class="token punctuation">.</span>USER_CODE_EXECUTED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"execution attempted while in state : "</span> <span class="token operator">+</span> commandState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    metrics<span class="token punctuation">.</span><span class="token function">markCommandStart</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">,</span> threadPoolKey<span class="token punctuation">,</span> ExecutionIsolationStrategy<span class="token punctuation">.</span>SEMAPHORE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用命令开始执行metrics</span>                    <span class="token comment" spellcheck="true">// semaphore isolated</span>                    <span class="token comment" spellcheck="true">// store the command that is being run</span>                    endCurrentThreadExecutingCommand <span class="token operator">=</span> Hystrix<span class="token punctuation">.</span><span class="token function">startCurrentThreadExecutingCommand</span><span class="token punctuation">(</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        executionHook<span class="token punctuation">.</span><span class="token function">onRunStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用hook的onRunStart</span>                        executionHook<span class="token punctuation">.</span><span class="token function">onExecutionStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用hook的onExecutionStart</span>                        <span class="token keyword">return</span> <span class="token function">getUserExecutionObservable</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//the getUserExecutionObservable method already wraps sync exceptions, so this shouldn't throw</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//If the above hooks throw, then use that as the result of the run method</span>                        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="getUserExecutionObservable"><a href="#getUserExecutionObservable" class="headerlink" title="getUserExecutionObservable"></a>getUserExecutionObservable</h1><p>调用 <code>#getUserExecutionObservable(...)</code> 方法，创建【执行命令 Observable】,实际是调用run()方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">getUserExecutionObservable</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> userObservable<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        userObservable <span class="token operator">=</span> <span class="token function">getExecutionObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// the run() method is a user provided implementation so can throw instead of using Observable.onError</span>        <span class="token comment" spellcheck="true">// so we catch it here and turn it into Observable.error</span>        userObservable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> userObservable            <span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExecutionHookApplication</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeprecatedOnRunHookApplication</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>HystrixCommand 实现了该方法实现了getExecutionObservable方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">protected</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">getExecutionObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//调用 #run() 方法，运行正常执逻辑</span>                <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnSubscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Save thread on which we get subscribed so that we can interrupt it later if needed</span>            executionThread<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="线程池的初始化"><a href="#线程池的初始化" class="headerlink" title="线程池的初始化"></a>线程池的初始化</h1><p>com.netflix.hystrix.AbstractCommand#initThreadPool</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> HystrixThreadPool <span class="token function">initThreadPool</span><span class="token punctuation">(</span>HystrixThreadPool fromConstructor<span class="token punctuation">,</span> HystrixThreadPoolKey threadPoolKey<span class="token punctuation">,</span> HystrixThreadPoolProperties<span class="token punctuation">.</span>Setter threadPoolPropertiesDefaults<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fromConstructor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// get the default implementation of HystrixThreadPool</span>        <span class="token keyword">return</span> HystrixThreadPool<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>threadPoolKey<span class="token punctuation">,</span> threadPoolPropertiesDefaults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fromConstructor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果fromConstructor为空则，重新生成线程池。使用了工厂方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> HystrixThreadPool <span class="token function">getInstance</span><span class="token punctuation">(</span>HystrixThreadPoolKey threadPoolKey<span class="token punctuation">,</span> HystrixThreadPoolProperties<span class="token punctuation">.</span>Setter propertiesBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// get the key to use instead of using the object itself so that if people forget to implement equals/hashcode things will still work</span>    String key <span class="token operator">=</span> threadPoolKey<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// this should find it for all but the first time</span>    <span class="token comment" spellcheck="true">//先去缓存中获取</span>    HystrixThreadPool previouslyCached <span class="token operator">=</span> threadPools<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>previouslyCached <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> previouslyCached<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// if we get here this is the first time so we need to initialize</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>HystrixThreadPool<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPools<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//没有的话重新生成</span>            threadPools<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HystrixThreadPoolDefault</span><span class="token punctuation">(</span>threadPoolKey<span class="token punctuation">,</span> propertiesBuilder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> threadPools<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据key去缓存中获取，获取不到的话生成默认的线程池</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">HystrixThreadPoolDefault</span><span class="token punctuation">(</span>HystrixThreadPoolKey threadPoolKey<span class="token punctuation">,</span> HystrixThreadPoolProperties<span class="token punctuation">.</span>Setter propertiesDefaults<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> HystrixPropertiesFactory<span class="token punctuation">.</span><span class="token function">getThreadPoolProperties</span><span class="token punctuation">(</span>threadPoolKey<span class="token punctuation">,</span> propertiesDefaults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//并发策略</span>    HystrixConcurrencyStrategy concurrencyStrategy <span class="token operator">=</span> HystrixPlugins<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConcurrencyStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queueSize <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">maxQueueSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//线程池的实际实例化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>metrics <span class="token operator">=</span> HystrixThreadPoolMetrics<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>threadPoolKey<span class="token punctuation">,</span>            concurrencyStrategy<span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span>threadPoolKey<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">,</span>            properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>threadPool <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metrics<span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadPool<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* strategy: HystrixMetricsPublisherThreadPool */</span>    HystrixMetricsPublisherFactory<span class="token punctuation">.</span><span class="token function">createOrRetrievePublisherForThreadPool</span><span class="token punctuation">(</span>threadPoolKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metrics<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>线程池的实例化实际上是通过并发策略来获取的。</p><p><code>com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy#getThreadPool(com.netflix.hystrix.HystrixThreadPoolKey, com.netflix.hystrix.HystrixThreadPoolProperties)</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ThreadPoolExecutor <span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token keyword">final</span> HystrixThreadPoolKey threadPoolKey<span class="token punctuation">,</span> HystrixThreadPoolProperties threadPoolProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ThreadFactory threadFactory <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span>threadPoolKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> allowMaximumSizeToDivergeFromCoreSize <span class="token operator">=</span> threadPoolProperties<span class="token punctuation">.</span><span class="token function">getAllowMaximumSizeToDivergeFromCoreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> dynamicCoreSize <span class="token operator">=</span> threadPoolProperties<span class="token punctuation">.</span><span class="token function">coreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> keepAliveTime <span class="token operator">=</span> threadPoolProperties<span class="token punctuation">.</span><span class="token function">keepAliveTimeMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> maxQueueSize <span class="token operator">=</span> threadPoolProperties<span class="token punctuation">.</span><span class="token function">maxQueueSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用的是阻塞队列</span>    <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue <span class="token operator">=</span> <span class="token function">getBlockingQueue</span><span class="token punctuation">(</span>maxQueueSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//maximumSize是否允许</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allowMaximumSizeToDivergeFromCoreSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> dynamicMaximumSize <span class="token operator">=</span> threadPoolProperties<span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicCoreSize <span class="token operator">></span> dynamicMaximumSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Hystrix ThreadPool configuration at startup for : "</span> <span class="token operator">+</span> threadPoolKey<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is trying to set coreSize = "</span> <span class="token operator">+</span>                    dynamicCoreSize <span class="token operator">+</span> <span class="token string">" and maximumSize = "</span> <span class="token operator">+</span> dynamicMaximumSize <span class="token operator">+</span> <span class="token string">".  Maximum size will be set to "</span> <span class="token operator">+</span>                    dynamicCoreSize <span class="token operator">+</span> <span class="token string">", the coreSize value, since it must be equal to or greater than the coreSize value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>dynamicCoreSize<span class="token punctuation">,</span> dynamicCoreSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>dynamicCoreSize<span class="token punctuation">,</span> dynamicMaximumSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>dynamicCoreSize<span class="token punctuation">,</span> dynamicCoreSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/6、执行缓存</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/6-zhi-xing-huan-cun/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/6-zhi-xing-huan-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="执行命令的结果缓存"><a href="#执行命令的结果缓存" class="headerlink" title="执行命令的结果缓存"></a><strong>执行命令的结果缓存</strong></h1><p>在 <code>#toObservable()</code> 方法里，如果请求结果缓存这个特性被<strong>启用</strong>，并且<strong>缓存命中</strong>，则缓存的回应会立即通过一个 Observable 对象的形式返回；如果<strong>缓存未命中</strong>，则返回【<strong>订阅了执行命令的 Observable</strong>】的 ReplySubject 对象缓存执行结果。</p><h1 id="AbstractCommand-toObservavle-…"><a href="#AbstractCommand-toObservavle-…" class="headerlink" title="AbstractCommand#toObservavle(…)"></a>AbstractCommand#toObservavle(…)</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//doOnCompleted handler already did all of the SUCCESS work</span>    <span class="token comment" spellcheck="true">//doOnError handler already did all of the FAILURE/TIMEOUT/REJECTION/BAD_REQUEST work</span>     <span class="token keyword">final</span> Action0 terminateCommandCleanup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ... 省略</span>    <span class="token comment" spellcheck="true">//mark the command as CANCELLED and store the latency (in addition to standard cleanup)</span>  <span class="token keyword">final</span> Action0 unsubscribeCommandCleanup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ... 省略</span>    <span class="token keyword">final</span> Func0<span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span> applyHystrixSemantics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>commandState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>CommandState<span class="token punctuation">.</span>UNSUBSCRIBED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">applyHystrixSemantics</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">final</span> Func1<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> R<span class="token operator">></span> wrapWithAllOnNextHooks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>R<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ... 省略 </span><span class="token keyword">final</span> Action0 fireOnCompletedHook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ... 省略</span>    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">/* this is a stateful object so can only be used once */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commandState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>CommandState<span class="token punctuation">.</span>NOT_STARTED<span class="token punctuation">,</span> CommandState<span class="token punctuation">.</span>OBSERVABLE_CHAIN_CREATED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                IllegalStateException ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"This instance can only be executed once. Please instantiate a new instance."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//TODO make a new error type for this</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HystrixRuntimeException</span><span class="token punctuation">(</span>FailureType<span class="token punctuation">.</span>BAD_REQUEST_EXCEPTION<span class="token punctuation">,</span> _cmd<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getLogMessagePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" command executed multiple times - this is not permitted."</span><span class="token punctuation">,</span> ex<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//命令开始时间</span>            commandStartTimestamp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打印日志</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">requestLogEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRequestLog <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentRequestLog<span class="token punctuation">.</span><span class="token function">addExecutedCommand</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> requestCacheEnabled <span class="token operator">=</span> <span class="token function">isRequestCachingEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 缓存开关、缓存KEY</span>            <span class="token keyword">final</span> String cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 优先从缓存中获取</span>            <span class="token comment" spellcheck="true">/* try from cache first */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//第一次的时候cache是打开的但是值是空的</span>                HystrixCommandResponseFromCache<span class="token operator">&lt;</span>R<span class="token operator">></span> fromCache <span class="token operator">=</span> <span class="token punctuation">(</span>HystrixCommandResponseFromCache<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">)</span> requestCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fromCache <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isResponseFromCache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 从缓存中结果</span>                    <span class="token keyword">return</span> <span class="token function">handleRequestCacheHitAndEmitValues</span><span class="token punctuation">(</span>fromCache<span class="token punctuation">,</span> _cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 获得 执行命令Observable</span>            Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> hystrixObservable <span class="token operator">=</span>                    Observable<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span>applyHystrixSemantics<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>wrapWithAllOnNextHooks<span class="token punctuation">)</span><span class="token punctuation">;</span>            Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> afterCache<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 缓存是开启的，将数据源发射器放入缓存</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCacheEnabled <span class="token operator">&amp;&amp;</span> cacheKey <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// wrap it for caching</span>                HystrixCachedObservable<span class="token operator">&lt;</span>R<span class="token operator">></span> toCache <span class="token operator">=</span> HystrixCachedObservable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>hystrixObservable<span class="token punctuation">,</span> _cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                HystrixCommandResponseFromCache<span class="token operator">&lt;</span>R<span class="token operator">></span> fromCache <span class="token operator">=</span> <span class="token punctuation">(</span>HystrixCommandResponseFromCache<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">)</span> requestCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> toCache<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fromCache <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// another thread beat us so we'll use the cached value instead</span>                    toCache<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    isResponseFromCache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">handleRequestCacheHitAndEmitValues</span><span class="token punctuation">(</span>fromCache<span class="token punctuation">,</span> _cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 添加失败</span>                    <span class="token comment" spellcheck="true">// we just created an ObservableCommand so we cast and return it</span>                    afterCache <span class="token operator">=</span> toCache<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                afterCache <span class="token operator">=</span> hystrixObservable<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> afterCache                    <span class="token punctuation">.</span><span class="token function">doOnTerminate</span><span class="token punctuation">(</span>terminateCommandCleanup<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// perform cleanup once (either on normal terminal state (this line), or unsubscribe (next line))</span>                    <span class="token punctuation">.</span><span class="token function">doOnUnsubscribe</span><span class="token punctuation">(</span>unsubscribeCommandCleanup<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// perform cleanup once</span>                    <span class="token punctuation">.</span><span class="token function">doOnCompleted</span><span class="token punctuation">(</span>fireOnCompletedHook<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当缓存特性<strong>未开启</strong>，或者缓存<strong>未命中</strong>时，使用 <code>applyHystrixSemantics</code> 传入 <code>Observable#defer(...)</code> 方法，声明<strong>执行命令</strong>的 Observable</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/5、Hystrix的执行命令方式</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/5-hystrix-de-zhi-xing-ming-ling-fang-shi/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/5-hystrix-de-zhi-xing-ming-ling-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>Hystrix中的观察者模式实现使用的RxJava实现的</p><h1 id="RxJava的简介"><a href="#RxJava的简介" class="headerlink" title="RxJava的简介"></a>RxJava的简介</h1><p><strong>Observable</strong>：在观察者模式中称为“被观察者”或“可观察对象”；</p><p><strong>Observer</strong>：就是观察者模式中的“观察者”，可接收Observable、Subject发射的数据；</p><p><strong>Subject</strong>：Subject是一个比较特殊的对象，既可充当发射源，也可充当接收源</p><p><strong>Subscriber</strong>：“订阅者”，也是接收源，Subscriber实现了Observer接口，比Observer多了一个最重要的方法<code>unsubscribe( )</code>，用来取消订阅，当你不再想接收数据了，可以调用<code>unsubscribe( )</code>方法停止接收。</p><p><strong>Action0</strong>：RxJava中的一个接口，它只有一个无参call（）方法，且无返回值，同样还有Action1，Action2…Action9等，Action1封装了含有<em> 1 </em>个参的call（）方法，即call（T t），Action2封装了含有<em> 2 </em>个参数的call方法，即call（T1 t1，T2 t2），以此类推；</p><p><strong>Func0</strong>：与Action0非常相似，也有call（）方法，但是它是有返回值的，同样也有Func0、Func1…Func9;</p><h2 id="Observable的创建"><a href="#Observable的创建" class="headerlink" title="Observable的创建"></a><strong>Observable的创建</strong></h2><p>使用from( )，遍历集合，发送每个item</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"from1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"from2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"from3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable fromObservable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//遍历list 每次发送一个</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span> 注意，<span class="token function">just</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法也可以传list，但是发送的是整个list对象，而from（）发送的是list的一个item<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">/</span></code></pre><p>使用defer( )，有观察者订阅时才创建Observable，并且为每个观察者创建一个新的Observable：</p><pre class=" language-java"><code class="language-java">deferObservable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//注意此处的call方法没有Subscriber参数</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"deferObservable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Observer的创建"><a href="#Observer的创建" class="headerlink" title="Observer的创建"></a><strong>Observer的创建</strong></h2><pre class=" language-java"><code class="language-java">mObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onCompleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>有了Observable和Obsever，任取一个已创建的Observable和Observer关联上，即形成一个RxJava的例子</p><pre class=" language-java"><code class="language-java">justObservable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>mObserver<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>mObserver的<code>onNext</code>方法将会依次收到来自justObservable的数据<code>&quot;just1&quot;</code>、<code>&quot;just2&quot;</code>，另外，如果你不在意数据是否接收完或者是否出现错误，即不需要Observer的<code>onCompleted()</code>和<code>onError()</code>方法，可使用<code>Action1</code>，<code>subscribe()</code>支持将<code>Action1</code>作为参数传入,RxJava将会调用它的<code>call</code>方法来接收数据，</p><pre class=" language-java"><code class="language-java">justObservable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2><p><strong>AsyncSubject</strong><br>Observer会接收AsyncSubject的<code>onComplete()</code>之前的最后一个数据，如果因异常而终止，AsyncSubject将不会释放任何数据，但是会向Observer传递一个异常通知。</p><pre class=" language-java"><code class="language-java">        AsyncSubject<span class="token operator">&lt;</span>String<span class="token operator">></span> asyncSubject <span class="token operator">=</span> AsyncSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"asyncSubject1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"asyncSubject2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"asyncSubject3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          asyncSubject<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncSubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"asyncSubject onCompleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出 asyncSubject onCompleted</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"asyncSubject onError"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//不输出（异常才会输出）</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"asyncSubject:"</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出asyncSubject:asyncSubject3</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>BehaviorSubject</strong><br>Observer会接收到BehaviorSubject被订阅之前的最后一个数据，再接收其他发射过来的数据，如果BehaviorSubject被订阅之前没有发送任何数据，则会发送一个默认数据。<em>且之后还会继续接收数据</em></p><pre class=" language-java"><code class="language-java">    BehaviorSubject<span class="token operator">&lt;</span>String<span class="token operator">></span> behaviorSubject <span class="token operator">=</span> BehaviorSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    behaviorSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"behaviorSubject1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    behaviorSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"behaviorSubject2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        behaviorSubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"behaviorSubject:complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"behaviorSubject:error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"behaviorSubject:"</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        behaviorSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"behaviorSubject3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        behaviorSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"behaviorSubject4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>PublishSubject</strong></p><p>PublishSubject比较容易理解，相对比其他Subject常用，它的Observer只会接收到PublishSubject被订阅之后发送的数据。</p><pre class=" language-java"><code class="language-java">PublishSubject<span class="token operator">&lt;</span>String<span class="token operator">></span> publishSubject <span class="token operator">=</span> PublishSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>publishSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"publishSubject1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>publishSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"publishSubject2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>publishSubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>           LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"publishSubject observer1:"</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>publishSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"publishSubject3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>publishSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"publishSubject4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Observer只会接收到”behaviorSubject3”、”behaviorSubject4”</p><p><strong>ReplaySubject</strong></p><p>ReplaySubject会发射所有数据给观察者，无论它们是何时订阅的。</p><pre class=" language-java"><code class="language-java">ReplaySubject<span class="token operator">&lt;</span>String<span class="token operator">></span>replaySubject <span class="token operator">=</span> ReplaySubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建默认初始缓存容量大小为16的ReplaySubject，当数据条目超过16会重新分配内存空间，使用这种方式，不论ReplaySubject何时被订阅，Observer都能接收到数据</span><span class="token comment" spellcheck="true">//replaySubject = ReplaySubject.create(100);//创建指定初始缓存容量大小为100的ReplaySubject</span><span class="token comment" spellcheck="true">//replaySubject = ReplaySubject.createWithSize(2);//只缓存订阅前最后发送的2条数据 </span> <span class="token comment" spellcheck="true">//replaySubject=ReplaySubject.createWithTime(1,TimeUnit.SECONDS,Schedulers.computation());  //replaySubject被订阅前的前1秒内发送的数据才能被接收     </span>replaySubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"replaySubject:pre1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>replaySubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"replaySubject:pre2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>replaySubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"replaySubject:pre3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>replaySubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LogUtil<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"replaySubject:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>replaySubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"replaySubject:after1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>replaySubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"replaySubject:after2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Hystrix-执行命令方法"><a href="#Hystrix-执行命令方法" class="headerlink" title="Hystrix 执行命令方法"></a><strong>Hystrix 执行命令方法</strong></h1><p>Hystrix中共有4种方式执行命令，如下所示：</p><table><thead><tr><th>执行方式</th><th>说明</th><th>可用对象</th></tr></thead><tbody><tr><td><code>execute()</code></td><td><strong>同步</strong>调用，返回<strong>直接</strong>结果</td><td><code>HystrixCommand</code></td></tr><tr><td><code>queue()</code></td><td><strong>异步</strong>调用，返回 <code>java.util.concurrent.Future</code></td><td><code>HystrixCommand</code></td></tr><tr><td><code>observe()</code></td><td><strong>异步</strong>调用，返回 <code>rx.Observable</code> 。向 Observable 注册 <code>rx.Subscriber</code> 处理结果</td><td><code>HystrixObservableCommand</code></td></tr><tr><td><code>toObvsevable</code></td><td><strong>未调用</strong>，返回 <code>rx.Observable</code> 。向 Observable 注册 <code>rx.Subscriber</code> 处理结果</td><td><code>HystrixObservableCommand</code></td></tr></tbody></table><p><img src="assets/2019052400424387.png" alt="HystrixCommand执行方式"></p><p> <strong><em>execute()和queue()</em></strong></p><p>同步执行。</p><p><code>com.netflix.hystrix.HystrixCommand#execute</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> R <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> Exceptions<span class="token punctuation">.</span><span class="token function">sneakyThrow</span><span class="token punctuation">(</span><span class="token function">decomposeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>而在 <code>queue()</code> 方法中，会调用 <code>toObservable().toBlocking().toFuture()</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> Future<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">final</span> Future<span class="token operator">&lt;</span>R<span class="token operator">></span> delegate <span class="token operator">=</span> <span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> Future<span class="token operator">&lt;</span>R<span class="token operator">></span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ... 包装 delegate</span><span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> R <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//实际上是从代理的future中获取的</span>             <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> R <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>             <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span>     <span class="token keyword">return</span> f<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><code>#queue()</code>调用 <code>#toObservable()</code> 方法的基础上，调用：</p><ul><li><code>Observable#toBlocking()</code> 方法 ：将 Observable 转换成<strong>阻塞</strong>的 <code>rx.observables.BlockingObservable</code> 。</li><li><code>BlockingObservable#toFuture()</code> 方法 ：返回可获得 <code>#run()</code> <strong>抽象方法</strong>执行结果的 Future 。<ul><li><code>#run()</code> 方法 ：子类实现该方法，执行<strong>正常的业务逻辑</strong>。</li></ul></li></ul><p><code>#execute()</code> 方法 ：调用 <code>#queue()</code> 方法的基础上，调用 <code>Future#get()</code> 方法，<strong>同步</strong>返回 <code>#run()</code> 的执行结果。</p><p><strong>toObservable和observe</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AbstractCommand.java</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractCommand</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">HystrixInvokableInfo</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">,</span> HystrixObservable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ... 省略无关属性与方法</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>R<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ....</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// us a ReplaySubject to buffer the eagerly subscribed-to Observable</span>        ReplaySubject<span class="token operator">&lt;</span>R<span class="token operator">></span> subject <span class="token operator">=</span> ReplaySubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// eagerly kick off subscription</span>        <span class="token keyword">final</span> Subscription sourceSubscription <span class="token operator">=</span> <span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return the subject that can be subscribed to later while the execution has already started</span>        <span class="token keyword">return</span> subject<span class="token punctuation">.</span><span class="token function">doOnUnsubscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sourceSubscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>#toObservable()</code> 方法 ：<strong>未</strong>做订阅，返回干净的 Observable 。</li><li><code>#observe()</code> 方法 ：调用 <code>#toObservable()</code> 方法的基础上，向 Observable 注册 <code>rx.subjects.ReplaySubject</code> <strong>发起订阅</strong></li></ul><p><img src="assets/02.png" alt="img"></p><p>先通过 <code>toObservable()</code> 获得 <code>Future</code> 对象，然后调用 <code>Future</code> 的 <code>get()</code> 方法。那么，其实无论是哪种方式执行 command，最终都是依赖于 <code>toObservable()</code> 去执行的。</p><h1 id="CommandState"><a href="#CommandState" class="headerlink" title="CommandState"></a>CommandState</h1><p>执行命令的状态</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">enum</span> CommandState <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//未开始</span>    NOT_STARTED<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//刚刚创建</span>    OBSERVABLE_CHAIN_CREATED<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//用户代码执行</span>    USER_CODE_EXECUTED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//取消订阅</span>    UNSUBSCRIBED<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//终止</span>    TERMINAL<span class="token punctuation">}</span></code></pre><p><img src="assets/02.png" alt="img"></p><h1 id="ThreadState"><a href="#ThreadState" class="headerlink" title="ThreadState"></a>ThreadState</h1><p>线程状态</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">enum</span> ThreadState <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//没有使用的线程</span>    NOT_USING_THREAD<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//已启动</span>    STARTED<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//取消订阅</span>    UNSUBSCRIBED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//终止</span>    TERMINAL<span class="token punctuation">}</span></code></pre><p><img src="assets/03.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/4、Hystrix的工作原理</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/4-hystrix-de-gong-zuo-yuan-li/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/4-hystrix-de-gong-zuo-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Hystrix简单示例"><a href="#Hystrix简单示例" class="headerlink" title="Hystrix简单示例"></a><strong>Hystrix简单示例</strong></h1><p>第一步，继承HystrixCommand实现自己的command，在command的构造方法中需要配置请求被执行需要的参数，并组合实际发送请求的对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceFeignHystrix</span> <span class="token keyword">extends</span> <span class="token class-name">HystrixCommand</span><span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserServiceFeignClient02 userServiceFeignClient02<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer userId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserServiceFeignHystrix</span><span class="token punctuation">(</span>UserServiceFeignClient02 userServiceFeignClient02<span class="token punctuation">,</span> Integer userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>Setter<span class="token punctuation">.</span><span class="token function">withGroupKey</span><span class="token punctuation">(</span>HystrixCommandGroupKey<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span><span class="token string">"orderService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandKey</span><span class="token punctuation">(</span>HystrixCommandKey<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span><span class="token string">"queryByOrderId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandPropertiesDefaults</span><span class="token punctuation">(</span>HystrixCommandProperties<span class="token punctuation">.</span><span class="token function">Setter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//至少有10个请求，熔断器才进行错误率的计算</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//熔断器中断请求5秒后会进入半打开状态,放部分流量过去重试</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerSleepWindowInMilliseconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//错误率达到50开启熔断保护</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withFallbackEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionTimeoutInMilliseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//最大并发请求量</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionIsolationStrategy</span><span class="token punctuation">(</span>HystrixCommandProperties<span class="token punctuation">.</span>ExecutionIsolationStrategy<span class="token punctuation">.</span>THREAD<span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userServiceFeignClient02 <span class="token operator">=</span> userServiceFeignClient02<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> UserResponse <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> userServiceFeignClient02<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> UserResponse <span class="token function">getFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserResponse userResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userResponse<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userResponse<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"服务降级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用HystrixCommand的执行方法发起实际请求。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hystrix"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserServiceFeignClient02 userServiceFeignClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserResponse <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserServiceFeignHystrix userServiceFeignHystrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceFeignHystrix</span><span class="token punctuation">(</span>userServiceFeignClient<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userServiceFeignHystrix<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a><strong>流程图</strong></h1><p><img src="assets/20190528094259266.png" alt="在这里插入图片描述"></p><h1 id="构建一个HystrixCommand或者HystrixObservableCommand对象"><a href="#构建一个HystrixCommand或者HystrixObservableCommand对象" class="headerlink" title="构建一个HystrixCommand或者HystrixObservableCommand对象"></a><strong>构建一个<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>对象</strong></h1><p>第一步就是构建一个<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>对象，该对象将代表你的一个依赖请求，向构造函数中传入请求依赖所需要的参数。</p><p>如果构建<code>HystrixCommand</code>中的依赖返回单个响应，例如：</p><pre><code>HystrixCommand command = new HystrixCommand(arg1, arg2);       T execute = command.execute();        Future&lt;T&gt; queue = command.queue();</code></pre><p>如果依赖需要返回一个<code>Observable</code>来发射响应，就需要通过构建<code>HystrixObservableCommand</code>对象来完 成，例如：</p><pre><code>HystrixObservableCommand command = new HystrixObservableCommand(arg1, arg2);        Observable observe = command.observe();        Observable observable = command.toObservable();</code></pre><h1 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a><strong>执行命令</strong></h1><p>　有四种方法来执行命令（前面两种只对HystrixCommand有用，后2种对HystrixObservableCommand有用）。</p><ul><li><code>execute()</code>—该方法是阻塞的，从依赖请求中接收到单个响应（或者出错时抛出异常）。</li><li><code>queue()</code>—从依赖请求中返回一个包含单个响应的Future对象。</li><li><code>observe()</code>—订阅一个从依赖请求中返回的代表响应的Observable对象。</li><li><code>toObservable()</code>—返回一个Observable对象，只有当你订阅它时，它才会执行Hystrix命令并发射响应。</li></ul><pre><code>K             value   = command.execute();Future&lt;K&gt;     fValue  = command.queue();Observable&lt;K&gt; ohValue = command.observe();         Observable&lt;K&gt; ocValue = command.toObservable();    </code></pre><p>同步调用方法<code>execute()</code>实际上就是调用<code>queue().get()</code>方法，<code>queue()</code>方法的调用的是<code>toObservable().toBlocking().toFuture()</code>.也就是说，最终每一个HystrixCommand都是通过Observable来实现的，即使这些命令仅仅是返回一个简单的单个值。</p><h1 id="是否使用缓存"><a href="#是否使用缓存" class="headerlink" title="是否使用缓存"></a><strong>是否使用缓存</strong></h1><p>如果这个命令的请求缓存已经开启，并且本次请求的响应已经存在于缓存中，那么就会立即返回一个包含缓存响应的<code>Observable</code></p><h1 id="回路器是否打开"><a href="#回路器是否打开" class="headerlink" title="回路器是否打开"></a><strong>回路器是否打开</strong></h1><p>当命令执行执行时，Hystrix会检查回路器是否被打开。</p><p>如果回路器被打开（或者tripped），那么Hystrix就不会再执行命名，而是直接执行降级，获取fallback方法，并执行fallback逻辑。</p><p>如果回路器关闭，那么将进入下一步，检查是否有足够的容量来执行任务。（其中容量包括线程池的容量，队列的容量等等）。</p><h1 id="线程池、信号量是否已满"><a href="#线程池、信号量是否已满" class="headerlink" title="线程池、信号量是否已满"></a><strong>线程池、信号量是否已满</strong></h1><p>如果与该命令相关的线程池或者队列已经满了，那么Hystrix就不会再执行命令，而是立即直接进行降级,执行fallback逻辑。</p><h1 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h1><p><strong>HystrixObservableCommand.construct() 或者 HystrixCommand.run()</strong></p><p>Hystrix通过2者之一来调用请求。</p><ul><li><code>HystrixCommand.run()</code>—返回单个响应或者抛出异常。</li><li><code>HystrixObservableCommand.construct()</code>—返回一个发射响应的Observable或者发送一个<code>onError()</code>的通知。</li></ul><p>如果执行<code>run()</code>方法或者<code>construct()</code>方法的执行时间大于命令所设置的超时时间值，那么该线程将会抛出一个<code>TimeoutException</code>异常。在这种情况下，Hystrix将会执行fallback逻辑，如果<code>run()</code>或者<code>construct()</code>方法没有被取消或者中断，会丢弃这两个方法最终返回的结果。</p><p>hystrix没有办法强制停止线程执行，hysrix能做的最好方式是抛出InterruptedException。如果hystrix执行的方法没有相应InterruptedException，那么它会继续执行，但是用户的已经收到TimeoutException异常。大多是的http client不回响应InterruptedException，确保正确配置了链接的timeout时间。</p><h1 id="熔断器计算"><a href="#熔断器计算" class="headerlink" title="熔断器计算"></a><strong>熔断器计算</strong></h1><p>　　hystrix在成功、失败、拒绝、timeout时会上报到熔断器模块，熔断器会计算当前的熔断状态。熔断器使用一个状态来表示当前是否被熔断，一旦熔断所有的请求将不回执行命令直到熔断恢复。</p><h1 id="执行fallback"><a href="#执行fallback" class="headerlink" title="执行fallback"></a><strong>执行fallback</strong></h1><ul><li>当命令执行失败时，hystrix会执行fallback：</li><li>当run或construct方法抛出异常；</li><li>当熔断器被熔断</li><li>当线程池／队列／信号量使用完；</li><li>当timeout。</li></ul><p>通过fallback可以优雅降级，通过静态逻辑返回一个结果。</p><h1 id="返回成功结果"><a href="#返回成功结果" class="headerlink" title="返回成功结果"></a><strong>返回成功结果</strong></h1><p>Hystrix命令执行成功，它将以Observable形式返回响应给调用者。根据调用方式不同，在返回Observablez之前可能会做一些转换。</p><p><img src="assets/bV0mgF" alt="图片描述"></p><ul><li><code>execute()</code>：通过调用<code>queue()</code>来得到一个Future对象，然后调用<code>get()</code>方法来获取Future中包含的值。</li><li><code>queue()</code>：将Observable转换成<code>BlockingObservable</code>，在将<code>BlockingObservable</code>转换成一个Future。</li><li><code>observe()</code>：订阅返回的Observable，并且立即开始执行命令的逻辑，</li><li><code>toObservable()</code>：返回一个没有改变的Observable，你必须订阅它，它才能够开始执行命令的逻辑。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/3、Hystrix的基本功能</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/3-hystrix-de-ji-ben-gong-neng/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/3-hystrix-de-ji-ben-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h1><p>在微服务的架构体系中，我们会将系统拆分成多个服务小单元，通过 HTTP 或者 RPC 进行<strong>远程调用</strong>。如下图所示</p><p><img src="assets/01.png" alt="服务雪崩 - 正常"></p><p>但是某一时刻，服务提供者执行逻辑<strong>较慢</strong>，又或者网络出现<strong>抖动</strong>的情况，导致服务消费调用服务提供者<strong>超时</strong>或者<strong>失败</strong>。</p><p>服务提供者E出现了调用失败。</p><p><img src="assets/02.png" alt="服务雪崩 - 调用失败"></p><p>如果这个情况<strong>持续一段</strong>时间，服务提供者的响应一直<strong>很慢</strong>，导致服务消费者的响应也跟着<strong>很慢</strong>，最终引起服务消费者的请求任务<strong>积压</strong>，整条链路都响应很慢，在加上有不断进来的请求。因为 Tomcat 的线程池是有限的，如果个别请求处理很慢，会逐步占用到整个线程池，导致后续其它请求无法被处理。</p><p><img src="assets/03.png" alt="服务雪崩 - 服务雪崩"></p><h1 id="服务容错"><a href="#服务容错" class="headerlink" title="服务容错"></a>服务容错</h1><p>针对“服务雪崩”的情况，我们需要进行“<strong>服务容错</strong>”处理。一般常用的手段有，主要是<strong>限流</strong>和<strong>开关</strong>。</p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a><strong>限流</strong></h2><p>通过<strong>限制</strong>调用服务的<strong>频率</strong>，避免<strong>频繁</strong>调用故障服务，导致请求任务积压而自身雪崩。多用于服务响应比较慢导致的</p><h2 id="开关"><a href="#开关" class="headerlink" title="开关"></a><strong>开关</strong></h2><p>通过<strong>关闭</strong>对故障服务的调用，<strong>停止</strong>调用故障服务，从而避免服务雪崩。当然，关闭的前提是，不调用故障服务的情况下，业务逻辑依然可以走下去，或者业务数据的完整性不会被破坏。</p><p>一般来说，开关会分成<strong>手动</strong>开关和<strong>自动</strong>开关。手动开关比较好了解，自动开关是满足指定条件自动进行关闭。<strong>自动</strong>开关比较经典的就是“<strong>断路器模式</strong></p><blockquote><p>当某个服务<strong>提供者</strong>发生故障（相当于电器发生短路的情况）时，断路器一旦监控到这个情况，会将<strong>开关</strong>进行<strong>自动</strong>关闭。之后，在服务<strong>消费者</strong>调用该故障服务<strong>提供者</strong>时，直接抛出错误异常，<strong>不进行调用</strong>，从而避免调用服务的漫长等待。</p></blockquote><h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><p>Hystrix 供分布式系统使用，提供延迟和容错功能，隔离远程系统、访问和第三方程序库的访问点，防止级联失败，保证复杂的分布系统在面临不可避免的失败时，仍能有其弹性。</p><p><img src="assets/6a9cbdc630e2c9e75b98216bdd6b526f.jpg" alt="Hystrix 图标"></p><p>Netflix 称，在分布式环境中，不可避免会造成一些服务的失败。Hystrix 库旨在控制分布式服务中提供更大容限和服务失败之间的相互关系。Hystrix 通过隔离访问远程系统、服务和第三方库的点，阻止级联故障，从而使复杂的分布式系统更具弹性。</p><p>Hystrix 源于 Netflix API 团队在去年启动的弹性工程项目，在此期间，Hystrix 得到了不断发展，并逐渐成熟。现在，在 Netflix 网站中，每天有数十亿的独立线程和信号通过 Hystrix 进行调用，Hystrix 的运行时间和弹性也得到了显著的改善。</p><p>Hystrix 比较重要的是<strong>三个特性</strong>：1）Fallback 服务降级；2）断路器机制；3）资源隔离。</p><h1 id="Fallback-服务降级"><a href="#Fallback-服务降级" class="headerlink" title="Fallback 服务降级"></a>Fallback 服务降级</h1><p>在服务调用失败时，我们可以通过 Hystrix 实现 Fallback 服务降级。</p><p>例如说，对于查询操作，我们给它实现一个 fallback 方法。当请求服务提供者发生异常时，我们可以执行 fallback 方法获得返回结果。示例代码如下：</p><p><img src="assets/image-20201216231411020.png" alt="image-20201216231411020"></p><p>一般情况下，fallback 方法的返回结果使用设置的默认值，又或者来自缓存。</p><h1 id="断路器机制"><a href="#断路器机制" class="headerlink" title="断路器机制"></a>断路器机制</h1><p><img src="assets/01.png" alt="img"></p><p>初始时，断路器处于 <code>CLOSED</code> 状态，链路处于<strong>健康</strong>状态。</p><ul><li>如果请求数达到了设置的请求阈值</li><li>请求失败的比例超过了设置的比例</li></ul><p>则断路器将从close状态转到open状态，这时所有的请求都会被阻止。</p><p>断路器处于 <code>OPEN</code> 状态,</p><ul><li>当前时间超过断路器<strong>开启</strong>时间一定时间( <code>HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds = 5000 ms</code> )，断路器变成 <code>HALF_OPEN</code> 状态</li><li>目的是为了验证一下后边的路是否通畅，如果请求失败，则断路器回到open状态；如果成功了则断路器切换到closed状态并且返回响应的结果。</li></ul><h1 id="资源隔离"><a href="#资源隔离" class="headerlink" title="资源隔离"></a>资源隔离</h1><p>Hystrix 使用了“<strong>舱壁隔离模式</strong>”来隔离和限制各个请求，从而实现资源的隔离。</p><p><img src="assets/078fbadf40d7e1b4496afa5b57b24a7b.jpg" alt="img"></p><h3 id="线程池模式"><a href="#线程池模式" class="headerlink" title="线程池模式"></a><strong>线程池模式</strong></h3><p>默认情况下，Hystrix 采用线程池模式来实现隔离。</p><p>针对调用的每一个服务，我们给其<strong>单独</strong>分配一个线程池。例如说，产品服务的调用分配在 A 线程池，用户服务的调用分配在 B 线程池。这样隔离后，两个服务的调用不会相互影响。</p><h3 id="信号量模式"><a href="#信号量模式" class="headerlink" title="信号量模式"></a><strong>信号量模式</strong></h3><p>使用线程池模式来隔离时，需要进行上下文的切换，带来一定的性能损耗。因此，如果对性能有较高要求，且能够接受信号量模式不支持<strong>超时</strong>的情况，可以考虑采用信号量模式。</p><h1 id="请求缓存"><a href="#请求缓存" class="headerlink" title="请求缓存"></a>请求缓存</h1><p>Hystrix 支持在同一个 HystrixRequestContext 上下文中，提供<strong>缓存</strong>的功能，以提升高并发场景下的<strong>性能</strong>，同时也带来相同<strong>缓存键</strong>返回<strong>相同结果</strong>的特性。</p><p>通过 Hystrix 主要提供了 <code>@CacheResult</code> 和 <code>@CacheRemove</code> 注解，我们可以使用 Hystrix 请求缓存功能。</p><p>① <a href="https://github.com/Netflix/Hystrix/blob/master/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/cache/annotation/CacheResult.java" target="_blank" rel="noopener"><code>@CacheResult</code></a> 注解，添加在方法上，声明将方法的执行结果进行缓存，并后续从缓存中获取结果。</p><ul><li><code>cacheKeyMethod</code> 属性：设置<strong>缓存键</strong>的生成方法。</li></ul><p>另外，我们也可以使用 <a href="https://github.com/Netflix/Hystrix/blob/master/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/cache/annotation/CacheKey.java" target="_blank" rel="noopener"><code>@CacheKey</code></a> 注解，直接设置<strong>缓存键</strong>的字符串，它的优先级比 <code>@CacheResult.cacheKeyMethod</code> 属性高</p><p>② <a href="https://github.com/Netflix/Hystrix/blob/master/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/cache/annotation/CacheRemove.java" target="_blank" rel="noopener"><code>@CacheRemove</code></a> 注解，添加在方法上，声明移除指定 Hystrix Command 生成的缓存。</p><ul><li><code>commandKey</code> 属性：设置 Hystrix Command <strong>键</strong>。</li><li><code>cacheKeyMethod</code> 属性：设置<strong>缓存键</strong>的生成方法。</li></ul><h1 id="请求合并"><a href="#请求合并" class="headerlink" title="请求合并"></a>请求合并</h1><p>Hystrix 支持在同一个 <a href="https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.java" target="_blank" rel="noopener">HystrixRequestContext</a> 上下文中，提供<strong>请求合并</strong>的功能，将一段时间的<strong>相同类型</strong>的请求，<strong>延迟</strong>合并请求服务提供者的<strong>批量</strong> API 接口，以减少请求次数，减少服务压力。</p><p><img src="assets/31.png" alt="用户查询"></p><ul><li>系统在执行的过程中，需要调用用户服务来查询 A、B、C 三个用户的信息。</li><li>Hystrix 请求合并会自动将查询 A、B、C 三个用户的请求，通过<strong>后台延迟</strong>收集的方式，一次性请求用户服务的 <code>/user/gets?ids={ids}</code> 接口。</li></ul><p>通过 <a href="https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/HystrixCollapser.java" target="_blank" rel="noopener"><code>@HystrixCollapser</code></a> 注解进行声明：</p><ul><li><code>collapserKey</code> 属性：Hystrix 合并请求<strong>键</strong>，默认为方法名。</li><li><code>batchMethod</code> 属性：合并请求时，执行的<strong>方法名</strong>。Hystrix 的合并请求，并不能<strong>智能</strong>的知道调用的批量接口，所以需要<strong>手动</strong>编写调用方法。</li><li><code>scope</code> 属性：合并请求的<strong>范围</strong>，目前有 <code>REQUEST</code> 请求和 <code>GLOBAL</code> 全局两个级别。</li><li><code>collapserProperties</code> 属性：Hystrix 合并请求的<strong>拓展变量</strong>。一般我们可以通过 <code>&quot;timerDelayInMilliseconds&quot;</code> 变量，来设置延迟的时长。</li></ul><blockquote><p><code>batchMethod</code> 对应的批量操作的方法的方法参数只能一个，并且类型规定为 <strong>List 类型</strong>。返回的结果也要是 <strong>List 类型</strong>，并且结果是和参数的<strong>顺序</strong>映射的噢。</p></blockquote><h1 id="Dashboard-监控"><a href="#Dashboard-监控" class="headerlink" title="Dashboard 监控"></a>Dashboard 监控</h1><p>Spring Cloud Netflix 提供了 <a href="https://github.com/spring-cloud/spring-cloud-netflix/tree/2.2.x/spring-cloud-netflix-hystrix-dashboard" target="_blank" rel="noopener"><code>spring-cloud-netflix-hystrix-dashboard</code></a> 组件，提供 Hystrix Dashboard <strong>运维界面</strong>的功能，便于我们监控 Hystrix 的运行情况。</p><p><img src="assets/48.png" alt="Hystrix Dashboard"></p><h1 id="Turbine-聚合监控"><a href="#Turbine-聚合监控" class="headerlink" title="Turbine 聚合监控"></a>Turbine 聚合监控</h1><p>一个服务我们会部署<strong>多个</strong>实例，如果直接使用 Hystrix Dashboard 搭配 <code>hystrix.stream</code> 端点的方式来监控 Hystrix 数据，只能<strong>一个一个</strong>服务实例进行查看，显然非常不方便。很多时候，我们希望看到<strong>所有</strong>服务，并且将相同服务实例的 Hystrix 监控数据进行<strong>聚合</strong>展示。</p><p>因此，Netflix 提供了 <a href="https://github.com/spring-cloud/spring-cloud-netflix/tree/2.2.x/spring-cloud-netflix-turbine" target="_blank" rel="noopener"><code>spring-cloud-netflix-turbine</code></a> 组件，将所有服务实例的 <code>hystrix.stream</code> 端点提供的监控数据进行<strong>聚合</strong>，提供给 Hystrix Dashboard 获取并展示。如此，整体架构就变成下图：</p><p><img src="assets/51.png" alt="整体架构"></p><ul><li>Hystrix Dashboard 不支持抓取服务实例的 <code>hystrix.stream</code> 端点提供的 Hystrix 监控数据，而是抓取 Turbine 聚合各个服务实例后的 Hystrix 监控数据。</li><li>Turbine 是从注册中心获取所有服务实例的地址，从而抓取它们的 <code>hystrix.stream</code> 端点的 Hystrix 监控数据，进行聚合计算。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/2、创建执行命令调用</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/2-chuang-jian-zhi-xing-ming-ling-diao-yong/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/2-chuang-jian-zhi-xing-ming-ling-diao-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="HystrixCommand"><a href="#HystrixCommand" class="headerlink" title="HystrixCommand"></a>HystrixCommand</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecuteFeignHystrix</span> <span class="token keyword">extends</span> <span class="token class-name">HystrixCommand</span><span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserServiceFeignClient02 userServiceFeignClient02<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer userId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExecuteFeignHystrix</span><span class="token punctuation">(</span>UserServiceFeignClient02 userServiceFeignClient02<span class="token punctuation">,</span> Integer userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>Setter<span class="token punctuation">.</span><span class="token function">withGroupKey</span><span class="token punctuation">(</span>HystrixCommandGroupKey<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span><span class="token string">"orderService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandKey</span><span class="token punctuation">(</span>HystrixCommandKey<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span><span class="token string">"queryByOrderId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandPropertiesDefaults</span><span class="token punctuation">(</span>HystrixCommandProperties<span class="token punctuation">.</span><span class="token function">Setter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//至少有10个请求，熔断器才进行错误率的计算</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//熔断器中断请求5秒后会进入半打开状态,放部分流量过去重试</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerSleepWindowInMilliseconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//错误率达到50开启熔断保护</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withFallbackEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionTimeoutInMilliseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//最大并发请求量</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionIsolationStrategy</span><span class="token punctuation">(</span>HystrixCommandProperties<span class="token punctuation">.</span>ExecutionIsolationStrategy<span class="token punctuation">.</span>THREAD<span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userServiceFeignClient02 <span class="token operator">=</span> userServiceFeignClient02<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> UserResponse <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> userServiceFeignClient02<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> UserResponse <span class="token function">getFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserResponse userResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userResponse<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userResponse<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"服务降级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用Hystrix命令进行调用"><a href="#使用Hystrix命令进行调用" class="headerlink" title="使用Hystrix命令进行调用"></a>使用Hystrix命令进行调用</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hystrix"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserServiceFeignClient02 userServiceFeignClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserResponse <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecuteFeignHystrix executeFeignHystrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecuteFeignHystrix</span><span class="token punctuation">(</span>userServiceFeignClient<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executeFeignHystrix<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="HystrixObservableCommand"><a href="#HystrixObservableCommand" class="headerlink" title="HystrixObservableCommand"></a>HystrixObservableCommand</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObservableFeignHystrix</span> <span class="token keyword">extends</span> <span class="token class-name">HystrixObservableCommand</span><span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserServiceFeignClient02 userServiceFeignClient02<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer userId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ObservableFeignHystrix</span><span class="token punctuation">(</span>UserServiceFeignClient02 userServiceFeignClient02<span class="token punctuation">,</span> Integer userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用父类构造方法</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>HystrixCommandGroupKey<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span><span class="token string">"userServiceFeignClient02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userServiceFeignClient02 <span class="token operator">=</span> userServiceFeignClient02<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Observable<span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * Observable有三个关键的事件方法，分别为onNext，onCompleted，onError         */</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span>OnSubscribe<span class="token operator">&lt;</span>UserResponse<span class="token operator">></span><span class="token punctuation">)</span> observer <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 写业务逻辑，注意try-catch</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>observer<span class="token punctuation">.</span><span class="token function">isUnsubscribed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    UserResponse userResponse <span class="token operator">=</span> userServiceFeignClient02<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    observer<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>userResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>                    observer<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                observer<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Observable<span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> <span class="token function">resumeWithFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>subscriber <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscriber<span class="token punctuation">.</span><span class="token function">isUnsubscribed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                UserResponse userResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userResponse<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userResponse<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"服务降级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>userResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>                subscriber<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hystrix"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserServiceFeignClient02 userServiceFeignClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test02"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserResponse <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        ObservableFeignHystrix observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObservableFeignHystrix</span><span class="token punctuation">(</span>userServiceFeignClient<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AtomicReference<span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> userResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        observe<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>userResponse<span class="token operator">:</span><span class="token operator">:</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userResponse<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/1、Hystrix在SpringBoot中的使用</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/1-hystrix-zai-springboot-zhong-de-shi-yong/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/1-hystrix-zai-springboot-zhong-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>在<strong>纯 Spring Boot</strong> 环境下使用hystrix。</p><h2 id="搭建用户服务"><a href="#搭建用户服务" class="headerlink" title="搭建用户服务"></a>搭建用户服务</h2><p>主要是通过127.0.0.1:8080端口提供服务</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获得指定用户</span>    <span class="token keyword">public</span> UserResponse <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"昵称："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span>id <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获得匹配的用户列表</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span>                                   <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> Integer gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> id <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> id<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加用户</span>    <span class="token keyword">public</span> Integer <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserAddRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"昵称："</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别："</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Hystrix-示例项目"><a href="#Hystrix-示例项目" class="headerlink" title="Hystrix 示例项目"></a>Hystrix 示例项目</h2><p> 引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入 Feign 相关依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入 Feign GSON 拓展的依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入 Feign SpringMVC 拓展的依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-spring4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入 Hystrix 依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.netflix.hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hystrix-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        @HystrixCommand 等注解--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.netflix.hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hystrix-javanica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><p><code>hystrix-core</code>依赖，提供 Hystrix 核心实现。</p></li><li><p><code>hystrix-javanica</code>依赖，提供 <code>@HystrixCommand</code> 等注解，搭配 AOP 切面功能，简化我们使用 Hystrix 实现服务容错的功能。</p></li></ul><h2 id="HystrixConfig"><a href="#HystrixConfig" class="headerlink" title="HystrixConfig"></a>HystrixConfig</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span> <span class="token comment" spellcheck="true">// 开启 AOP 代理的支持</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HystrixCommandAspect <span class="token function">hystrixCommandAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HystrixCommandAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过 HystrixCommandAspect 可以进行扫描 <code>@@HystrixCommand</code> 等注解的切面，使用 Hystrix 进行服务容错。</p><h2 id="DemoController"><a href="#DemoController" class="headerlink" title="DemoController"></a>DemoController</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserServiceFeignClient userServiceFeignClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test01"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserResponse <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userServiceFeignClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserResponse <span class="token function">fallback</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"fallback "</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test02A"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> <span class="token function">test02A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userServiceFeignClient<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token string">"你猜"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test02B"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserResponse<span class="token operator">></span> <span class="token function">test02B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> queryMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"昵称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userServiceFeignClient<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test03"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Integer <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userServiceFeignClient<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserAddRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"昵称"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加了 Hystrix 提供的 <a href="https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommand.java" target="_blank" rel="noopener"><code>@HystrixCommand</code></a> 注解，设置执行发生 Exception 异常时，执行 <code>fallbackMethod</code> 属性对应的方法<code>fallbackMethod</code> 方法的参数要和<strong>原始</strong>方法一致，最后<strong>一个为 Throwable 异常</strong>。</p><p>通过不同的 Throwable 异常，我们可以进行不同的 fallback 降级处理。极端情况下，Hystrix 断路器<strong>熔断（打开）\</strong>时，不会执行 <code>#test01()</code> 方法，而是*<em>直接抛出 <code>Hystrix circuit short-circuited and is OPEN</code> 异常*</em>，然后也是进入 fallback 降级处理。</p><h2 id="HystrixCommand"><a href="#HystrixCommand" class="headerlink" title="@HystrixCommand"></a>@HystrixCommand</h2><p><strong>1.<code>fallbackMethod</code> 属性：</strong></p><p>指定 fallback 服务降级的处理方法，处理相应的异常。</p><p><strong>2. <code>ignoreExceptions</code> 属性：</strong></p><p>指定忽略指定的异常 Class，不进行 fallback 服务降级。</p><p><strong>3. <code>commandKey</code> 属性：</strong></p><p>Hystrix Command 命令<strong>键</strong>，默认未配置情况下，使用方法名。例如说，我们上面的 <code>#test()</code> 对应的 <code>commandKey</code> 属性默认为 test。</p><p><strong>4. <code>groupKey</code> 属性：</strong></p><p>Hystrix Command 命令<strong>分组键</strong>，用于 Hystrix 根据不同的分组来统计命令的统计、告警、仪表盘信息。</p><p>默认未配置情况下，使用方法所在类名。例如说，我们上面的 <code>#test()</code> 方法所在类为 DemoController，则对应的 <code>groupKey</code> 属性默认为 DemoController。</p><p><strong>5. <code>threadPoolKey</code> 属性</strong></p><p>线程池名，用于划分不同的线程池，进行资源隔离。</p><p>默认未配置情况下，相同 <code>groupKey</code> 的 Hystrix Command 使用同一个线程池。在配置情况下，相同 <code>groupKey</code> + <code>threadPoolKey</code> 使用同一个线程池。也就是说，<code>groupKey</code> 是<strong>必选</strong>的<strong>基础</strong>维度，而 <code>threadPoolKey</code> 是<strong>可选</strong>的进一步<strong>细化</strong>维度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/3、Hystrix/10、注解方式的实现</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/10-zhu-jie-fang-shi-de-shi-xian/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/3-hystrix/10-zhu-jie-fang-shi-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<p><code>hystrix-core</code>实现的熔断器，需要写大量的代码.所以Javanica就出来了，通过引入支持注解。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span> <span class="token comment" spellcheck="true">// 开启 AOP 代理的支持</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HystrixCommandAspect <span class="token function">hystrixCommandAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HystrixCommandAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="HystrixCommandAspect"><a href="#HystrixCommandAspect" class="headerlink" title="HystrixCommandAspect"></a>HystrixCommandAspect</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// HystrixCommand切点</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hystrixCommandAnnotationPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// HystrixCollapser切点</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hystrixCollapserAnnotationPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// HystrixCommand和HystrixCollapser环绕执行</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Object <span class="token function">methodsAnnotatedWithHystrixCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取Method</span>    Method method <span class="token operator">=</span> <span class="token function">getMethodFromTarget</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 校验方法是否为空</span>    Validate<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"failed to get method from joinPoint: %s"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断方法上是否有HystrixCommand和HystrixCollapser两个注解，有的话直接抛出异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>HystrixCommand<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>HystrixCollapser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"method cannot be annotated with HystrixCommand and HystrixCollapser "</span> <span class="token operator">+</span>                <span class="token string">"annotations at the same time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从Map中取出来MetaHolderFactory</span>    MetaHolderFactory metaHolderFactory <span class="token operator">=</span> META_HOLDER_FACTORY_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>HystrixPointcutType<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建MetaHolder</span>    MetaHolder metaHolder <span class="token operator">=</span> metaHolderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取HystrixCommand实例</span>    HystrixInvokable invokable <span class="token operator">=</span> HystrixCommandFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取执行类型</span>    ExecutionType executionType <span class="token operator">=</span> metaHolder<span class="token punctuation">.</span><span class="token function">isCollapserAnnotationPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>            metaHolder<span class="token punctuation">.</span><span class="token function">getCollapserExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> metaHolder<span class="token punctuation">.</span><span class="token function">getExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行结果</span>    Object result<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>metaHolder<span class="token punctuation">.</span><span class="token function">isObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Command执行</span>            result <span class="token operator">=</span> CommandExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">,</span> metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">executeObservable</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">,</span> metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HystrixBadRequestException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HystrixRuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token function">hystrixRuntimeExceptionToThrowable</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>会根据返回值的类型决定ExecutionType的类型。</p><h1 id="获取HystrixCommand实例"><a href="#获取HystrixCommand实例" class="headerlink" title="获取HystrixCommand实例"></a>获取HystrixCommand实例</h1><p>com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory#create</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> HystrixInvokable <span class="token function">create</span><span class="token punctuation">(</span>MetaHolder metaHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HystrixInvokable executable<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metaHolder<span class="token punctuation">.</span><span class="token function">isCollapserAnnotationPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用合并类型的</span>        executable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandCollapser</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>metaHolder<span class="token punctuation">.</span><span class="token function">isObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果返回值的类型为OBSERVABLE</span>        executable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObservableCommand</span><span class="token punctuation">(</span>HystrixCommandBuilderFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个标准的执行命令</span>        executable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericCommand</span><span class="token punctuation">(</span>HystrixCommandBuilderFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> executable<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="HystrixPropertiesManager的配置信息处理类"><a href="#HystrixPropertiesManager的配置信息处理类" class="headerlink" title="HystrixPropertiesManager的配置信息处理类"></a>HystrixPropertiesManager的配置信息处理类</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// command 执行配置属性</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXECUTION_ISOLATION_STRATEGY <span class="token operator">=</span> <span class="token string">"execution.isolation.strategy"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXECUTION_ISOLATION_THREAD_TIMEOUT_IN_MILLISECONDS <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXECUTION_TIMEOUT_ENABLED <span class="token operator">=</span> <span class="token string">"execution.timeout.enabled"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXECUTION_ISOLATION_THREAD_INTERRUPT_ON_TIMEOUT <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.interruptOnTimeout"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXECUTION_ISOLATION_SEMAPHORE_MAX_CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token string">"execution.isolation.semaphore.maxConcurrentRequests"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// command 执行降级属性</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FALLBACK_ISOLATION_SEMAPHORE_MAX_CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token string">"fallback.isolation.semaphore.maxConcurrentRequests"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FALLBACK_ENABLED <span class="token operator">=</span> <span class="token string">"fallback.enabled"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// command断路器属性</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CIRCUIT_BREAKER_ENABLED <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CIRCUIT_BREAKER_REQUEST_VOLUME_THRESHOLD <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CIRCUIT_BREAKER_SLEEP_WINDOW_IN_MILLISECONDS <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CIRCUIT_BREAKER_ERROR_THRESHOLD_PERCENTAGE <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CIRCUIT_BREAKER_FORCE_OPEN <span class="token operator">=</span> <span class="token string">"circuitBreaker.forceOpen"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CIRCUIT_BREAKER_FORCE_CLOSED <span class="token operator">=</span> <span class="token string">"circuitBreaker.forceClosed"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// command 流量配置属性 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METRICS_ROLLING_PERCENTILE_ENABLED <span class="token operator">=</span> <span class="token string">"metrics.rollingPercentile.enabled"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METRICS_ROLLING_PERCENTILE_TIME_IN_MILLISECONDS <span class="token operator">=</span> <span class="token string">"metrics.rollingPercentile.timeInMilliseconds"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METRICS_ROLLING_PERCENTILE_NUM_BUCKETS <span class="token operator">=</span> <span class="token string">"metrics.rollingPercentile.numBuckets"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METRICS_ROLLING_PERCENTILE_BUCKET_SIZE <span class="token operator">=</span> <span class="token string">"metrics.rollingPercentile.bucketSize"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METRICS_HEALTH_SNAPSHOT_INTERVAL_IN_MILLISECONDS <span class="token operator">=</span> <span class="token string">"metrics.healthSnapshot.intervalInMilliseconds"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// command 请求上下文属性</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REQUEST_CACHE_ENABLED <span class="token operator">=</span> <span class="token string">"requestCache.enabled"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REQUEST_LOG_ENABLED <span class="token operator">=</span> <span class="token string">"requestLog.enabled"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程池属性 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MAX_QUEUE_SIZE <span class="token operator">=</span> <span class="token string">"maxQueueSize"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CORE_SIZE <span class="token operator">=</span> <span class="token string">"coreSize"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String KEEP_ALIVE_TIME_MINUTES <span class="token operator">=</span> <span class="token string">"keepAliveTimeMinutes"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_SIZE_REJECTION_THRESHOLD <span class="token operator">=</span> <span class="token string">"queueSizeRejectionThreshold"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METRICS_ROLLING_STATS_NUM_BUCKETS <span class="token operator">=</span> <span class="token string">"metrics.rollingStats.numBuckets"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String METRICS_ROLLING_STATS_TIME_IN_MILLISECONDS <span class="token operator">=</span> <span class="token string">"metrics.rollingStats.timeInMilliseconds"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并配置属性 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MAX_REQUESTS_IN_BATCH <span class="token operator">=</span> <span class="token string">"maxRequestsInBatch"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TIMER_DELAY_IN_MILLISECONDS <span class="token operator">=</span> <span class="token string">"timerDelayInMilliseconds"</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/2、Ribbon/3、负载均衡器的核心</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/2-ribbon/3-fu-zai-jun-heng-qi-de-he-xin/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/2-ribbon/3-fu-zai-jun-heng-qi-de-he-xin/</url>
      
        <content type="html"><![CDATA[<p>LoadBalancer 的职能主要有三个：</p><ol><li>维护Sever列表的数量(新增、更新、删除等)</li><li>维护Server列表的状态(状态更新)</li><li>当请求Server实例时，能否返回最合适的Server实例</li></ol><h1 id="负载均衡器的基本实现"><a href="#负载均衡器的基本实现" class="headerlink" title="负载均衡器的基本实现"></a>负载均衡器的基本实现</h1><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304104408.png" alt="在这里插入图片描述"></p><table><thead><tr><th>组成部分</th><th>职能</th></tr></thead><tbody><tr><td>Server</td><td><code>Server</code> 作为服务实例的表示，会记录服务实例的相关信息，如：服务地址，所属zone，服务名称，实例ID等</td></tr><tr><td>ServerList</td><td>维护着一组<code>Server</code>实例列表,在应用运行的过程中，Ribbon通过ServerList中的服务实例供负载均衡器选择。ServerList维护列表可能在运行的过程中动态改变</td></tr><tr><td>ServerStats</td><td>作为对应<code>Server</code> 的运行情况统计，一般是服务调用过程中的<code>Server</code>平均响应时间，累计请求失败计数，熔断时间控制等。一个<code>ServerStats</code>实例唯一对应一个<code>Server</code>实例</td></tr><tr><td>LoadBalancerStats</td><td>作为 <code>ServerStats</code>实例列表的容器，统一维护</td></tr><tr><td>ServerListUpdater</td><td>负载均衡器通过<code>ServerListUpdater</code>来更新<code>ServerList</code>,比如实现一个定时任务，每隔一段时间获取最新的Server实例列表</td></tr><tr><td>Pinger</td><td>服务状态检验器，负责维护<code>ServerList</code>列表中的服务状态<code>注意：Pinger仅仅负责Server的状态，没有能力决定是否删除</code></td></tr><tr><td>PingerStrategy</td><td>定义以何种方式还检验服务是否有效，比如是按照顺序的方式还是并行的方式</td></tr><tr><td>IPing</td><td>Ping，检验服务是否可用的方法，常见的是通过HTTP，或者TCP/IP的方式看服务有无认为正常的请求</td></tr></tbody></table><p>虽然Spring Cloud中定义了<code>LoadBalancerClient</code>为负载均衡器的接口,但是<code>LoadBalancerClient</code>还只是一个抽象的负载均衡器接口，并且针对Ribbon实现了<code>RibbonLoadBalancerClient</code>，它在具体实现客户端负载均衡时，则是通过Ribbon的<code>ILoadBalancer</code>接口实现。虽然Spring Cloud中定义了<code>LoadBalancerClient</code>为负载均衡器的接口，并且针对Ribbon实现了<code>RibbonLoadBalancerClient</code>，但是它在具体实现客户端负载均衡时，则是通过Ribbon的<code>ILoadBalancer</code>接口实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancerClient</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceInstanceChooser</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过LoadBalancer的ServiceInstance对指定的服务执行请求操作     */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> ServiceInstance serviceInstance<span class="token punctuation">,</span> LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 为系统构建一个合适的host:port形式的url。在分布式系统中，我们使用逻辑上的服务名称作为host来构建URI     * （替代服务实例的host:port形式）进行请求，比如说myservice/path/to/service。     */</span>    URI <span class="token function">reconstructURI</span><span class="token punctuation">(</span>ServiceInstance instance<span class="token punctuation">,</span> URI original<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">,</span> Object hint<span class="token punctuation">)</span>      <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>   ILoadBalancer loadBalancer <span class="token operator">=</span> <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>   Server server <span class="token operator">=</span> <span class="token function">getServer</span><span class="token punctuation">(</span>loadBalancer<span class="token punctuation">,</span> hint<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No instances available for "</span> <span class="token operator">+</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   RibbonServer ribbonServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RibbonServer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> server<span class="token punctuation">,</span>         <span class="token function">isSecure</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token function">serverIntrospector</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">execute</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> ribbonServer<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>execute</code>函数的实现中，第一步做的就是通过<code>getServer</code>根据传入的服务名<code>serviceId</code>去获得具体的服务实例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Server <span class="token function">getServer</span><span class="token punctuation">(</span>ILoadBalancer loadBalancer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadBalancer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> loadBalancer<span class="token punctuation">.</span><span class="token function">chooseServer</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过<code>getServer</code>函数的实现源码，我们可以看到这里获取具体服务实例的时候使用了ribbon自身的<code>ILoadBalancer</code>接口中定义的<code>chooseServer</code>函数。</p><h1 id="ILoadBalancer接口"><a href="#ILoadBalancer接口" class="headerlink" title="ILoadBalancer接口"></a>ILoadBalancer接口</h1><p>com.netflix.loadbalancer.ILoadBalancer</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoadBalancer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addServers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Server<span class="token operator">></span> newServers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Server <span class="token function">chooseServer</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">markServerDown</span><span class="token punctuation">(</span>Server server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token function">getReachableServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token function">getAllServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><code>addServers</code>：向负载均衡器中维护的实例列表增加服务实例。</li><li><code>chooseServer</code>：通过某种策略，从负载均衡器中挑选出一个具体的服务实例。</li><li><code>markServerDown</code>：用来通知和标识负载均衡器中某个具体实例已经停止服务，不然负载均衡器在下一次获取服务实例清单前都会认为服务实例均是正常服务的。</li><li><code>getReachableServers</code>：获取当前正常服务的实例列表。</li><li><code>getAllServers</code>：获取所有已知的服务实例列表，包括正常服务和停止服务的实例。</li></ul><p><img src="assets/ribbon-code-2.png" alt="img"></p><p>在整合时默认采用了<code>ZoneAwareLoadBalancer</code>来实现负载均衡器。</p><h2 id="AbstractLoadBalancer"><a href="#AbstractLoadBalancer" class="headerlink" title="AbstractLoadBalancer"></a>AbstractLoadBalancer</h2><p>com.netflix.loadbalancer.AbstractLoadBalancer</p><p><code>AbstractLoadBalancer</code>是<code>ILoadBalancer</code>接口的抽象实现。在该抽象类中定义了一个关于服务实例的分组枚举类<code>ServerGroup</code>，它包含了三种不同类型：</p><ul><li>ALL-所有服务实例、</li><li>STATUS_UP-正常服务的实例、</li><li>STATUS_NOT_UP-停止服务的实例</li></ul><p>现了一个<code>chooseServer()</code>函数，该函数通过调用接口中的<code>chooseServer(Object key)</code>实现，其中参数<code>key</code>为null，表示在选择具体服务实例时忽略<code>key</code>的条件判断；最后还定义了两个抽象函数，</p><ul><li><code>getServerList(ServerGroup serverGroup)</code>定义了根据分组类型来获取不同的服务实例列表</li><li><code>getLoadBalancerStats()</code>定义了获取<code>LoadBalancerStats</code>对象的方法，<code>LoadBalancerStats</code>对象被用来存储负载均衡器中各个服务实例当前的属性和统计信息，这些信息非常有用，我们可以利用这些信息来观察负载均衡器的运行情况，同时这些信息也是用来制定负载均衡策略的重要依据。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">ILoadBalancer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> ServerGroup<span class="token punctuation">{</span>        ALL<span class="token punctuation">,</span>        STATUS_UP<span class="token punctuation">,</span>        STATUS_NOT_UP    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Server <span class="token function">chooseServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">chooseServer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token function">getServerList</span><span class="token punctuation">(</span>ServerGroup serverGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> LoadBalancerStats <span class="token function">getLoadBalancerStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="BaseLoadBalancer"><a href="#BaseLoadBalancer" class="headerlink" title="BaseLoadBalancer"></a>BaseLoadBalancer</h2><p><code>BaseLoadBalancer</code>类是Ribbon负载均衡器的基础实现类，在该类中定义很多关于均衡负载器相关的基础内容：</p><p>定义并维护了两个存储服务实例<code>Server</code>对象的列表。一个用于存储所有服务实例的清单，一个用于存储正常服务的实例清单。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Monitor</span><span class="token punctuation">(</span>name <span class="token operator">=</span> PREFIX <span class="token operator">+</span> <span class="token string">"AllServerList"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> DataSourceType<span class="token punctuation">.</span>INFORMATIONAL<span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">volatile</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> allServerList <span class="token operator">=</span> Collections        <span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Server<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Monitor</span><span class="token punctuation">(</span>name <span class="token operator">=</span> PREFIX <span class="token operator">+</span> <span class="token string">"UpServerList"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> DataSourceType<span class="token punctuation">.</span>INFORMATIONAL<span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">volatile</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> upServerList <span class="token operator">=</span> Collections        <span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Server<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>负载均衡器的基本实现，可以将任意服务器列表设置为服务器池。可以设置ping来确定服务器的活跃程度。在内部，这个类维护一个“所有”服务器列表和一个“up”服务器列表，并根据调用者的要求使用它们</li><li>TimerTask定时任务进行ping</li><li>SerialPingStrategy<ul><li>如果IPing接口实现效率较慢，或者有大量服务器，则表现不是很好。 逐个进行ping，耗时较长，改善方式可以放入线程池中执行，但这个策略设计之初是运行在内存中eureka之间的信息调用</li></ul></li><li>默认规则：最著名和最基本的负载平衡策略 Round Robin Rule</li></ul><h2 id="NoOpLoadBalancer"><a href="#NoOpLoadBalancer" class="headerlink" title="NoOpLoadBalancer"></a>NoOpLoadBalancer</h2><ul><li>啥都不做</li></ul><h1 id="维护Server列表-新增、更新、删除"><a href="#维护Server列表-新增、更新、删除" class="headerlink" title="维护Server列表(新增、更新、删除)"></a>维护Server列表(新增、更新、删除)</h1><p><img src="assets/20190522002347117.png" alt="在这里插入图片描述"></p><ol><li>基于配置的服务列表<br>这种方式一般是通过配置文件，静态地配置服务器列表，这种方式相对而言比较简单，但并不是意味着在机器运行的时候就一直不变。<code>netflix</code> 在做Spring cloud 套件时，使用了分布式配置框架<code>netflix archaius</code> ，<code>archaius</code> 框架有一个特点是会动态的监控配置文件的变化，将变化刷新到各个应用上。也就是说，当我们在不关闭服务的情况下，如果修改了基于配置的服务列表时, 服务列表可以直接刷新</li><li>结合服务发现组件（如<code>Eureka</code>）的服务注册信息动态维护服务列表<br>基于<code>Spring Cloud</code>框架下，服务注册和发现是一个分布式服务集群必不可少的一个组件，它负责维护不同的服务实例（注册、续约、取消注册</li></ol><table><thead><tr><th>更新策略</th><th>ServerListUpdater实现</th></tr></thead><tbody><tr><td>基于定时任务的拉取服务列表</td><td>com.netflix.loadbalancer.PollingServerListUpdater</td></tr><tr><td>基于Eureka服务事件通知的方式更新</td><td>com.netflix.loadbalancer.EurekaNotificationServerListUpdater</td></tr></tbody></table><blockquote><p>ribbon在默认情况下，采用基于配置的服务列表维护，基于定时任务按时拉取服务列表的方式，频率为30s.</p><p>Spring Cloud集成下的配置,采用基于服务发现组件</p></blockquote><p> ServerListUpdater</p><p>这个接口实现的是对ServerList的更新，可以称之为”服务更新器”。它定义了一系列控制它的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServerListUpdater</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内部接口</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UpdateAction</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现对ServerList的更新操作</span>        <span class="token keyword">void</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//启动服务更新器</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span>UpdateAction updateAction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//停止服务更新器</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回最近的更新时间戳</span>    String <span class="token function">getLastUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回上一次更新到现在的时间间隔，单位为ms</span>    <span class="token keyword">long</span> <span class="token function">getDurationSinceLastUpdateMs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回错过的更新周期数</span>    <span class="token keyword">int</span> <span class="token function">getNumberMissedCycles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回核心线程数</span>    <span class="token keyword">int</span> <span class="token function">getCoreThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的实现类有两个</p><ul><li><strong>PollingServerListUpdater</strong><br>DynamicServerListLoadBalancer默认的策略，它是通过定时任务的方式进行服务列表的更新</li><li><strong>EurekaNotificationServerListUpdater</strong><br>它需要利用Eureka的事件监听器来驱动服务列表的更新操作</li></ul><h2 id="基于定时任务拉取服务列表方式"><a href="#基于定时任务拉取服务列表方式" class="headerlink" title="基于定时任务拉取服务列表方式"></a><strong>基于定时任务拉取服务列表方式</strong></h2><ul><li>这种方式的实现为：<code>com.netflix.loadbalancer.PollingServerListUpdater</code>,其内部维护了一个周期性的定时任务，拉取最新的服务列表，然后将最新的服务列表更新到ServerList之中</li></ul><h2 id="基于Eureka服务事件通知的方式更新"><a href="#基于Eureka服务事件通知的方式更新" class="headerlink" title="基于Eureka服务事件通知的方式更新"></a><strong>基于Eureka服务事件通知的方式更新</strong></h2><p>基于Eureka的更新方式则有些不同, 当Eureka注册中心发生了Server服务注册信息变更时，会将消息通知发送到<code>EurekaNotificationServerListUpdater</code> 上，然后此Updator触发刷新ServerList</p><h1 id="更新服务实例的状态"><a href="#更新服务实例的状态" class="headerlink" title="更新服务实例的状态"></a>更新服务实例的状态</h1><p>Ribbon负载均衡器将服务实例的状态维护托交给<code>Pinger</code>、 <code>PingerStrategy</code>、<code>IPing</code> 来维护，具体交互模式如下所示：</p><p><img src="assets/20190522002441294.png" alt="在这里插入图片描述"></p><h2 id="创建Ping定时任务"><a href="#创建Ping定时任务" class="headerlink" title="创建Ping定时任务"></a>创建Ping定时任务</h2><p>启动定时任务</p><p>com.netflix.loadbalancer.BaseLoadBalancer#BaseLoadBalancer()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setupPingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canSkipPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lbTimer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lbTimer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    lbTimer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShutdownEnabledTimer</span><span class="token punctuation">(</span><span class="token string">"NFLoadBalancer-PingTimer-"</span> <span class="token operator">+</span> name<span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认是10秒的周期</span>    lbTimer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pingIntervalSeconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">forceQuickPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>相关的接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 定义Ping服务状态是否有效的策略，是序列化顺序Ping，还是并行的方式Ping，在此过程中，应当保证相互不受影响 * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPingStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pingServers</span><span class="token punctuation">(</span>IPing ping<span class="token punctuation">,</span> Server<span class="token punctuation">[</span><span class="token punctuation">]</span> servers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 定义如何Ping一个服务，确保是否有效 * @author stonse * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPing</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Checks whether the given &lt;code>Server&lt;/code> is "alive" i.e. should be     * considered a candidate while loadbalancing     * 校验是否存活     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span>Server server<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Ping策略"><a href="#Ping策略" class="headerlink" title="Ping策略"></a>Ping策略</h2><p>默认的PingStrategy，<strong>采用序列化的实现方式，依次检查服务实例是否可用</strong>:</p><p>我们可以通过实现<code>IPingStrategy</code>接口并实现<code>pingServers(IPing ping, Server[] servers)</code>函数去扩展ping的执行策略</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SerialPingStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">IPingStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pingServers</span><span class="token punctuation">(</span>IPing ping<span class="token punctuation">,</span> Server<span class="token punctuation">[</span><span class="token punctuation">]</span> servers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> numCandidates <span class="token operator">=</span> servers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>numCandidates<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"LoadBalancer:  PingTask executing ["</span>                         <span class="token operator">+</span> numCandidates <span class="token operator">+</span> <span class="token string">"] servers configured"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCandidates<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ping <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ping<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span>servers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Exception while pinging Server:"</span>                             <span class="token operator">+</span> servers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> results<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>IPing还有如下几种实现：</p><p><img src="assets/20190522002513342.png" alt="在这里插入图片描述"></p><p>IPing是用来向server发起”ping”，来判断该server是否有响应，从而判断该server是否可用。它有一个boolean isAlive(Server)方法，IPing的实现类有以下几种</p><ul><li><strong>PingUrl</strong><br>真实的去ping 某个url，判断其是否alive</li><li><strong>PingConstant</strong><br>固定返回某服务是否可用，默认返回true，即可用</li><li><strong>NoOpPing</strong><br>不去ping,直接返回true,即可用</li><li><strong>DummyPing</strong><br>直接返回true</li><li><strong>NIWSDiscoveryPing</strong><br>根据DiscoveryEnabledServer的InstanceInfo的InstanceStatus去判断，如果为InstanceStatus.UP，则为可用，否则不可用</li></ul><blockquote><p>Ribbon默认的IPing实现:DummyPing</p></blockquote><h1 id="挑选一个合适的服务实例"><a href="#挑选一个合适的服务实例" class="headerlink" title="挑选一个合适的服务实例"></a>挑选一个合适的服务实例</h1><p>LoadBalancer 选择服务实例的流程</p><ol><li>通过<code>ServerList</code>获取当前可用的服务实例列表；</li><li>通过<code>ServerListFilter</code>将步骤1 得到的服务列表进行一次过滤，返回满足过滤器条件的服务实例列表；</li><li>应用<code>Rule</code>规则，结合<code>服务实例的统计信息</code>,返回满足规则的某一个服务实例；</li></ol><blockquote><p>实际上，在服务实例列表选择的过程中，有两次过滤的机会：第一次是首先通过ServerListFilter过滤器，另外一次是用过IRule 的选择规则进行过滤</p></blockquote><h2 id="ServerList的维护"><a href="#ServerList的维护" class="headerlink" title="ServerList的维护"></a>ServerList的维护</h2><p>负载均衡器通过 ServerList来统一维护服务实例,并使用<code>ServerListFilter</code>过滤器过滤出符合要求的服务实例列表<code>List&lt;Server&gt;</code></p><p><img src="assets/20190522002555762.png" alt="在这里插入图片描述"></p><p>接口定义：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Interface that defines the methods sed to obtain the List of Servers * @author stonse * * @param &lt;T> */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServerList</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Server</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取初始化的服务列表</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getInitialListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Return updated list of servers. This is called say every 30 secs     * (configurable) by the Loadbalancer's Ping cycle     * 获取更新后的的服务列表     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getUpdatedListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>在Ribbon的实现中，在<code>ServerList</code>中，维护着Server的实例，并返回最新的<code>List&lt;Server&gt;</code>集合，供<code>LoadBalancer</code>使用</p><p><img src="assets/20190522002637955.png" alt="在这里插入图片描述"></p><h2 id="服务实例列表过滤器"><a href="#服务实例列表过滤器" class="headerlink" title="服务实例列表过滤器"></a>服务实例列表过滤器</h2><blockquote><p>传入一个服务实例列表，过滤出满足过滤条件的服务列表</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServerListFilter</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Server</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getFilteredListOfServers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> servers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ServerListFilter"><a href="#ServerListFilter" class="headerlink" title="ServerListFilter"></a>ServerListFilter</h3><p>该接口很简单，只有一个方法List getFilteredListOfServers(List)，它主要用于实现服务实例列表的过滤，通过传入服务实例清单，根据一些规则返回过滤后的服务实例清单。</p><ul><li><strong>ZoneAffinityServerListFilter</strong><br>该过滤器基于”区域感知”(Zone Affinity)的方式实现服务实例的过滤，它会根据提供服务的实例所在的区域(Zone)与消费者自身所在的区域(Zone)进行比较，过滤掉那些不是在同一区域的实例。</li><li><strong>DefaultNIWSServerListFilter</strong><br>该过滤器完全继承ZoneAffinityServerListFilter</li><li><strong>ServerListSubsetFilter</strong><br>该过滤器适用于大规模服务器集群(上百或更多)的系统，因为它可以产生一个”区域感知”结果的子集列表，同时它还能够通过比较服务实例的通信失败数和并发连接数来判定该服务是否健康来选择性的从服务实例列表中剔除那些相对不够健康的实例</li><li><strong>ZonePreferenceServerListFilter</strong><br>使用spring cloud整合eureka和ribbon时默认使用的该过滤器。它实现了通过配置或eureka实例无数据的所属区域(Zone)来过滤出同区域的服务实例。</li></ul><blockquote><p><strong>Ribbon 的默认</strong><code>ServerListFilter</code><strong>实现：</strong><code>ZoneAffinityServerListFilter</code> </p></blockquote><h3 id="ZoneAffinityServerListFilter"><a href="#ZoneAffinityServerListFilter" class="headerlink" title="ZoneAffinityServerListFilter"></a><strong>ZoneAffinityServerListFilter</strong></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZoneAffinityServerListFilter</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Server</span><span class="token operator">></span> <span class="token keyword">extends</span>        <span class="token class-name">AbstractServerListFilter</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">IClientConfigAware</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getFilteredListOfServers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> servers<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//zone非空，并且开启了区域优先，并且服务实例数量不为空</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>zone <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>zoneAffinity <span class="token operator">||</span> zoneExclusive<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> servers <span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//基于断言过滤服务列表 </span>           List<span class="token operator">&lt;</span>T<span class="token operator">></span> filteredServers <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>Iterables<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>                    servers<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>zoneAffinityPredicate<span class="token punctuation">.</span><span class="token function">getServerOnlyPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果允许区域优先，则返回过滤列表</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldEnableZoneAffinity</span><span class="token punctuation">(</span>filteredServers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> filteredServers<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>zoneAffinity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                overrideCounter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> servers<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断是否应该使用区域优先过滤条件</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldEnableZoneAffinity</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> filtered<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zoneAffinity <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>zoneExclusive<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>zoneExclusive<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 获取统计信息</span>        LoadBalancerStats stats <span class="token operator">=</span> <span class="token function">getLoadBalancerStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stats <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> zoneAffinity<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Determining if zone affinity should be enabled with given server list: {}"</span><span class="token punctuation">,</span> filtered<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取区域Server快照，包含统计数据</span>            ZoneSnapshot snapshot <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">getZoneSnapshot</span><span class="token punctuation">(</span>filtered<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//平均负载，此负载的意思是，当前所有的Server中，平均每台机器上的活跃请求数</span>           <span class="token keyword">double</span> loadPerServer <span class="token operator">=</span> snapshot<span class="token punctuation">.</span><span class="token function">getLoadPerServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> instanceCount <span class="token operator">=</span> snapshot<span class="token punctuation">.</span><span class="token function">getInstanceCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> circuitBreakerTrippedCount <span class="token operator">=</span> snapshot<span class="token punctuation">.</span><span class="token function">getCircuitTrippedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1. 如果Server断路的比例超过了设置的上限(默认`0.8`)</span>            <span class="token comment" spellcheck="true">// 2. 或者当前负载超过了设置的负载上限</span>            <span class="token comment" spellcheck="true">// 3. 如果可用的服务小于设置的服务上限`默认为2`</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> circuitBreakerTrippedCount<span class="token punctuation">)</span> <span class="token operator">/</span> instanceCount <span class="token operator">>=</span> blackOutServerPercentageThreshold<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token operator">||</span> loadPerServer <span class="token operator">>=</span> activeReqeustsPerServerThreshold<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span>instanceCount <span class="token operator">-</span> circuitBreakerTrippedCount<span class="token punctuation">)</span> <span class="token operator">&lt;</span> availableServersThreshold<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"zoneAffinity is overriden. blackOutServerPercentage: {}, activeReqeustsPerServer: {}, availableServers: {}"</span><span class="token punctuation">,</span>                         <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> circuitBreakerTrippedCount <span class="token operator">/</span> instanceCount<span class="token punctuation">,</span>  loadPerServer<span class="token punctuation">,</span> instanceCount <span class="token operator">-</span> circuitBreakerTrippedCount<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ZonePreferenceServerListFilter"><a href="#ZonePreferenceServerListFilter" class="headerlink" title="ZonePreferenceServerListFilter"></a><strong>ZonePreferenceServerListFilter</strong></h3><p><code>ZonePreferenceServerListFilter</code> 集成自 <code>ZoneAffinityServerListFilter</code>，在此基础上做了拓展，在 <code>ZoneAffinityServerListFilter</code>返回结果的基础上，再过滤出和本地服务相同区域(<code>zone</code>)的服务列表。</p><blockquote><p>当指定了当前服务的所在Zone，并且 <code>ZoneAffinityServerListFilter</code> 没有起到过滤效果时，<code>ZonePreferenceServerListFilter</code>会返回当前Zone的Server列表。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZonePreferenceServerListFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZoneAffinityServerListFilter</span><span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String zone<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig niwsClientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>niwsClientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationManager<span class="token punctuation">.</span><span class="token function">getDeploymentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>zone <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span><span class="token function">getDeploymentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>                    ContextKey<span class="token punctuation">.</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token function">getFilteredListOfServers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Server<span class="token operator">></span> servers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//父类的基础上，获取过滤结果</span>                List<span class="token operator">&lt;</span>Server<span class="token operator">></span> output <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getFilteredListOfServers</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有起到过滤效果，则进行区域优先过滤</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>zone <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> output<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Server<span class="token operator">></span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Server server <span class="token operator">:</span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>zone<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span><span class="token function">getZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    local<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>local<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> local<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> output<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> zone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setZone</span><span class="token punctuation">(</span>String zone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>zone <span class="token operator">=</span> zone<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="ServerListSubsetFilter"><a href="#ServerListSubsetFilter" class="headerlink" title="ServerListSubsetFilter"></a><strong>ServerListSubsetFilter</strong></h3><p>这个过滤器作用于当Server数量列表特别庞大时（比如有上百个<code>Server</code>实例），这时，长时间保持Http链接也不太合适，可以适当地保留部分服务，舍弃其中一些服务，这样可使释放没必要的链接。</p><h2 id="Server统计信息"><a href="#Server统计信息" class="headerlink" title="Server统计信息"></a><strong>Server统计信息</strong></h2><p>在ServerListFilter过滤的时候都会根据服务的统计信息进行过滤。负载均衡器LoaderBalancer 统计了服务实例Server相关的如下信息</p><table><thead><tr><th>ServerStats</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>zone</td><td>当前服务所属的可用区</td><td>配置</td><td>可通过 <code>eureka.instance.meta.zone</code> 指定</td></tr><tr><td>totalRequests</td><td>总请求数量，client每次调用，数量会递增</td><td>实时</td><td>0</td></tr><tr><td>activeRequestsCountTimeout</td><td>活动请求计数时间窗<code>niws.loadbalancer.serverStats.activeRequestsCount.effectiveWindowSeconds</code>,如果时间窗范围之内没有<code>activeRequestsCount</code>值的改变，则<code>activeRequestsCounts</code>初始化为0</td><td>配置</td><td>60*10(seconds)</td></tr><tr><td>successiveConnectionFailureCount</td><td>连续连接失败计数</td><td>实时</td><td></td></tr><tr><td>connectionFailureThreshold</td><td>连接失败阈值通过属性<code>niws.loadbalancer.default.connectionFailureCountThreshold</code> 进行配置</td><td>配置</td><td>3</td></tr><tr><td>circuitTrippedTimeoutFactor</td><td>断路器超时因子,<code>niws.loadbalancer.default.circuitTripTimeoutFactorSeconds</code></td><td>配置</td><td>10(seconds)</td></tr><tr><td>maxCircuitTrippedTimeout</td><td>最大断路器超时秒数，<code>niws.loadbalancer.default.circuitTripMaxTimeoutSeconds</code></td><td>配置</td><td>30(seconds)</td></tr><tr><td>totalCircuitBreakerBlackOutPeriod</td><td>累计断路器终端时间区间</td><td>实时</td><td>milliseconds</td></tr><tr><td>lastAccessedTimestamp</td><td>最后连接时间</td><td>实时</td><td></td></tr><tr><td>lastConnectionFailedTimestamp</td><td>最后连接失败时间</td><td>实时</td><td></td></tr><tr><td>firstConnectionTimestamp</td><td>首次连接时间</td><td>实时</td><td></td></tr><tr><td>activeRequestsCount</td><td>当前活跃的连接数</td><td>实时</td><td></td></tr><tr><td>failureCountSlidingWindowInterval</td><td>失败次数统计时间窗</td><td>配置</td><td>1000(ms)</td></tr><tr><td>serverFailureCounts</td><td>当前时间窗内连接失败的数量</td><td>实时</td><td></td></tr><tr><td>responseTimeDist.mean</td><td>请求平均响应时间</td><td>实时</td><td>(ms)</td></tr><tr><td>responseTimeDist.max</td><td>请求最大响应时间</td><td>实时</td><td>(ms)</td></tr><tr><td>responseTimeDist.minimum</td><td>请求最小响应时间</td><td>实时</td><td>(ms)</td></tr><tr><td>responseTimeDist.minimum</td><td>请求最小响应时间</td><td>实时</td><td>(ms)</td></tr><tr><td>responseTimeDist.stddev</td><td>请求响应时间标准差</td><td>实时</td><td>(ms)</td></tr><tr><td>dataDist.sampleSize</td><td>QoS服务质量采集点大小</td><td>实时</td><td></td></tr><tr><td>dataDist.timestamp</td><td>QoS服务质量最后计算时间点</td><td>实时</td><td></td></tr><tr><td>dataDist.timestampMillis</td><td>QoS服务质量最后计算时间点毫秒数，自1970.1.1开始</td><td>实时</td><td></td></tr><tr><td>dataDist.mean</td><td>QoS 最近的时间窗内的请求平均响应时间</td><td>实时</td><td></td></tr><tr><td>dataDist.10thPercentile</td><td>QoS 10% 处理请求的时间</td><td>实时</td><td>ms</td></tr><tr><td>dataDist.25thPercentile</td><td>QoS 25% 处理请求的时间</td><td>实时</td><td>ms</td></tr><tr><td>dataDist.50thPercentile</td><td>QoS 50% 处理请求的时间</td><td>实时</td><td>ms</td></tr><tr><td>dataDist.75thPercentile</td><td>QoS 75% 处理请求的时间</td><td>实时</td><td>ms</td></tr><tr><td>dataDist.95thPercentile</td><td>QoS 95% 处理请求的时间</td><td>实时</td><td>ms</td></tr><tr><td>dataDist.99thPercentile</td><td>QoS 99% 处理请求的时间</td><td>实时</td><td>ms</td></tr><tr><td>dataDist.99.5thPercentile</td><td>QoS 前99.5% 处理请求的时间</td><td>实时</td><td>ms</td></tr></tbody></table><p>当有某个服务存在多个实例时，在请求的过程中，负载均衡器会统计每次请求的情况（请求相应时间，是否发生网络异常等），当出现了请求出现累计重试时，负载均衡器会标识当前<code>服务实例</code>，设置当前<code>服务实例</code>的断路的时间区间，在此区间内，当请求过来时，负载均衡器会将此<code>服务实例</code>从<code>可用服务实例列表中</code>暂时剔除，优先选择其他服务实例。</p><p><strong>相关统计信息如下</strong>：</p><table><thead><tr><th>ServerStats</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>successiveConnectionFailureCount</td><td>连续连接失败计数</td><td>实时</td><td></td></tr><tr><td>connectionFailureThreshold</td><td>连接失败阈值通过属性<code>niws.loadbalancer.default.connectionFailureCountThreshold</code> 进行配置，当<code>successiveConnectionFailureCount</code> 超过了此限制时，将计算熔断时间</td><td>配置</td><td>3</td></tr><tr><td>circuitTrippedTimeoutFactor</td><td>断路器超时因子,<code>niws.loadbalancer.default.circuitTripTimeoutFactorSeconds</code></td><td>配置</td><td>10(seconds)</td></tr><tr><td>maxCircuitTrippedTimeout</td><td>最大断路器超时秒数，<code>niws.loadbalancer.default.circuitTripMaxTimeoutSeconds</code></td><td>配置</td><td>30(seconds)</td></tr><tr><td>totalCircuitBreakerBlackOutPeriod</td><td>累计断路器终端时间区间</td><td>实时</td><td>milliseconds</td></tr><tr><td>lastAccessedTimestamp</td><td>最后连接时间</td><td>实时</td><td></td></tr><tr><td>lastConnectionFailedTimestamp</td><td>最后连接失败时间</td><td>实时</td><td></td></tr><tr><td>firstConnectionTimestamp</td><td>首次连接时间</td><td></td><td></td></tr></tbody></table><h2 id="挑选具体的服务实例"><a href="#挑选具体的服务实例" class="headerlink" title="挑选具体的服务实例"></a>挑选具体的服务实例</h2><p>定义了负载均衡的处理规则<code>IRule</code>对象，从<code>BaseLoadBalancer</code>中<code>chooseServer(Object key)</code>的实现源码，我们可以知道负载均衡器实际进行服务实例选择任务是委托给了<code>IRule</code>实例中的<code>choose</code>函数来实现。而在这里，默认初始化了<code>RoundRobinRule</code>为<code>IRule</code>的实现对象。<code>RoundRobinRule</code>实现了最基本且常用的轮询</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Server <span class="token function">chooseServer</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        counter <span class="token operator">=</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rule <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> rule<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"LoadBalancer [{}]:  Error choosing server for key {}"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> key<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Ribbon定义了一些常见的规则</p><table><thead><tr><th>实现</th><th>描述</th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>通过轮询的方式，选择过程会有最多10次的重试机制</td></tr><tr><td>RandomRule</td><td>随机方式，从列表中随机挑选一个服务</td></tr><tr><td>ZoneAvoidanceRule</td><td>基于ZoneAvoidancePredicate断言和AvailabilityPredicate断言的规则。ZoneAvoidancePredicate计算出哪个Zone的服务最差，然后将此Zone的服务从服务列表中剔除掉；而AvaliabitiyPredicate是过滤掉正处于熔断状态的服务；上述两个断言过滤出来的结果后，再通过RoundRobin轮询的方式从列表中挑选一个服务</td></tr><tr><td>BestAvailableRule</td><td>最优匹配规则：从服务列表中给挑选出并发数最少的Server</td></tr><tr><td>RetryRule</td><td>采用了装饰模式，为Rule提供了重试机制</td></tr><tr><td>WeightedResponseTimeRule</td><td>基于请求响应时间加权计算的规则，如果此规则没有生效，将采用 RoundRobinRule的的策略选择服务实例</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Monitor</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"CircuitBreakerTripped"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> DataSourceType<span class="token punctuation">.</span>INFORMATIONAL<span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCircuitBreakerTripped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isCircuitBreakerTripped</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCircuitBreakerTripped</span><span class="token punctuation">(</span><span class="token keyword">long</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//断路器熔断的时间戳</span>        <span class="token keyword">long</span> circuitBreakerTimeout <span class="token operator">=</span> <span class="token function">getCircuitBreakerTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitBreakerTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> circuitBreakerTimeout <span class="token operator">></span> currentTime<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还在熔断区间内，则返回熔断结果</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//获取熔断超时时间</span>   <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getCircuitBreakerTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> blackOutPeriod <span class="token operator">=</span> <span class="token function">getCircuitBreakerBlackoutPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>blackOutPeriod <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lastConnectionFailedTimestamp <span class="token operator">+</span> blackOutPeriod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回中断毫秒数</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getCircuitBreakerBlackoutPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> failureCount <span class="token operator">=</span> successiveConnectionFailureCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> threshold <span class="token operator">=</span> connectionFailureThreshold<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 连续失败，但是尚未超过上限，则服务中断周期为 0 ，表示可用 </span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>failureCount <span class="token operator">&lt;</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当链接失败超过阈值时，将进行熔断，熔断的时间间隔为：</span>        <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token punctuation">(</span>failureCount <span class="token operator">-</span> threshold<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">16</span> <span class="token operator">?</span> <span class="token number">16</span> <span class="token operator">:</span> <span class="token punctuation">(</span>failureCount <span class="token operator">-</span> threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> blackOutSeconds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> diff<span class="token punctuation">)</span> <span class="token operator">*</span> circuitTrippedTimeoutFactor<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>blackOutSeconds <span class="token operator">></span> maxCircuitTrippedTimeout<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            blackOutSeconds <span class="token operator">=</span> maxCircuitTrippedTimeout<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> blackOutSeconds <span class="token operator">*</span> 1000L<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>熔断时间的计算</strong></p><ol><li>计算<strong>累计连接失败计数</strong><code>successiveConnectionFailureCount</code> 是否超过 <strong>链接失败阈值</strong><code>connectionFailureThreshold</code>。如果 <code>successiveConnectionFailureCount</code> &lt; <code>connectionFailureThreshold</code>,即尚未超过限额，则熔断时间为 0 ；反之，如果超过限额，则进行步骤2的计算；</li><li>计算失败基数，最大不得超过 16：<code>diff = (failureCount - threshold) &gt; 16 ? 16 : (failureCount - threshold)</code></li><li>根据<strong>超时因子</strong><code>circuitTrippedTimeoutFactor</code>计算超时时间： <code>int blackOutSeconds = (1 &lt;&lt; diff) * circuitTrippedTimeoutFactor.get();</code></li><li>超时时间不得超过<strong>最大超时时间</strong>`maxCircuitTrippedTimeout 上线，</li></ol><p>当有链接失败情况出现断路逻辑时，将会最多：<code>1&lt;&lt;16 * 10 =320s</code>、最少<code>1&lt;&lt;1 * 10 =100s</code> 的请求熔断时间，再此期间内，此Server将会被忽略。<br>即：<br><strong>熔断时间最大值：1&lt;&lt;16 * 10 =320s</strong><br><strong>熔断时间最小值：1&lt;&lt;1 * 10 =100s</strong></p><p><strong>熔断统计何时清空？</strong></p><blockquote><p>熔断的统计有自己的清除策略，当如下几种场景存在时，熔断统计会清空归零：</p><ol><li>当请求时，发生的异常不是<code>断路拦截类</code>的异常（<code>Exception</code>）时(至于如何节点是否是断路拦截类异常，可以自定义)</li><li>当请求未发生异常，切且有结果返回时</li></ol></blockquote><h1 id="ServiceInstance"><a href="#ServiceInstance" class="headerlink" title="ServiceInstance"></a>ServiceInstance</h1><p>在通过<code>ZoneAwareLoadBalancer</code>的<code>chooseServer</code>函数获取了负载均衡策略分配到的服务实例对象<code>Server</code>之后，将其内容包装成<code>RibbonServer</code>对象（该对象除了存储了服务实例的信息之外，还增加了服务名serviceId、是否需要使用HTTPS等其他信息），然后使用该对象再回调<code>LoadBalancerInterceptor</code>请求拦截器中<code>LoadBalancerRequest</code>的<code>apply(final ServiceInstance instance)</code>函数，向一个实际的具体服务实例发起请求，从而实现一开始以服务名为host的URI请求，到实际访问host:post形式的具体地址的转换。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServiceInstance</span> <span class="token punctuation">{</span>    String <span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isSecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    URI <span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>包装<code>Server</code>服务实例的<code>RibbonServer</code>对象就是<code>ServiceInstance</code>接口的实现，可以看到它除了包含了<code>Server</code>对象之外，还存储了服务名、是否使用https标识以及一个Map类型的元数据集合。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RibbonServer</span> <span class="token keyword">implements</span> <span class="token class-name">ServiceInstance</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String serviceId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Server server<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> secure<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> metadata<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">RibbonServer</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> Server server<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span>&lt;String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">RibbonServer</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> Server server<span class="token punctuation">,</span> <span class="token keyword">boolean</span> secure<span class="token punctuation">,</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serviceId <span class="token operator">=</span> serviceId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>server <span class="token operator">=</span> server<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secure <span class="token operator">=</span> secure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>metadata <span class="token operator">=</span> metadata<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略实现ServiceInstance的一些获取Server信息的get函数</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><code>apply(final ServiceInstance instance)</code>函数，在接收到了具体<code>ServiceInstance</code>实例后,通过<code>LoadBalancerClient</code>接口中的<code>reconstructURI</code>操作来组织具体请求地址。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> ClientHttpResponse <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">final</span> ServiceInstance instance<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    HttpRequest serviceRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> execution<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>serviceRequest<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从<code>apply</code>的实现中，我们可以看到它具体执行的时候，还传入了<code>ServiceRequestWrapper</code>对象，该对象继承了<code>HttpRequestWrapper</code>并重写了<code>getURI</code>函数，重写后的<code>getURI</code>会通过调用<code>LoadBalancerClient</code>接口的<code>reconstructURI</code>函数来重新构建一个URI来进行访问。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ServiceRequestWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpRequestWrapper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ServiceInstance instance<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> URI <span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        URI uri <span class="token operator">=</span> LoadBalancerInterceptor<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer<span class="token punctuation">.</span><span class="token function">reconstructURI</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">,</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> uri<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>RibbonLoadBalancerClient</code>中实现的<code>reconstructURI</code>来组织具体请求的服务实例地址。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> URI <span class="token function">reconstructURI</span><span class="token punctuation">(</span>ServiceInstance instance<span class="token punctuation">,</span> URI original<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token string">"instance can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String serviceId <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RibbonLoadBalancerContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientFactory            <span class="token punctuation">.</span><span class="token function">getLoadBalancerContext</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    Server server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> secure <span class="token operator">=</span> <span class="token function">isSecure</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    URI uri <span class="token operator">=</span> original<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>secure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        uri <span class="token operator">=</span> UriComponentsBuilder<span class="token punctuation">.</span><span class="token function">fromUri</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheme</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">reconstructURIWithServer</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从<code>reconstructURI</code>函数中，我们可以看到，它通过<code>ServiceInstance</code>实例对象的<code>serviceId</code>，从<code>SpringClientFactory</code>类的<code>clientFactory</code>对象中获取对应<code>serviceId</code>的负载均衡器的上下文<code>RibbonLoadBalancerContext</code>对象。然后根据<code>ServiceInstance</code>中的信息来构建具体服务实例信息的<code>Server</code>对象，并使用<code>RibbonLoadBalancerContext</code>对象的<code>reconstructURIWithServer</code>函数来构建服务实例的URI。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/2、Ribbon/2、Ribbon原理概览</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/2-ribbon/2-ribbon-yuan-li-gai-lan/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/2-ribbon/2-ribbon-yuan-li-gai-lan/</url>
      
        <content type="html"><![CDATA[<ul><li>项目启动的时候会自动的为我们加载<code>LoadBalancerAutoConfiguration</code>自动配置类，该自动配置类初始化条件是要求classpath必须要有<code>RestTemplate</code>这个类，必须要有<code>LoadBalancerClient</code>实现类。</li><li><code>LoadBalancerAutoConfiguration</code>为我们干了二件事，第一件是创建了<code>LoadBalancerInterceptor</code>拦截器bean，用于实现对客户端发起请求时进行拦截，以实现客户端负载均衡。创建了一个<br><code>RestTemplateCustomizer</code>的bean，用于给<code>RestTemplate</code>增加<code>LoadBalancerInterceptor</code>拦截器。</li><li>每次请求的时候都会执行<code>org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor</code>的<code>intercept</code>方法，而<code>LoadBalancerInterceptor</code>具有<code>LoadBalancerClient</code>（客户端负载客户端）实例的一个引用，<br>在拦截器中通过方法获取服务名的请求url（比如<code>http://user-service/user</code>），及服务名（比如user-service），然后调用负载均衡客户端的execute方法。</li><li>执行负载客户端<code>RibbonLoadBalancerClient</code>（LoadBalancerClient的实现）的<code>execute</code>方法，得到<code>ILoadBalancer</code>（负载均衡器）的实现<code>ZoneAwareLoadBalancer</code>，并且通过调用其<code>chooseServer</code>方法获得服务列表中的一个实例，比如说user-service列表注册到eureka中一个实例。然后向其中的一个具体实例发起请求，得到结果。</li></ul><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304104604.png" alt="img"></p><p>RestTemplate 是Spring自己封装的http请求的客户端，也就是说它只能发送一个正常的Http请求,这跟我们要求的负载均衡是有出入的，还有就是这个请求的链接上的域名是我们微服的一个服务名，而不是一个真正的域名，那它是怎么实现负载均衡功能的呢？<br>我们来看看RestTemplate的父类InterceptingHttpAccessor。</p><h1 id="加载配置类"><a href="#加载配置类" class="headerlink" title="加载配置类"></a>加载配置类</h1><p>org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration</p><p>Ribbon将所有标记<code>@LoadBalanced</code>注解的<code>RestTemplate</code>保存到一个List集合当中。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@LoadBalanced</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>RestTemplate<span class="token operator">></span> restTemplates <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该自动化配置主要完成了三件事</p><ul><li>创建了一个<code>LoadBalancerInterceptor</code>的bean，用于实现对客户端发起请求时进行拦截，以实现客户端负载均衡。</li><li>创建了一个<code>RestTemplateCustomizer</code>的bean，用于给RestTemplate增加<code>LoadBalancerInterceptor</code>拦截器。</li><li>维护了一个被<code>@LoadBalanced</code>注解修饰的<code>RestTemplate</code>对象列表，并在这里进行维护，通过调用<code>RestTemplateCustomizer</code>的实例来给需要的客户端负载均衡的<code>RestTemplate</code>增加<code>LoadBalancerInterceptor</code>拦截器。</li></ul><h1 id="RestTemplate添加一个拦截器"><a href="#RestTemplate添加一个拦截器" class="headerlink" title="RestTemplate添加一个拦截器"></a>RestTemplate添加一个拦截器</h1><p>RestTemplate添加拦截器需要有两个步骤，首先是定义一个拦截器，其次是将定义的拦截器添加到RestTemplate中。</p><h2 id="定义一个拦截器"><a href="#定义一个拦截器" class="headerlink" title="定义一个拦截器"></a>定义一个拦截器</h2><p>实现<code>ClientHttpRequestInterceptor</code>接口就具备了拦截请求的功能，org.springframework.http.client.ClientHttpRequestInterceptor</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClientHttpRequestInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *实现该方法，在该方法内完成拦截请求后的逻辑内容。     *对于ribbon而言，在该方法内完成了根据具体规则从     *服务集群中选取一个服务，并向该服务发起请求的操作。     */</span>   ClientHttpResponse <span class="token function">intercept</span><span class="token punctuation">(</span>HttpRequest request<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">,</span> ClientHttpRequestExecution execution<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ribbon中对应的实现类是<code>LoadBalancerInterceptor</code>(不使用<code>spring-retry</code>的情况下)</p><p>org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ClientHttpRequestInterceptor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> LoadBalancerClient loadBalancer<span class="token punctuation">;</span>   <span class="token keyword">private</span> LoadBalancerRequestFactory requestFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> ClientHttpResponse <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">final</span> HttpRequest request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">,</span>         <span class="token keyword">final</span> ClientHttpRequestExecution execution<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">final</span> URI originalUri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String serviceName <span class="token operator">=</span> originalUri<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       *拦截请求，并调用loadBalancer.execute()方法       *在该方法内部完成server的选取。向选取的server       *发起请求，并获得返回结果。       */</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> requestFactory<span class="token punctuation">.</span><span class="token function">createRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">,</span> execution<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="将拦截器添加到RestTemplate中"><a href="#将拦截器添加到RestTemplate中" class="headerlink" title="将拦截器添加到RestTemplate中"></a>将拦截器添加到RestTemplate中</h2><p><code>RestTemplate</code>继承了<code>InterceptingHttpAccessor</code>，在<code>InterceptingHttpAccessor</code>中提供了获取以及添加拦截器的方法</p><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304104704.png" alt="image-20210103000307235"></p><p>org.springframework.http.client.support.InterceptingHttpAccessor</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InterceptingHttpAccessor</span> <span class="token keyword">extends</span> <span class="token class-name">HttpAccessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 所有的拦截器是以一个List集合形式进行保存。     */</span>   <span class="token keyword">private</span> List<span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 设置拦截器。    */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInterceptors</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> interceptors<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获取当前的拦截器。    */</span>   <span class="token keyword">public</span> List<span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span> <span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> interceptors<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span></code></pre><p>通过这两个方法我们就可以将刚才定义的<code>LoadBalancerInterceptor</code>添加到有<code>@LoadBalanced</code>注解标识的<code>RestTemplate</code>中</p><p>org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration.LoadBalancerInterceptorConfig</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 创建Ribbon自定义拦截器LoadBalancerInterceptor     * 创建前提是当前classpath下不存在spring-retry。     * 所以LoadBalancerInterceptor是默认的Ribbon拦截     * 请求的拦截器。     */</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"org.springframework.retry.support.RetryTemplate"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerInterceptorConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建负载均衡拦截器</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> LoadBalancerInterceptor <span class="token function">loadBalancerInterceptor</span><span class="token punctuation">(</span>         LoadBalancerClient loadBalancerClient<span class="token punctuation">,</span>         LoadBalancerRequestFactory requestFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerInterceptor</span><span class="token punctuation">(</span>loadBalancerClient<span class="token punctuation">,</span> requestFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将拦截器添加到restTemplate中</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> RestTemplateCustomizer <span class="token function">restTemplateCustomizer</span><span class="token punctuation">(</span>         <span class="token keyword">final</span> LoadBalancerInterceptor loadBalancerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> restTemplate <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>               restTemplate<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loadBalancerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>         restTemplate<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**      * 获取所有带有@LoadBalanced注解的restTemplate     */</span>   <span class="token annotation punctuation">@LoadBalanced</span>   <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> List<span class="token operator">&lt;</span>RestTemplate<span class="token operator">></span> restTemplates <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建SmartInitializingSingleton接口的实现类。Spring会在所有     * 单例Bean初始化完成后回调该实现类的afterSingletonsInstantiated()     * 方法。在这个方法中会为所有被@LoadBalanced注解标识的     * RestTemplate添加ribbon的自定义拦截器LoadBalancerInterceptor。     */</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> SmartInitializingSingleton <span class="token function">loadBalancedRestTemplateInitializer</span><span class="token punctuation">(</span>         <span class="token keyword">final</span> List<span class="token operator">&lt;</span>RestTemplateCustomizer<span class="token operator">></span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>RestTemplate restTemplate <span class="token operator">:</span> LoadBalancerAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>restTemplates<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span>RestTemplateCustomizer customizer <span class="token operator">:</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Ribbon选取server原理概览"><a href="#Ribbon选取server原理概览" class="headerlink" title="Ribbon选取server原理概览"></a>Ribbon选取server原理概览</h1><p>当发起请求时ribbon会用<code>LoadBalancerInterceptor</code>这个拦截器进行拦截。在该拦截器中会调用<code>LoadBalancerClient.execute()</code>方法</p><p>org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor#intercept</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ClientHttpResponse <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">final</span> HttpRequest request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">,</span>      <span class="token keyword">final</span> ClientHttpRequestExecution execution<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>   <span class="token keyword">final</span> URI originalUri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String serviceName <span class="token operator">=</span> originalUri<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>serviceName <span class="token operator">!=</span> null<span class="token punctuation">,</span>         <span class="token string">"Request URI does not contain a valid hostname: "</span> <span class="token operator">+</span> originalUri<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>requestFactory<span class="token punctuation">.</span><span class="token function">createRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">,</span> execution<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>负载均衡客户端</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   *创建loadBalancer的过程可以理解为组装选取服务的规则(IRule)、   *服务集群的列表(ServerList)、检验服务是否存活(IPing)等特性   *的过程(加载RibbonClientConfiguration这个配置类)，需要注意   *的是这个过程并不是在启动时进行的，而是当有请求到来时才会处理。   */</span>   ILoadBalancer loadBalancer <span class="token operator">=</span> <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 根据ILoadBalancer来选取具体的一个Server。    * 选取的过程是根据IRule、IPing、ServerList    * 作为参照。    */</span>   Server server <span class="token operator">=</span> <span class="token function">getServer</span><span class="token punctuation">(</span>loadBalancer<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No instances available for "</span> <span class="token operator">+</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   RibbonServer ribbonServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RibbonServer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token function">isSecure</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span>         serviceId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">serverIntrospector</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">execute</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> ribbonServer<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个<code>ILoadBalancer</code>是Ribbon的核心类。可以理解成它包含了选取服务的规则(<code>IRule</code>)、服务集群的列表(<code>ServerList</code>)、检验服务是否存活(<code>IPing</code>)等特性，同时它也具有了根据这些特性从服务集群中选取具体一个服务的能力。</p><p>最终调用了内部的<code>execute</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> ServiceInstance serviceInstance<span class="token punctuation">,</span> LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//发起调用</span>      T returnVal <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>serviceInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>      statsRecorder<span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span>returnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      statsRecorder<span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      statsRecorder<span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      ReflectionUtils<span class="token punctuation">.</span><span class="token function">rethrowRuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Spring/SpringCloud/SpringCloud远程调用/2、Ribbon/1、Ribbon 的简单使用</title>
      <link href="2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/2-ribbon/1-ribbon-de-jian-dan-shi-yong/"/>
      <url>2021/01/12/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/2-ribbon/1-ribbon-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Ribbon功能介绍"><a href="#Ribbon功能介绍" class="headerlink" title="Ribbon功能介绍"></a>Ribbon功能介绍</h1><p>Ribbon是一个部署在调用端并在生产的云服务项目中经过考验的进程间通信库。Ribbon主要提供</p><ul><li>客户端负载均衡</li><li>容错处理</li><li>支持多协议的异步通信。支持HTTP、TCP、UDP协议。</li><li>支持缓存和批量处理</li></ul><p>Ribbon模块介绍：</p><ul><li>ribbon: Ribbon功能应用入口。使用Ribbon的功能可以通过初始化应用入口，调用接口实现。该模块依赖其他模版实现所需功能，比如容错处理ribbon依赖Histrix。</li><li>ribbon-loadbalancer:负载均衡功能入口。如果仅需要负载均衡功能，可以使用单独使用该模块。</li><li>ribbon-eureka:基于Eureka客户端实现可用服务列表管理</li><li>ribbon-transport: 具备客户端负载均衡能力的，基于RxNetty框架能够支持HTTP、TCP、UDP协议的通信客户端。</li><li>ribbon-httpclient: 具备客户端负载均衡能力的，基于Apache HttpClient，支持REST风格的HTTP请求客户端。</li><li>ribbon-core: 该模块为Ribbon项目的核心，主要包括负载均衡器接口定义、客户端接口定义、内置的负载均衡实现等API</li></ul><p>ribbon包主要依赖了ribbon-transport 和 hystrix-core两个组件。</p><p>Ribbon 的负载均衡器主要是与集群中的各个服务器进行通信，因此负载均衡器需要提供维护服务器IP、DNS名称等信息、根据特定逻辑在服务器列表中循环的功能，为了实现这些功能 Ribbon 的负载均衡器提供了以下三大模块：</p><ul><li>Rule：该组件用于处理从服务器列表中选择那个服务器实例</li><li>Ping：该组件主要用定时器来确保服务器网络可以连接</li><li>ServerList：服务器列表，可以通过静态的配置确定负载的服务器，也可以动态指定服务器列表，如果动态指定服务器列表，则会有后台线程来刷新该列表</li></ul><h1 id="单独使用Ribbon"><a href="#单独使用Ribbon" class="headerlink" title="单独使用Ribbon"></a>单独使用Ribbon</h1><p>在使用 Ribbon 时，可以使用配置也可以使用代码设置配置项，需要使用代码来设置配置项，示例代码如下：</p><pre class=" language-java"><code class="language-java">ConfigurationManager<span class="token punctuation">.</span><span class="token function">getConfigInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"MyRibbonClient.ribbon.listOfServers"</span><span class="token punctuation">,</span><span class="token string">"localhost:8080,localhost:8002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ribbon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ConfigurationManager<span class="token punctuation">.</span><span class="token function">loadCascadedPropertiesFromResources</span><span class="token punctuation">(</span><span class="token string">"ribbon-client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ILoadBalancer loadBalancer <span class="token operator">=</span> ClientFactory<span class="token punctuation">.</span><span class="token function">getNamedLoadBalancer</span><span class="token punctuation">(</span><span class="token string">"MyRibbonClient"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRule chooseRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoundRobinRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chooseRule<span class="token punctuation">.</span><span class="token function">setLoadBalancer</span><span class="token punctuation">(</span>loadBalancer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Server server <span class="token operator">=</span> chooseRule<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"request"</span> <span class="token operator">+</span> server<span class="token punctuation">.</span><span class="token function">getHostPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>增加配置文件</p><p>在 src/main/resources 目录创建 ribbon-client.properties 文件，并增加配置项，配置如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">MyRibbonClient.ribbon.listOfServers</span><span class="token punctuation">=</span><span class="token attr-value">localhost:8080,localhost:8002</span></code></pre><h1 id="SpringCloud中使用示例"><a href="#SpringCloud中使用示例" class="headerlink" title="SpringCloud中使用示例"></a>SpringCloud中使用示例</h1><p>Ribbon有两种方式获取，第一种是通过<code>Eureka</code>(注册中心)，这种方式需要使用ribbon的工程是一个Eureka Client也就是说需要在工程的主函数上使用(<code>@EnableDiscoveryClient</code>),第二种方式是通过<code>properties</code>进行配置。</p><h2 id="添加对应依赖"><a href="#添加对应依赖" class="headerlink" title="添加对应依赖"></a>添加对应依赖</h2><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h2 id="定义配置类"><a href="#定义配置类" class="headerlink" title="定义配置类"></a>定义配置类</h2><pre><code>@Configurationpublic class RibbonConfig {    @LoadBalanced    @Bean    public RestTemplate restTemplate() {        return new RestTemplate();    }}</code></pre><p><code>@LoadBalanced</code>该注解使得<code>RestTemplate</code>具有了客户端负载均衡的能力。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class=" language-yml"><code class="language-yml">users:  ribbon:    listOfServers: localhost:8080,localhost:8081spring:  application:    name: ribbonserver:  port: 8083</code></pre><p>users.ribbon.listOfServers这个参数很关键，它的含义是指定服务(集群)的地址，其中users是自定义的Key。本文中有两个相同的服务，它们的地址分别为<a href="http://localhost:8081以及http://localhost:8080">http://localhost:8081以及http://localhost:8080</a></p><h2 id="定义一个Controller-Ribbon-Client端"><a href="#定义一个Controller-Ribbon-Client端" class="headerlink" title="定义一个Controller(Ribbon-Client端)"></a>定义一个Controller(Ribbon-Client端)</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String URL <span class="token operator">=</span> <span class="token string">"http://users/hello"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/ribbon"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">ribbon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>DemoController<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="Spring-Cloud-Ribbon-和-Netflix-Ribbon"><a href="#Spring-Cloud-Ribbon-和-Netflix-Ribbon" class="headerlink" title="Spring Cloud Ribbon 和 Netflix Ribbon"></a>Spring Cloud Ribbon 和 Netflix Ribbon</h1><ol><li>Spring Cloud Ribbon是在Netflix Ribbon的基础上做了进一步的封装，使它更加适合与微服。</li><li>在用法上Spring Cloud Ribbon的路由的服务清单是根据”注册中心”微服列表来的会实时更新，Netflix Ribbon需要手动设置。</li><li>Spring Cloud Ribbon的均衡器使用的是Netflix Ribbon的ZoneAwareLoadBalancer</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自学计算机课程</title>
      <link href="2020/12/28/cheng-xu-she-ji/zi-xue-ji-suan-ji-ke-cheng/"/>
      <url>2020/12/28/cheng-xu-she-ji/zi-xue-ji-suan-ji-ke-cheng/</url>
      
        <content type="html"><![CDATA[<p>做个搬运工，TeachYourselfCS的中文版，资源+攻略，包括书视频等等。英文原地址：<a href="https://teachyourselfcs.com/" target="_blank" rel="noopener">Teach Yourself Computer Science</a></p><p><em>以下为搬运的翻译版本：</em></p><h2 id="自学计算机科学"><a href="#自学计算机科学" class="headerlink" title="自学计算机科学"></a>自学计算机科学</h2><p>如果你是一个自学成才的工程师，或者从编程培训班毕业，那么你很有必要学习计算机科学。幸运的是，不必为此花上数年光阴和不菲费用去攻读一个学位：仅仅依靠自己，你就可以获得世界一流水平的教育 。</p><p>互联网上，到处都有许多的学习资源，然而精华与糟粕并存。你所需要的，不是一个诸如“200+免费在线课程”的清单，而是以下问题的答案：</p><ul><li>你应当学习<strong>哪些科目</strong>，为什么？</li><li>对于这些科目，<strong>最好的书籍或者视频课程</strong>是什么？</li></ul><p><em>另外对于计算机科学的同学重中之重还是编程，不管你以后做什么，编程的基本功绝对不能落下，我当初是先学的C++，但是我现在常用的是Python，因为更加适合做普通的数据分析等等，在这里推荐一个很好用的入门课程，仅需3.9元，就能带你过一遍基础。</em></p><p>简而言之</p><p>大致按照列出的顺序，借助我们所建议的教材或者视频课程（但是最好二者兼用），学习如下的九门科目。目标是先花100到200个小时学习完每一个科目，然后在你职业生涯中，不时温习其中的精髓 。</p><table><thead><tr><th>科目</th><th>为何要学？</th><th>最佳书籍</th><th>最佳视频</th></tr></thead><tbody><tr><td>编程</td><td>不要做一个“永远没彻底搞懂”诸如递归等概念的程序员。</td><td>《计算机程序的构造和解释》</td><td>Brian Harvey’s Berkeley CS 61A</td></tr><tr><td>计算机架构</td><td>如果你对于计算机如何工作没有具体的概念，那么你所做出的所有高级抽象都是空中楼阁。</td><td>《深入理解计算机系统》</td><td>Berkeley CS 61C</td></tr><tr><td>算法与数据结构</td><td>如果你不懂得如何使用栈、队列、树、图等常见数据结构，遇到有难度的问题时，你将束手无策。</td><td>《算法设计手册》</td><td>Steven Skiena’s lectures</td></tr><tr><td>数学知识</td><td>计算机科学基本上是应用数学的一个“跑偏的”分支，因此学习数学将会给你带来竞争优势。</td><td>《计算机科学中的数学》</td><td>Tom Leighton’s MIT 6.042J</td></tr><tr><td>操作系统</td><td>你所写的代码，基本上都由操作系统来运行，因此你应当了解其运作的原理。</td><td>《操作系统导论》</td><td>Berkeley CS 162</td></tr><tr><td>计算机网络</td><td>互联网已然势不可挡：理解工作原理才能解锁全部潜力。</td><td>《计算机网络：自顶向下方法》</td><td>Stanford CS 144</td></tr><tr><td>数据库</td><td>对于多数重要程序，数据是其核心，然而很少人理解数据库系统的工作原理。</td><td>《Readings in Database Systems》 （暂无中译本）</td><td>Joe Hellerstein’s Berkeley CS 186</td></tr><tr><td>编程语言与编译器</td><td>若你懂得编程语言和编译器如何工作，你就能写出更好的代码，更轻松地学习新的编程语言。</td><td>《Crafting Interpreters》</td><td>Alex Aiken’s course on Lagunita</td></tr><tr><td>分布式系统</td><td>如今，多数 系统都是分布式的。</td><td>《数据密集型应用系统设计》</td><td>MIT 6.824</td></tr></tbody></table><h2 id="还是太多？"><a href="#还是太多？" class="headerlink" title="还是太多？"></a>还是太多？</h2><p>如果花几年时间自学9门科目让人望而却步，我们建议你只专注于两本书：<em>《深入理解计算机系统》</em>和<em>《数据密集型应用系统设计》</em>。根据我们的经验，投入到这两本书的时间可以获得极高的回报率，特别适合从事网络应用开发的自学工程师。这两本书也可以作为上面表格中其他科目的纲领。</p><h2 id="为什么要学习计算机科学？"><a href="#为什么要学习计算机科学？" class="headerlink" title="为什么要学习计算机科学？"></a>为什么要学习计算机科学？</h2><p>软件工程师分为两种：一种充分理解了计算机科学，从而有能力应对充满挑战的创造性工作；另一种仅仅凭着对一些高级工具的熟悉而勉强应付。</p><p>这两种人都自称软件工程师，都能在职业生涯早期挣到差不多的工资。然而，随着时间流逝，第一种工程师不断成长，所做的事情将会越来越有意义且更为高薪，不论是有价值的商业工作、突破性的开源项目、技术上的领导力或者高质量的个人贡献。</p><p>全球短信系统每日收发约200亿条信息，而仅仅靠57名工程师，现在的 WhatsApp 每日收发420亿条。</p><p>— Benedict Evans (@BenedictEvans) <a href="https://twitter.com/BenedictEvans/status/694342874729545729" target="_blank" rel="noopener">2016年2月2日</a></p><p>第一种工程师总是寻求深入学习计算机科学的方法，或是通过传统的方法学习，或是在职业生涯中永无止息地学习；第二种工程师 通常浮于表面，只学习某些特定的工具和技术，而不研究其底层的基本原理，仅仅在技术潮流的风向改变时学习新的技能。</p><p>如今，涌入计算机行业的人数激增，然而计算机专业的毕业生数量基本上未曾改变。第二种工程师的供过于求正在开始减少他们的工作机会，使他们无法涉足行业内更加有意义的工作。对你而言，不论正在努力成为第一种工程师，还是只想让自己的职业生涯更加安全，学习计算机科学是唯一可靠的途径。</p><p>23333 然而他们… <a href="https://t.co/XVNYlXAHar" target="_blank" rel="noopener">pic.twitter.com/XVNYlXAHar</a></p><p>— Jenna Bilotta (@jenna) <a href="https://twitter.com/jenna/status/838161631662092289" target="_blank" rel="noopener">2017年3月4日</a></p><h2 id="分科目指引"><a href="#分科目指引" class="headerlink" title="分科目指引"></a>分科目指引</h2><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>大多数计算机专业本科教学以程序设计“导论”作为开始。这类课程的最佳版本不仅能满足初学者的需要，还适用于那些在初学编程阶段遗漏了某些有益的概念和程序设计模式的人。</p><p>对于这部分内容，我们的标准推荐是这部经典著作：<a href="https://book.douban.com/subject/1148282/" target="_blank" rel="noopener">《计算机程序的构造和解释》</a>。在网络上，这本书既可供<a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html" target="_blank" rel="noopener">免费阅读（英文版）</a>，也作为<a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/" target="_blank" rel="noopener">MIT的免费视频课程</a>。不过尽管这些视频课程很不错，我们对于视频课程的推荐实际上是<a href="https://archive.org/details/ucberkeley-webcast-PL3E89002AA9B9879E?sort=titleSorter" target="_blank" rel="noopener">Brian Harvey 开设的 SICP 课程</a>（即 Berkeley 的 61A 课程）。比起MIT的课程，它更加完善，更适用于初学者。</p><p>我们建议至少学完SICP的前三章，并完成配套的习题。如果需要额外的练习，可以去解决一些小的程序设计问题，比如<a href="http://exercism.io/" target="_blank" rel="noopener">exercism</a>。</p><p><strong>中文翻译新增：</strong></p><ul><li>关于SICP国内视频观看地址</li><li><a href="https://www.bilibili.com/video/av8515129/" target="_blank" rel="noopener">MIT的免费视频课程（中英字幕）</a></li><li><a href="https://www.bilibili.com/video/av40460492/" target="_blank" rel="noopener">Brian Harvey 开设的 SICP 课程（英文字幕）</a></li><li>Scheme 学习的相关资源参见：<a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="noopener">https://github.com/DeathKing/Learning-SICP</a></li></ul><p>自从 2016 年首次发布这份指南以来，最常被问到的一个问题是，我们是否推荐由 John DeNero 讲授的更新的 CS 61A 课程，以及配套的书籍 <a href="https://composingprograms.com/" target="_blank" rel="noopener">《Composing Programs》</a>，这本书“继承自 SICP” 但使用 Python 讲解。我们认为 DeNero 的课程也很不错，有的学生可能更喜欢，但我们还是建议把 SICP, Scheme 和 Brian Harvey 的视频课程作为首选。</p><p>为什么这么说呢？因为 SICP 是独一无二的，它可以——至少很有可能——改变你对计算机和编程的基本认识。不是每个人都有这样的体验。有的人讨厌这本书，有的人看了前几页就放弃了。但潜在的回报让它值得一读。</p><p>如果你觉得SICP过于难，试试 <em>《Composing Programs》</em>。如果还是不合适，那我们推荐 <em>《程序设计方法》（</em><a href="https://book.douban.com/subject/1140942/" target="_blank" rel="noopener">中文版</a><em>，</em><a href="http://www.htdp.org/" target="_blank" rel="noopener">英文版</a><em>）</em> ；如果你觉得SICP过于简单，那我们推荐 <a href="https://book.douban.com/subject/1782316/" target="_blank" rel="noopener">《Concepts, Techniques, and Models of Computer Programming》</a> 。如果读这些书让你觉得没有收获，也许你应该先学习其他科目，一两年后再重新审视编程的理念。</p><p>新版原文删除了对 <em>《Concepts, Techniques, and Models of Computer Programming》</em> 一书的推荐，但这本书对各种编程模型有深入的见解，值得一读。所以译文中依然保留。 — 译者注</p><p>最后，有一点要说明的是：本指南<strong>不适用</strong>于完全不懂编程的新手。我们假定你是一个没有计算机专业背景的程序员，希望填补一些知识空白。事实上，我们把“编程”章节包括进来只是提醒你还有更多知识需要学习。对于那些从来没有学过编程，但又想学的人来说，这份[指南](<a href="https://www.reddit.com/r/learnprogramming/wiki/faq&quot;" target="_blank" rel="noopener">https://www.reddit.com/r/learnprogramming/wiki/faq&quot;</a> \l “wiki_getting_started)更合适。</p><p><a href="https://book.douban.com/subject/1148282/" target="_blank" rel="noopener">计算机程序的构造和解释</a></p><h3 id="计算机架构"><a href="#计算机架构" class="headerlink" title="计算机架构"></a>计算机架构</h3><p>计算机架构——有时候又被称为“计算机系统”或者“计算机组成”——是了解软件底层的的重要视角。根据我们的经验，这是自学的软件工程师最容易忽视的领域。</p><p>我们最喜欢的入门书是 <a href="https://book.douban.com/subject/26912767/" target="_blank" rel="noopener">《深入理解计算机系统》</a>。典型的<a href="http://csapp.cs.cmu.edu/3e/courses.html" target="_blank" rel="noopener">计算机体系结构导论课程</a>会涵盖本书的 1 - 6 章。</p><p>我们喜爱《深入理解计算机系统》，因为它的实用性，并且站在程序员的视角。虽然计算机体系结构的内容比本书所涉及的内容多得多，但对于那些想了解计算机系统以求编写更快、更高效、更可靠的软件的人来说，这本书是很好的起点。</p><p>对于那些既想了解这个主题又想兼顾硬件和软件的知识的人来说，我们推荐 <a href="https://book.douban.com/subject/1998341/" target="_blank" rel="noopener">《计算机系统要素》</a>，又名“从与非门到俄罗斯方块”（“Nand2Tetris”），这本书规模宏大，让读者对计算机内的所有部分如何协同工作有完全的认识。这本书的每一章节对应如何构建计算机整体系统中的一小部分，从用HDL（硬件描述语言）写基本的逻辑门电路出发，途经CPU和汇编，最终抵达诸如俄罗斯方块这般规模的应用程序。</p><p>我们推荐把此书的前六章读完，并完成对应的项目练习。这么做，你将更加深入地理解，计算机架构和运行其上的软件之间的关系。</p><p>这本书的前半部分（包括所有对应的项目）均可从<a href="http://www.nand2tetris.org/" target="_blank" rel="noopener">Nand2Tetris的网站上</a>免费获得。同时，在Coursera上，这是一门<a href="https://www.coursera.org/learn/build-a-computer" target="_blank" rel="noopener">视频课程</a>。</p><p>为了追求简洁和紧凑，这本书牺牲了内容上的深度。尤其值得注意的是，流水线和存储层次结构是现代计算机架构中极其重要的两个概念，然而这本书对此几乎毫无涉及。</p><p>当你掌握了Nand2Tetris的内容后，我们推荐要么回到《深入理解计算机系统》，或者考虑Patterson和Hennessy二人所著的 <a href="https://book.douban.com/subject/26604008/" target="_blank" rel="noopener">《计算机组成与设计》</a>，一本优秀的经典著作。这本书中的不同章节重要程度不一，因此我们建议根据Berkeley的<a href="http://inst.eecs.berkeley.edu/~cs61c/sp15/" target="_blank" rel="noopener">CS61C课程</a> “计算机架构中的伟大思想”来着重阅读一些章节。这门课的笔记和实验在网络上可以免费获得，并且在<a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_" target="_blank" rel="noopener">互联网档案</a>中有这门课程的过往资料。</p><p><a href="https://book.douban.com/subject/26912767/" target="_blank" rel="noopener">深入理解计算机系统</a> <a href="http://www.nand2tetris.org/" target="_blank" rel="noopener">计算机系统要素</a></p><p>硬件是平台。</p><p>— Mike Acton, Engine Director at Insomniac Games (<a href="https://www.youtube.com/watch?v=rX0ItVEVjHc" target="_blank" rel="noopener">观看他在CppCon上的演说</a>)</p><h3 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h3><p>正如几十年来的共识，我们认为，计算机科学教育所赋予人们的最大能量在于对常见算法和数据结构的熟悉。此外，这也可以训练一个人对于各种问题的解决能力，有助于其他领域的学习。</p><p>关于算法与数据结构，有成百上千的书可供使用，但是我们的最爱是Steven Skiena编写的 <a href="https://book.douban.com/subject/4048566/" target="_blank" rel="noopener">《算法设计手册》</a>。显而易见，他对此充满热爱，迫不及待地想要帮助其他人理解。在我们看来，这本书给人一种焕然一新的体验，完全不同于那些更加经常被推荐的书（比如Cormen，Leiserson，Rivest 和 Stein，或者 Sedgewick的书，后两者充斥着过多的证明，不适合以 <em>解决问题</em> 为导向的学习）。</p><p>如果你更喜欢视频课程，<a href="https://www.youtube.com/watch?v=A2bFN3MyNDA&list=PLOtl7M3yp-DX32N0fVIyvn7ipWKNGmwpp" target="_blank" rel="noopener">Skiena慷慨地提供了他的课程</a>。此外，Tim Roughgarden的课程也很不错， 在Stanford的MOOC平台Lagunita，或者<a href="https://www.coursera.org/specializations/algorithms" target="_blank" rel="noopener">Coursera</a>上均可获得。Skiena和Roughgarden的这两门课程没有优劣之分，选择何者取决于个人品味。</p><p>至于练习，我们推荐学生在<a href="https://leetcode.com/" target="_blank" rel="noopener">Leetcode</a>上解决问题。Leetcode上的问题往往有趣且带有良好的解法和讨论。此外，在竞争日益激烈的软件行业，这些问题可以帮助你评估自己应对技术面试中常见问题的能力。我们建议解决大约100道随机挑选的Leetcode问题，作为学习的一部分。</p><p>最后，我们强烈推荐 <a href="https://book.douban.com/subject/2124114/" target="_blank" rel="noopener">《怎样解题》</a>。这本书极为优秀且独特，指导人们解决广义上的问题，因而一如其适用于数学，它适用于计算机科学。</p><p><a href="https://book.douban.com/subject/4048566/" target="_blank" rel="noopener">算法设计手册</a> <a href="https://book.douban.com/subject/2124114/" target="_blank" rel="noopener">怎样解题</a></p><p>我可以广泛推荐的方法只有一个： 写之前先思考。</p><p>— Richard Hamming</p><h3 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h3><p>从某个角度说，计算机科学是应用数学的一个“发育过度”的分支。尽管许多软件工程师试图——并且在不同程度上成功做到——忽视这一点，我们鼓励你用学习来拥抱数学。如若成功，比起那些没有掌握数学的人，你将获得巨大的竞争优势。</p><p>对于计算机科学，数学中最相关的领域是“离散数学”，其中的“离散”与“连续”相对立，大致上指的是应用数学中那些有趣的主题，而不是微积分之类的。由于定义比较含糊，试图掌握离散数学的全部内容是没有意义的。较为现实的学习目标是，了解逻辑、排列组合、概率论、集合论、图论以及密码学相关的一些数论知识。考虑到线性代数在计算机图形学和机器学习中的重要性，该领域同样值得学习。</p><p>学习离散数学，我们建议从<a href="http://www.cs.elte.hu/~lovasz/dmbook.ps" target="_blank" rel="noopener">László Lovász的课程笔记</a>开始。Lovász教授成功地让这些内容浅显易懂且符合直觉，因此，比起正式的教材，这更适合初学者。</p><p>对于更加高阶的学习，我们推荐 <a href="https://book.douban.com/subject/33396340/" target="_blank" rel="noopener">《计算机科学中的数学》</a>，MIT同名课程的课程笔记，篇幅与书籍相当（事实上，现已出版）。这门课程的视频同样<a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/video-lectures/" target="_blank" rel="noopener">可免费获得</a>，是我们所推荐的学习视频。</p><p>对于线性代数，我们建议从<a href="https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab" target="_blank" rel="noopener">Essence of linear algebra</a>系列视频开始，然后再去学习Gilbert Strang的<a href="https://book.douban.com/subject/34820335/" target="_blank" rel="noopener">《线性代数导论》</a>和<a href="https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/video-lectures/" target="_blank" rel="noopener">视频课程</a>。</p><p><a href="https://book.douban.com/subject/33396340/" target="_blank" rel="noopener">计算机科学中的数学</a></p><p>如果人们不相信数学是简单的，那么只能是因为他们没有意识到生活有多么复杂。</p><p>— John von Neumann</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><a href="https://book.douban.com/subject/30297919/" target="_blank" rel="noopener">《操作系统概念》</a> （“恐龙书”）和 <a href="https://book.douban.com/subject/27096665/" target="_blank" rel="noopener">《现代操作系统》</a> 是操作系统领域的经典书籍。二者都因为写作风格和对学生不友好而招致了一些批评。</p><p><a href="https://book.douban.com/subject/33463930/" target="_blank" rel="noopener">《操作系统导论》（Operating Systems: Three Easy Pieces）</a> 是一个不错的替代品，并且<a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener">可在网上免费获得（英文版）</a>。我们格外喜欢这本书的结构，并且认为这本书的习题很值得一做。</p><p>在读完《操作系统导论》后，我们鼓励你探索特定操作系统的设计。可以借助“{OS name} Internals”风格的书籍，比如 <a href="https://www.amazon.com/Lions-Commentary-Unix-John/dp/1573980137/" target="_blank" rel="noopener">Lion’s commentary on Unix</a>， <a href="https://www.amazon.com/Design-Implementation-FreeBSD-Operating-System/dp/0321968972/" target="_blank" rel="noopener">The Design and Implementation of the FreeBSD Operating System</a>，以及 <a href="https://www.amazon.com/Mac-OS-Internals-Systems-Approach/dp/0321278542/" target="_blank" rel="noopener">Mac OS X Internals</a>。对于 Linux ，我们推荐 Robert Love 的 <a href="https://book.douban.com/subject/6097773/" target="_blank" rel="noopener">《Linux内核设计与实现》</a>。</p><p>为了巩固对操作系统的理解，阅读小型系统内核的代码并且为其增加特性是一个很不错的方法。比如，<a href="https://pdos.csail.mit.edu/6.828/2016/xv6.html" target="_blank" rel="noopener">xv6</a>，由MIT的一门课程所维护的从Unix V6到ANSI C和x86的移植，就是一个很棒的选择。《操作系统导论》有一个附录，记载了一些可能的<a href="http://pages.cs.wisc.edu/~remzi/OSTEP/lab-projects-xv6.pdf" target="_blank" rel="noopener">xv6实验项目</a>，其中充满了关于潜在项目的很棒想法。</p><p><a href="https://book.douban.com/subject/33463930/" target="_blank" rel="noopener">操作系统导论</a></p><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>鉴于有那么多关于网络服务端和客户端的软件工程，计算机网络是计算机科学中价值最为“立竿见影”的领域之一。我们的学生，系统性地学习了计算机网络，最终能够理解那些曾困扰他们多年的术语、概念和协议。</p><p>在这一主题上，我们最爱的书籍是 <a href="https://book.douban.com/subject/30280001/" target="_blank" rel="noopener">《计算机网络：自顶向下方法》</a>。书中的小项目和习题相当值得练习，尤其是其中的“Wireshark labs”（<a href="http://www-net.cs.umass.edu/wireshark-labs/" target="_blank" rel="noopener">这部分在网上可以获得</a>）。</p><p>如果更喜欢视频课程，我们推荐Stanford的<a href="https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/about" target="_blank" rel="noopener">Introduction to Computer Networking</a>，可在他们的MOOC平台Lagunita上免费观看。</p><p>对于计算机网络的学习，做项目比完成小的习题更有益。一些可能的项目有：HTTP服务器，基于UDP的聊天APP，<a href="http://jvns.ca/blog/2014/08/12/what-happens-if-you-write-a-tcp-stack-in-python/" target="_blank" rel="noopener">迷你TCP栈</a>，代理，负载均衡器，或者分布式哈希表。</p><p><a href="https://book.douban.com/subject/30280001/" target="_blank" rel="noopener">《计算机网络：自顶向下方法》</a></p><p>你无法盯着水晶球预见未来，未来的互联网何去何从取决于社会。</p><p>— Bob Kahn</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>比起其他主题，自学数据库系统需要更多的付出。这是一个相对年轻的研究领域，并且出于很强的商业动机，研究者把想法藏在紧闭的门后。此外，许多原本有潜力写出优秀教材的作者反而选择了加入或创立公司。</p><p>鉴于如上情况，我们鼓励自学者大体上抛弃教材，而是从<a href="https://archive.org/details/UCBerkeley_Course_Computer_Science_186" target="_blank" rel="noopener">2015年春季学期的CS 186课程</a>（Joe Hellerstein在Berkeley的数据库课程）开始，然后前往阅读论文。</p><p>对于初学者，有一篇格外值得提及的论文：“<a href="http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf" target="_blank" rel="noopener">Architecture of a Database System</a>”。这篇论文提供了独特的对关系型数据库管理系统（RDBMS）如何工作的高层次观点，是后续学习的实用梗概。</p><p><a href="https://book.douban.com/subject/2256069/" target="_blank" rel="noopener">《Readings in Database Systems》</a>，或者以<a href="http://www.redbook.io/" target="_blank" rel="noopener">数据库“红书”</a>更为人知，是由Peter Bailis，Joe Hellerstein和Michael Stonebraker编纂的论文合集。对于那些想要在CS 186课程的水平更进一步的学习者，“红书”应当是下一步。</p><p>如果你坚持一定要一本导论教材，那我们推荐Ramakrishnan和Gehrke所著的 <a href="https://book.douban.com/subject/1155934/" target="_blank" rel="noopener">《数据库管理系统：原理与设计》</a>。如需更深一步，Jim Gray的经典著作 <a href="https://book.douban.com/subject/2586390/" target="_blank" rel="noopener">《Transaction Processing: Concepts and Techniques》</a> 值得一读，不过我们不建议把这本书当作首要资源。</p><p>如果没有编写足够数量的代码，很难巩固数据库理论。CS 186课程的学生给Spark添加特性，倒是不错的项目，不过我们仅仅建议从零实现一个简单的关系型数据库管理系统。自然，它将不会有太多的特性，但是即便只实现典型的关系型数据库管理系统每个方面最基础的功能，也是相当有启发的。</p><p>最后，数据模型往往是数据库中一个被忽视的、教学不充分的方面。关于这个主题，我们推荐的书籍是 <a href="https://book.douban.com/subject/17915870/" target="_blank" rel="noopener">Data and Reality: A Timeless Perspective on Perceiving and Managing Information in Our Imprecise World</a>。</p><p><a href="https://book.douban.com/subject/2256069/" target="_blank" rel="noopener">Readings in Database Systems</a> <a href="https://book.douban.com/subject/1155934/" target="_blank" rel="noopener">数据库管理系统：原理与设计</a></p><h3 id="编程语言与编译器"><a href="#编程语言与编译器" class="headerlink" title="编程语言与编译器"></a>编程语言与编译器</h3><p>多数程序员学习编程语言的知识，而多数计算机科学家学习编程语言 <em>相关</em> 的知识。这使得计算机科学家比起程序员拥有显著的优势，即便在编程领域！因为他们的知识可以推而广之：相较只学习过特定编程语言的人，他们可以更深入更快速地理解新的编程语言。</p><p>我们推荐的入门书是 Bob Nystrom 所著的优秀的 <a href="https://craftinginterpreters.com/contents.html" target="_blank" rel="noopener">Crafting Interpreters</a>，可在网上免费获取。这本书条理清晰，富有趣味性，非常适合那些想要更好地理解语言和语言工具的人。我们建议你花时间读完整本书，并尝试任何一个感兴趣的“挑战”。</p><p>另一本更为传统的推荐书籍是 <a href="https://book.douban.com/subject/3296317/" target="_blank" rel="noopener">《编译原理》</a>，通常称为“龙书”。不幸的是，这本书不是为自学者而设计的，而是供教师从中挑选一些主题用于1-2学期的教学。</p><p>如果你选择使用龙书进行自学，你需要从中甄选主题，而且最好是在导师的帮助下。我们建议依据某个视频课程来设定学习的结构，然后按需从龙书中获取深入的内容。我们推荐的在线课程是<a href="https://www.edx.org/course/compilers" target="_blank" rel="noopener">Alex Aiken在MOOC平台 edX 所开设的</a>。</p><p><a href="https://book.douban.com/subject/3296317/" target="_blank" rel="noopener">编译原理</a></p><p>不要做一个只写样板代码的程序员。相反，给用户和其他程序员创造工具。从纺织工业和钢铁工业中学习历史教训：你想制造机器和工具，还是操作这些机器？</p><p>— Ras Bodik 在他的编译器课程伊始</p><h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><p>随着计算机在数量上的增加，计算机同样开始 <em>分散</em>。尽管商业公司过去愿意购买越来越大的大型机，现在的典型情况是，甚至很小的应用程序都同时在多台机器上运行。思考这样做的利弊权衡，即是分布式系统的研究所在，也是越来越重要的一项技能。</p><p>我们推荐的自学参考书是 Martin Kleppmann 的 <a href="https://book.douban.com/subject/30329536/" target="_blank" rel="noopener">《数据密集型应用系统设计》</a>。与传统的教科书相比，它是一本为实践者设计的具有很高的可读性的书，并且保持了深度和严谨性。</p><p>对于那些偏爱传统教材，或者希望可以从网上免费获取的人，我们推荐的教材是Maarten van Steen和Andrew Tanenbaum所著的 <em>《分布式系统原理与范型》（</em><a href="https://book.douban.com/subject/3108801/" target="_blank" rel="noopener">中文第二版</a><em>，</em><a href="https://book.douban.com/subject/26979326/" target="_blank" rel="noopener">英文第三版</a><em>）</em>。</p><p>对于喜欢视频课程的人，<a href="https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB" target="_blank" rel="noopener">MIT的6.824</a> 是一门很好的在线视频课程，由 Robert Morris 教授的研究生课程，在<a href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="noopener">这里</a>可以看到课程安排。</p><p>不管选择怎样的教材或者其他辅助资料，学习分布式系统必然要求阅读论文。<a href="http://dsrg.pdos.csail.mit.edu/papers/" target="_blank" rel="noopener">这里</a>有一个不错的论文清单，而且我们强烈建议你出席你当地的<a href="http://paperswelove.org/" target="_blank" rel="noopener">Papers We Love</a>（仅限美国）。</p><p><a href="https://book.douban.com/subject/30329536/" target="_blank" rel="noopener">数据密集型应用系统设计</a></p><h2 id="常见问题解答"><a href="#常见问题解答" class="headerlink" title="常见问题解答"></a>常见问题解答</h2><h3 id="这份指引的目标受众是？"><a href="#这份指引的目标受众是？" class="headerlink" title="这份指引的目标受众是？"></a>这份指引的目标受众是？</h3><p>我们面向自学的软件工程师、培训班学生、“早熟的”高中生或者想要通过自学补充正式教育的大学生。关于何时开启这段自学旅程，完全取决于个人，不过多数人在有一定的职业经历后深入学习计算机科学理论会获益匪浅。比如，我们注意到，如果学生在工作中曾经使用过数据库，他们会 <em>喜爱</em> 学习数据库系统课程；如果学生从事过一两个Web项目，他们会 <em>喜爱</em> 学习计算机网络。</p><h3 id="人工智能-计算机图形学-XX主题怎么样？"><a href="#人工智能-计算机图形学-XX主题怎么样？" class="headerlink" title="人工智能/计算机图形学/XX主题怎么样？"></a>人工智能/计算机图形学/XX主题怎么样？</h3><p>我们试图把计算机科学主题清单限制到那些我们认为 <em>每一个软件工程师</em> 都应该了解的内容，不限于专业或行业。拥有了这些基础，你将能更加轻松地挑选教材或论文，然而无需指引地学习核心概念。在这里，我们给出一些其他常见主题的自学起点：</p><ul><li>人工智能：通过观看视频并完成Pacman项目来学习<a href="http://ai.berkeley.edu/" target="_blank" rel="noopener">Berkeley的AI课程</a>。至于教材，使用Russell和Norvig编写的 <a href="https://book.douban.com/subject/25796281/" target="_blank" rel="noopener">《人工智能：一种现代方法》</a>。</li><li>机器学习：学习吴恩达在Coursera上的课程。耐心学习，先确保理解了基础概念再奔向类如深度学习的诱人新主题。</li><li>计算机图形学：学习<a href="http://inst.eecs.berkeley.edu/~cs184/fa12/onlinelectures.html" target="_blank" rel="noopener">Berkeley CS 184课程</a>的材料，使用<a href="https://book.douban.com/subject/30402778/" target="_blank" rel="noopener">《计算机图形学：原理及实践》</a>作为教材。</li></ul><h3 id="一定要严格遵守推荐的学习次序吗？"><a href="#一定要严格遵守推荐的学习次序吗？" class="headerlink" title="一定要严格遵守推荐的学习次序吗？"></a>一定要严格遵守推荐的学习次序吗？</h3><p>事实上，所有主题之间都有一定程度的重叠，彼此循环引用。以离散数学和算法的关系为例：先学习数学可以帮助你更深入地分析和理解算法，然而先学习算法可以为学习离散数学提供更大的动力和应用背景。理想情况下，你将在你的职业生涯多次重温二者。</p><p>因此，我们所推荐的次序主要是为了帮助你 <em>起步</em>……如果你出于某种强烈的原因而倾向以不同的顺序学习，那也没有关系，勇敢开始吧！不过在我们看来，最重要的“先决条件”是：先学计算机架构再学操作系统或数据库，先学计算机网络和操作系统再学分布式系统。</p><h3 id="和Open-Source-Society、freeCodeCamp-curricula等比起来，这份指引"><a href="#和Open-Source-Society、freeCodeCamp-curricula等比起来，这份指引" class="headerlink" title="和Open Source Society、freeCodeCamp curricula等比起来，这份指引?"></a>和Open Source Society、freeCodeCamp curricula等比起来，这份指引?</h3><p><a href="https://github.com/open-source-society/computer-science" target="_blank" rel="noopener">OSS指引</a>涵盖太多主题，在许多主题中推荐劣质资源，没有就特定课程哪些方面有价值提供原因或指引。我们努力对这份指引中的课程加以限制，仅仅包括那些你作为软件工程师 <em>确实需要了解的</em>，不论你的专业方向，并且对每门课程为何必要做出了解释以帮助你理解。</p><p>FreeCodeCamp主要关注编程，而不是计算机科学。至于你为什么要学习计算机科学，参见上文。如果你是个新手，我们建议先学 freeCodeCamp 的课程，一两年后再回归本指南。</p><h3 id="XX编程语言怎么样"><a href="#XX编程语言怎么样" class="headerlink" title="XX编程语言怎么样?"></a>XX编程语言怎么样?</h3><p>学习一门特定的编程语言和学习计算机科学的一个领域完全不在一个维度——相比之下，学习语言 <em>容易</em> 且 <em>缺乏价值</em>。如果你已经了解了一些语言，我们强烈建议遵照我们的指引，然后在学习的空当中习得语言，或者暂且不管以后再说。如果你已经把编程学得不错了（比如学完了 <em>《计算机程序的构造和解释》</em>），尤其是如果你学习过编译器，那么面对一门新的语言，你只需要花一个周末稍多的时间即可基本掌握，之后你可以在工作中学习相关的类库/工具/生态。</p><h3 id="XX流行技术怎么样"><a href="#XX流行技术怎么样" class="headerlink" title="XX流行技术怎么样?"></a>XX流行技术怎么样?</h3><p>没有任何一种技术的重要程度可以达到学习其使用足以成为计算机科学教学的核心部分。不过，你对学习那门技术充满热情，这很不错。诀窍是先从特定的技术回退到基本的领域或概念，判断这门流行技术在技术的宏观大局中位于何处，然后才深入学习这门技术。</p><h3 id="为什么你们还在推荐SICP"><a href="#为什么你们还在推荐SICP" class="headerlink" title="为什么你们还在推荐SICP?"></a>为什么你们还在推荐SICP?</h3><p>先尝试读一下，有些人觉得 SICP 让人神魂颠倒，这在其他书很少见。如果你不喜欢，你可以尝试其他的东西，也许以后再回到 SICP。</p><h3 id="为什么你们还在推荐龙书"><a href="#为什么你们还在推荐龙书" class="headerlink" title="为什么你们还在推荐龙书?"></a>为什么你们还在推荐龙书?</h3><p>龙书依旧是内容最为完整的编译器单本书籍。由于过分强调一些如今不够时新的主题的细节，比如解析，这本书招致了恶评。然而事实上，这本书从未打算供人一页一页的学习，而仅仅是为了给教师准备一门课程提供足够的材料。类似地，自学者可以从书中量身按需挑选主题，或者最好依照公开课授课教师在课程大纲中的建议。</p><h3 id="如何便宜获取教材"><a href="#如何便宜获取教材" class="headerlink" title="如何便宜获取教材?"></a>如何便宜获取教材?</h3><p>我们所建议的许多教材在网上都可以免费获得，这多亏了作者们的慷慨。对于那些不免费的书籍，我们建议购买旧版本的二手书籍。广而言之，如果一本教材有多个版本，旧版本大概率是完全足够使用的。即便新版本的价格是旧版本的10倍，新版本也绝不可能比旧版本好10倍！</p><hr><p>最后：</p><p>英语也不能落下， <a href="https://www.zhihu.com/question/27159998/answer/1616289800" target="_blank" rel="noopener">如何正确的从零开始学英语？</a>。</p><p>别忘了试一下这个3.9的在线入门Python课程，Python大法好！</p><p>仅限100名！3.9元入门python。游戏闯关式教学，小白也能轻松学会！</p><p>推荐自己几个的回答：</p><p>计算机类免费的书籍类：<a href="https://www.zhihu.com/question/58905568/answer/1593577798" target="_blank" rel="noopener">大家在计算机学习路上，都看过哪些圣经级别的书？</a></p><p>如何系统学习python：<a href="https://www.zhihu.com/question/29138020/answer/1534662775" target="_blank" rel="noopener">如何系统地自学 Python？</a></p><p>编程项目合集：<a href="https://zhuanlan.zhihu.com/p/267621138" target="_blank" rel="noopener">平凡：编程语言项目大全 - PBL(Project based Learning) - 包含全部主流语言</a></p><p>python从入门到放弃：<a href="https://zhuanlan.zhihu.com/p/338013571" target="_blank" rel="noopener">平凡：[资源]非常全面的一站式Python学习网站-学生免费</a></p><p>编程环境配置：<a href="https://zhuanlan.zhihu.com/p/314870662" target="_blank" rel="noopener">平凡：「编程」环境配置锦集大全 - 包含大多数主流语言</a></p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常Linux命令</title>
      <link href="2020/12/09/tools/linux-ming-ling/"/>
      <url>2020/12/09/tools/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="日常Linux命令"><a href="#日常Linux命令" class="headerlink" title="日常Linux命令"></a>日常Linux命令</h1><p>杀进程：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -tunlp <span class="token operator">|</span><span class="token function">grep</span> <span class="token punctuation">[</span>端口号<span class="token punctuation">]</span><span class="token function">kill</span> -9 <span class="token punctuation">[</span>PID<span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10显示器亮度调节</title>
      <link href="2020/11/28/tools/windows10-xian-shi-qi-liang-du-diao-jie/"/>
      <url>2020/11/28/tools/windows10-xian-shi-qi-liang-du-diao-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows10显示器亮度调节"><a href="#Windows10显示器亮度调节" class="headerlink" title="Windows10显示器亮度调节"></a>Windows10显示器亮度调节</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Windows10环境，断电，显示器亮度自动调节</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>使用电脑自带的英特尔显卡控制中心</p><p>路径：系统——功率——显示器节能（关闭）</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>按下 Windows + R 快捷键打开「运行」— 执行 services.msc 打开服务管理器</p><p>找到 Sensor Monitoring service 服务后双击将其禁用即可</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10常见问题汇总</title>
      <link href="2020/11/27/tools/windows10-chang-jian-wen-ti-hui-zong/"/>
      <url>2020/11/27/tools/windows10-chang-jian-wen-ti-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="解决VPN720无法连接"><a href="#解决VPN720无法连接" class="headerlink" title="解决VPN720无法连接"></a>解决VPN720无法连接</h1><p>背景：需要连接公司内网，windows10系统，依据教程选择正确的网络连接方式</p><p>问题：</p><ul><li>算法不同（可以使用修改协议，不一定是SSTP协议，可能是PPTP协议）</li><li>连接的时候弹出无法连接，需要修改网络设置（在系统事件查看器查看错误，如出现是720错误，请继续往下看）</li></ul><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><h3 id="定位错误"><a href="#定位错误" class="headerlink" title="定位错误"></a>定位错误</h3><p>首先右键我的电脑——管理——事件日志——应用程序，找到错误，查看错误代码（720）</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>之后打开驱动管理，找到WAN Miniport(IP)，打开查看详细信息里面的驱动程序关键字</p><p>Win+R输入regedit，打开注册表，在上方地址栏输入HKEY_LoCAL_MACHINE\sYsTEM\CurrentControlset\Control\Class\（上一步驱动关键字的大大括号里面的那部分，记得加上大括号）找到后面的数字对应的文件夹，之后删除该数字对应的文件夹下的DriverDesc给删除</p><h3 id="回到设备管理器上"><a href="#回到设备管理器上" class="headerlink" title="回到设备管理器上"></a>回到设备管理器上</h3><ul><li>右键更新驱动程序软件</li><li>浏览计算机以查找驱动程序软件</li><li>把显示兼容硬件的勾去掉</li><li>选取Microsoft，右边选择蓝牙设备（个人局域网）<ul><li>忽略警告，直接点是 </li></ul></li><li>返回更新</li><li>关闭窗口保存</li><li>重启电脑</li><li>启动完成之后重新连接VPN</li></ul><p>这时候VPN就可以连接了，不过记得不要连接WIFI进行连接，要使用有线连接，不然的话可能会出现WiFi断网</p><h1 id="查看被占用端口"><a href="#查看被占用端口" class="headerlink" title="查看被占用端口"></a>查看被占用端口</h1><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><ol><li>win + R 打开CMD窗口</li><li>netstat -ano列出所有端口的情况，找到被占用的端口</li><li>netstat -aon|findstr “7200”，记住pid（进程号）</li><li>taskkill /f /pid [pid号]</li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot多数据源切换</title>
      <link href="2020/11/26/hou-duan/spring/springboot/springboot-duo-shu-ju-yuan-qie-huan/"/>
      <url>2020/11/26/hou-duan/spring/springboot/springboot-duo-shu-ju-yuan-qie-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot多数据源切换"><a href="#SpringBoot多数据源切换" class="headerlink" title="SpringBoot多数据源切换"></a>SpringBoot多数据源切换</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>有时候项目里面不单单只要一个数据库，所以需要配置多个数据源进行动态切换，“动态数据源”。动态数据源可以解决多套数据源的处理不够灵活、占用资源多等问题。用户可以根据实际的业务需要，统一操作逻辑，只要在需要切换数据源的进行处理即可。</p><p>动态数据源的实现进行讲解，内容包括搭建动态数据源原理、动态数据源配置、动态数据源使用，AOP 注解方式切换数据源等</p><h2 id="动态数据源"><a href="#动态数据源" class="headerlink" title="动态数据源"></a>动态数据源</h2><p>Spring Boot的动态数据源，本质上是存储在一个Map当中的，当我们需要某一个数据源的时候才从Map中取数据源进行处理。而在Spring中已经提供了<code>AbstractRoutingDataSource</code>用来实现此功能，所以当我们需要实现动态数据的时候只需要继承这个接口，实现自己的获取数据源逻辑即可</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 数据源 </tag>
            
            <tag> DataSource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA常见错误</title>
      <link href="2020/11/20/tools/intellij-idea-chang-jian-cuo-wu/"/>
      <url>2020/11/20/tools/intellij-idea-chang-jian-cuo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Intellij-IDEA常见错误"><a href="#Intellij-IDEA常见错误" class="headerlink" title="Intellij IDEA常见错误"></a>Intellij IDEA常见错误</h1><h2 id="IDEA中出现Cannot-download-sources-Sources-not-found-for-xxx"><a href="#IDEA中出现Cannot-download-sources-Sources-not-found-for-xxx" class="headerlink" title="IDEA中出现Cannot download sources Sources not found for: xxx"></a>IDEA中出现Cannot download sources Sources not found for: xxx</h2><p>这种情况是会经常出现的</p><p>可以在当前的<code>.pom</code>文件的目录下使用以下代码：</p><pre class=" language-shells"><code class="language-shells">mvn dependency:resolve -Dclassifier=sources</code></pre><p>如果返回结果为</p><pre class=" language-shell"><code class="language-shell">'mvn' 不是内部或外部命令，也不是可运行的程序或批处理文件。</code></pre><p>是因为没有配置maven的环境变量</p><p>配置：</p><ul><li>变量名：MAVEN_HOME</li><li>变量值：maven的路径</li><li>Path：Path</li><li>变量值：%MAVEN_HOME%\bin</li></ul><p>打开cmd控制台查看</p><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304102133.png" alt="maven配置"></p><p>出现即可，重复<code>.pom</code>文件步骤即可</p><h2 id="Intellij-IDEA运行报Command-line-is-too-long解法"><a href="#Intellij-IDEA运行报Command-line-is-too-long解法" class="headerlink" title="Intellij IDEA运行报Command line is too long解法"></a>Intellij IDEA运行报Command line is too long解法</h2><h2 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h2><p>Error running ‘<strong><strong>**</strong></strong>’. Command line is too long. Shorten command line for <strong><em>**</em></strong>or also for Application default configuration.</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法:"></a>解法:</h2><p>修改项目下 .idea\workspace.xml，找到标签 <code>&lt;component name=&quot;PropertiesComponent&quot;&gt;</code> ， 在标签里加一行 <code>&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</code></p><h2 id="Internal-error-Please-refer-to-http-jb-gg-ide-critical-startup-errors"><a href="#Internal-error-Please-refer-to-http-jb-gg-ide-critical-startup-errors" class="headerlink" title="Internal error. Please refer to http://jb.gg/ide/critical-startup-errors"></a>Internal error. Please refer to <a href="http://jb.gg/ide/critical-startup-errors" target="_blank" rel="noopener">http://jb.gg/ide/critical-startup-errors</a></h2><p><strong>解决方式：重置网络</strong></p><p>netsh winsock reset</p><p><strong>重启</strong></p>]]></content>
      
      
      <categories>
          
          <category> To </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA常见错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youtube-dl的Windows使用方式</title>
      <link href="2020/11/20/tools/youtube-dl/"/>
      <url>2020/11/20/tools/youtube-dl/</url>
      
        <content type="html"><![CDATA[<h1 id="windows使用方式"><a href="#windows使用方式" class="headerlink" title="windows使用方式"></a>windows使用方式</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span>youtube-dl -o <span class="token string">'D:\IDMDownload\%(title)s.%(ext)s'</span> <span class="token punctuation">[</span>视频网址<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看</span>youtube-dl -F <span class="token punctuation">[</span>视频网址<span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于数据库JSON的相关问题</title>
      <link href="2020/09/30/workproblem/guan-yu-shu-ju-ku-json-de-xiang-guan-wen-ti/"/>
      <url>2020/09/30/workproblem/guan-yu-shu-ju-ku-json-de-xiang-guan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库中存取JSON问题"><a href="#数据库中存取JSON问题" class="headerlink" title="数据库中存取JSON问题"></a>数据库中存取JSON问题</h1><p>数据库：MySQL 8 </p><p>由于当初设计的表结构的时候是因为想到这边按照一个json的格式进行一个传送，所以设计了两个为json的字段</p><p>表结构：</p><table><thead><tr><th>id</th><th>item_contion</th><th>item_linkcc</th></tr></thead><tbody><tr><td>1</td><td>{“to”:[{“==”:[{“var”:”moedel”},”4”]},{“&lt;=”:[{“var”:”moedel”},”4”]},{“&gt;=”:[{“var”:”temperature”},25]},{“&gt;”:[{“var”:”moedel”},”3”]},{“&lt;”:[{“var”:”moedel”},”4”]}]}</td><td>{“NET”:”1”,”temperature”:25}</td></tr><tr><td>2</td><td>{“==”:[{“var”:”workMode”},”1”]}</td><td>{“NET”:”1”}</td></tr><tr><td>3</td><td>{“to”:[{“==”:[{“var”:”moedel”},”4”]},{“&lt;=”:[{“var”:”moedel”},”4”]},{“&gt;=”:[{“var”:”temperature”},25]},{“&gt;”:[{“var”:”moedel”},”3”]},{“&lt;”:[{“var”:”moedel”},”4”]}]}</td><td>{“NET”:”1”}</td></tr></tbody></table><p>类似与以上这种JSON存储</p><h2 id="解决取得解决方式"><a href="#解决取得解决方式" class="headerlink" title="解决取得解决方式"></a>解决取得解决方式</h2><p>POJO正常定义，按照数据库字段映射，对外采用params进行过滤对外不必要的字段</p><p>到了json的这里是定义为了<code>List&lt;JSONObject&gt;</code></p><p>就涉及到了<code>String</code>转<code>List&lt;JSONObject&gt;</code></p><pre class=" language-java"><code class="language-java">String databasesContion <span class="token operator">=</span> <span class="token string">"{"</span>to<span class="token string">":[{"</span><span class="token operator">==</span><span class="token string">":[{"</span>var<span class="token string">":"</span>moedel<span class="token string">"},"</span><span class="token number">4</span><span class="token string">"]},{"</span><span class="token operator">&lt;=</span><span class="token string">":[{"</span>var<span class="token string">":”moedel”},”4”]},{"</span><span class="token operator">>=</span><span class="token string">":[{"</span>var<span class="token string">":"</span>temperature<span class="token string">"},25]},{"</span><span class="token operator">></span><span class="token string">":[{"</span>var<span class="token string">":"</span>moedel<span class="token string">"},"</span><span class="token number">3</span><span class="token string">"]},{"</span><span class="token operator">&lt;</span><span class="token string">":[{"</span>var<span class="token string">":"</span>moedel<span class="token string">"},"</span><span class="token number">4</span><span class="token string">"]}]}"</span><span class="token punctuation">;</span>String databsesLinkcc <span class="token operator">=</span> <span class="token string">"{"</span>NET<span class="token string">":"</span><span class="token number">1</span><span class="token string">","</span>temperature<span class="token string">":25}"</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>JSONObject<span class="token operator">></span> contionList <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>databasesCondition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>JSONObject<span class="token operator">></span> actionListJSONObject <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>databasesCondition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以上两种转换方式都是可以的，区别在于Collections.singletonList()是创建了固定的List，不可变的</span></code></pre><p>到这里就可以放到params里面了，对外</p><h2 id="前端传获取前端传的数据"><a href="#前端传获取前端传的数据" class="headerlink" title="前端传获取前端传的数据"></a>前端传获取前端传的数据</h2><p>与前端定义为传递list过来，所以需要for循环取出contion的list之后再进行一个转换String，正则匹配替换</p>]]></content>
      
      
      <categories>
          
          <category> WorkProblem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题与解决方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB安装</title>
      <link href="2020/09/20/tools/mongodb-de-an-zhuang/"/>
      <url>2020/09/20/tools/mongodb-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Cent-OS-7-安装MongoDB"><a href="#Cent-OS-7-安装MongoDB" class="headerlink" title="Cent OS 7 安装MongoDB"></a>Cent OS 7 安装MongoDB</h1><h2 id="配置系统的yum源"><a href="#配置系统的yum源" class="headerlink" title="配置系统的yum源"></a>配置系统的yum源</h2><h3 id="创建-rrpo文件，生成系统源"><a href="#创建-rrpo文件，生成系统源" class="headerlink" title="创建.rrpo文件，生成系统源"></a>创建.rrpo文件，生成系统源</h3><pre class=" language-bash"><code class="language-bash">vim /etc/yum.repos.d/mongodb-org-4.4.repo</code></pre><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="noopener">官网上拉出内容</a></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mongodb-org-4.4<span class="token punctuation">]</span>name<span class="token operator">=</span>MongoDB Repositorybaseurl<span class="token operator">=</span>https://repo.mongodb.org/yum/redhat/<span class="token variable">$releasever</span>/mongodb-org/4.4/x86_64/gpgcheck<span class="token operator">=</span>1enabled<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>https://www.mongodb.org/static/pgp/server-4.4.asc</code></pre><p>退出保存</p><p><strong>注意：复制，粘贴，一般需要补全前面几个符号，直接复制粘贴可能会少前几个字符</strong></p><h2 id="使用yum安装"><a href="#使用yum安装" class="headerlink" title="使用yum安装"></a>使用yum安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y mongodb-org</code></pre><h3 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h3><pre class=" language-bash"><code class="language-bash">rpm -qa <span class="token operator">|</span><span class="token function">grep</span> mongodbrpm -ql mongodb-org-server</code></pre><h2 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h2><p>启动mongoDB服务</p><pre class=" language-bash"><code class="language-bash">systemctl start mongod.service</code></pre><p>MongoDB默认端口是27017，查看是否开启</p><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -natp <span class="token operator">|</span> <span class="token function">grep</span> 27017</code></pre><p>检查数据库是否安装成功</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> mongod    <span class="token comment" spellcheck="true"># 查看数据库的进程是否存在</span></code></pre><h3 id="验证服务开启"><a href="#验证服务开启" class="headerlink" title="验证服务开启"></a>验证服务开启</h3><pre class=" language-bash"><code class="language-bash">mongo</code></pre><h3 id="MongoDB常用命令清单"><a href="#MongoDB常用命令清单" class="headerlink" title="MongoDB常用命令清单"></a>MongoDB常用命令清单</h3><pre class=" language-bash"><code class="language-bash">// 1、开启MongoDB<span class="token function">sudo</span> <span class="token function">service</span> mongod start  或者 systemctl start mongod.service  <span class="token comment" spellcheck="true"># 开启MongoDB</span><span class="token function">sudo</span> <span class="token function">chkconfig</span> mongod on  <span class="token comment" spellcheck="true"># 加入开机启动</span><span class="token function">sudo</span> <span class="token function">service</span> mongod restart <span class="token comment" spellcheck="true"># 重启MongoDB</span>// 2、关闭MongoDB<span class="token function">sudo</span> <span class="token function">service</span> mongod stop  <span class="token comment" spellcheck="true"># 关闭防火墙</span>// 3、卸载MongoDB<span class="token function">sudo</span> yum erase <span class="token variable"><span class="token variable">$(</span>rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> mongodb-org<span class="token variable">)</span></span>    <span class="token comment" spellcheck="true"># 卸载MongoDB</span><span class="token function">sudo</span> <span class="token function">rm</span> -r /var/log/mongodb  <span class="token comment" spellcheck="true"># 删除日志文件</span><span class="token function">sudo</span> <span class="token function">rm</span> -r /var/lib/mongo    <span class="token comment" spellcheck="true"># 删除数据文件</span></code></pre><h2 id="开启远程连接MongoDB"><a href="#开启远程连接MongoDB" class="headerlink" title="开启远程连接MongoDB"></a>开启远程连接MongoDB</h2><h3 id="修改配置文件mongodb-conf"><a href="#修改配置文件mongodb-conf" class="headerlink" title="修改配置文件mongodb.conf"></a>修改配置文件mongodb.conf</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/mongod.conf<span class="token comment" spellcheck="true"># network interfaces</span>net:  port: 27017  bindIp: 0.0.0.0  <span class="token comment" spellcheck="true"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></code></pre><h3 id="重启MongoDB服务"><a href="#重启MongoDB服务" class="headerlink" title="重启MongoDB服务"></a>重启MongoDB服务</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> mongo restart.servre</code></pre><h3 id="开放对外端口"><a href="#开放对外端口" class="headerlink" title="开放对外端口"></a>开放对外端口</h3><p>可以在Linux开启，一般在挂在运营商的端口开启</p><pre class=" language-bash"><code class="language-bash">systemctl status firewalld  <span class="token comment" spellcheck="true"># 查看防火墙状态</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>27017/tcp --permanent <span class="token comment" spellcheck="true"># mongodb默认端口号</span>firewall-cmd --reload  <span class="token comment" spellcheck="true"># 重新加载防火墙</span>firewall-cmd --zone<span class="token operator">=</span>public --query-port<span class="token operator">=</span>27017/tcp <span class="token comment" spellcheck="true"># 查看端口号是否开放成功，输出yes开放成功，no则失败</span></code></pre><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><h3 id="无密码登录"><a href="#无密码登录" class="headerlink" title="无密码登录"></a>无密码登录</h3><p>我采用的是这个，直接使用Navcat15进行连接的</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5.png" alt="数据库连接"></p><h3 id="连接到自定义的用户"><a href="#连接到自定义的用户" class="headerlink" title="连接到自定义的用户"></a>连接到自定义的用户</h3><h4 id="创建用户，设置账号，密码权限之类的"><a href="#创建用户，设置账号，密码权限之类的" class="headerlink" title="创建用户，设置账号，密码权限之类的"></a>创建用户，设置账号，密码权限之类的</h4><pre class=" language-bash"><code class="language-bash">// admin数据库<span class="token operator">></span> use adminswitched to db admin<span class="token operator">></span> db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span> user:<span class="token string">"root"</span>, pwd:<span class="token string">"12345678"</span>, roles:<span class="token punctuation">[</span><span class="token string">"root"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>Successfully added user: <span class="token punctuation">{</span> <span class="token string">"user"</span> <span class="token keyword">:</span> <span class="token string">"root"</span>, <span class="token string">"roles"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span> <span class="token string">"root"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>// 其他数据库<span class="token operator">></span> use <span class="token function">test</span>switched to db <span class="token function">test</span><span class="token operator">></span> db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span> user:<span class="token string">"admin"</span>, pwd:<span class="token string">"123456"</span>, roles:<span class="token punctuation">[</span><span class="token string">"readWrite"</span>, <span class="token string">"dbAdmin"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>Successfully added user: <span class="token punctuation">{</span> <span class="token string">"user"</span> <span class="token keyword">:</span> <span class="token string">"root"</span>, <span class="token string">"roles"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span> <span class="token string">"root"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre><h4 id="修改mongodb-conf文件，启用身份验证"><a href="#修改mongodb-conf文件，启用身份验证" class="headerlink" title="修改mongodb.conf文件，启用身份验证"></a>修改mongodb.conf文件，启用身份验证</h4><pre class=" language-bash"><code class="language-bash">vim /etc/mongodb.confsecurity:  authorization: <span class="token string">"enabled"</span>   <span class="token comment" spellcheck="true"># disable or enabled</span></code></pre><h4 id="重启MongoDB"><a href="#重启MongoDB" class="headerlink" title="重启MongoDB"></a>重启MongoDB</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> sercice mongod restart.server</code></pre><h4 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">></span> use adminswitched to db admin<span class="token operator">></span> db.auth<span class="token punctuation">(</span><span class="token string">"root"</span>, <span class="token string">"123456"</span><span class="token punctuation">)</span>1 <span class="token comment" spellcheck="true"># 授权成功</span><span class="token comment" spellcheck="true"># 其他常用命令</span>db.updateUser<span class="token punctuation">(</span>user, writeConcern<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 更新用户</span>db.dropUser<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 删除用户</span></code></pre><h4 id="远程连接-1"><a href="#远程连接-1" class="headerlink" title="远程连接"></a>远程连接</h4><pre class=" language-bash"><code class="language-bash">// 终端连接mongo 10.128.218.14:27017/database -u username -p password// mongoose方式连接mongoose.connect<span class="token punctuation">(</span><span class="token string">'mongodb://username:password@host:port/database?options...'</span>, <span class="token punctuation">{</span>useNewUrlParser: true<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 通过客户端连接</code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装MySQL</title>
      <link href="2020/09/20/tools/centos7-an-zhuang-mysql/"/>
      <url>2020/09/20/tools/centos7-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS7-安装MySQL"><a href="#CentOS7-安装MySQL" class="headerlink" title="CentOS7 安装MySQL"></a>CentOS7 安装MySQL</h1><h2 id="卸载历史版本MySQL"><a href="#卸载历史版本MySQL" class="headerlink" title="卸载历史版本MySQL"></a>卸载历史版本MySQL</h2><p>首先卸载历史版本的MySQL</p><pre class=" language-bash"><code class="language-bash">rpm -qa<span class="token operator">|</span><span class="token function">grep</span> mysql</code></pre><p>出现了rpm安装包的话运行以下的命令</p><pre class=" language-bash"><code class="language-bash">rpm -ev <span class="token comment" spellcheck="true"># [需要移除组件的名称]</span>或者rpm -e --nodeps <span class="token comment" spellcheck="true"># [需要移除组件的名称] 此命令为强制卸载</span></code></pre><h2 id="安装MySQL8"><a href="#安装MySQL8" class="headerlink" title="安装MySQL8"></a>安装MySQL8</h2><h3 id="使用rpm安装MySQL"><a href="#使用rpm安装MySQL" class="headerlink" title="使用rpm安装MySQL"></a>使用rpm安装MySQL</h3><p>因为CentOS 7默认安装的数据库是Mariadb,所以使用YUM命令是无法安装MySQL的，只会更新Mariadb。使用rpm来进行安装。可以在<a href="https://links.jianshu.com/go?to=http%3A%2F%2Frepo.mysql.com%2F" target="_blank" rel="noopener">mysql的repo源仓库</a>右键复制指定版本的数据库。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm</code></pre><p>安装mysql80-community-release-el7-1.noarch.rpm包</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> rpm -ivh mysql80-community-release-el7-3.noarch.rpm</code></pre><p>安装完成后会在 /etc/yum.repos.d文件夹里面获得两个文件：mysql-community.repo &amp;&amp; mysql-community-source.repo</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> mysql-server</code></pre><p>如果最后结尾是<code>Complete!</code>的话就是安装成功了</p><p>检查是否已经设置为开机启动MySQL服务</p><pre class=" language-bash"><code class="language-bash">systemctl list-unit-files<span class="token operator">|</span><span class="token function">grep</span> mysqld</code></pre><p>如果没有</p><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> mysqld.service</code></pre><p>查看MySQL是否启动</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看是否启动MySQL服务</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> mysql<span class="token comment" spellcheck="true"># 启动服务</span>systemctl start mysqld.service<span class="token comment" spellcheck="true"># 数据库重启</span>systemctl restart mysqld.service</code></pre><p>初始化MySQL</p><pre class=" language-bash"><code class="language-bash">mysqld --initialize</code></pre><p>查看MySQL初始默认密码</p><pre class=" language-dart"><code class="language-dart">grep <span class="token string">'temporary password'</span> <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>log</code></pre><p>复制 root@localhost: 后面的密码。登录mysql，并粘贴默认密码，因为MySQL8.0的更改，导致必须要重置密码</p><pre class=" language-csharp"><code class="language-csharp">alter user <span class="token string">'root'</span><span class="token string">@'localhost'</span> identified by <span class="token string">'12345678'</span><span class="token punctuation">;</span></code></pre><p>如果设置密码时候出现提示</p><blockquote><p>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p></blockquote><p>代表需要降低policy的等级后在执行</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password<span class="token punctuation">.</span>policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>开启MySQL远程连接</p><pre class=" language-bash"><code class="language-bash">use mysql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#修改root账户权限</span>update user <span class="token keyword">set</span> host <span class="token operator">=</span> <span class="token string">'%'</span> where user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#刷新权限</span>flush privileges<span class="token punctuation">;</span></code></pre><h2 id="安装MySQL5-6-45"><a href="#安装MySQL5-6-45" class="headerlink" title="安装MySQL5.6.45"></a>安装MySQL5.6.45</h2>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ安装</title>
      <link href="2020/09/10/tools/rabbitmq-an-zhuang/"/>
      <url>2020/09/10/tools/rabbitmq-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="预先环境"><a href="#预先环境" class="headerlink" title="预先环境"></a>预先环境</h3><p>连上<code>Linux</code>第一件事情更新<code>yum</code></p><pre class=" language-bash"><code class="language-bash">yum -y update</code></pre><p>因为<code>RabbitMQ</code>的环境需要<code>Erlang</code>并且版本较高，所以直接<code>yum</code>安装的是比较低的版本所以采用</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通过rpm完成安装</span>curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token comment" spellcheck="true"># 安装erlang</span>yum <span class="token function">install</span> -y erlang<span class="token comment" spellcheck="true"># 检查版本号</span>erl -version<span class="token comment" spellcheck="true"># 得到以下就安装正确了</span><span class="token punctuation">[</span>root@test-demo ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># erl -version</span>Erlang <span class="token punctuation">(</span>SMP,ASYNC_THREADS,HIPE<span class="token punctuation">)</span> <span class="token punctuation">(</span>BEAM<span class="token punctuation">)</span> emulator version 11.0.4</code></pre><h3 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h3><p>从官网下载rpm包，注意版本号，我这里是CentOS7所以采用的el7下载</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/rabbitMQ%E4%B8%8B%E8%BD%BD.png" alt="RabbitMQ下载"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># CentOS7 下载</span><span class="token function">wget</span> https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.8/rabbitmq-server-3.8.8-1.el8.noarch.rpm<span class="token comment" spellcheck="true"># CentOS8 下载</span><span class="token function">wget</span> https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.8/rabbitmq-server-3.8.8-1.el8.noarch.rpm.asc</code></pre><p>可以采用以上的方式下载，也可以说是直接点击下载到本地，之后上传到Linux上</p><pre class=" language-bash"><code class="language-bash">rpm -ivh rabbitmq-server-3.8.5-1.el7.noarch.rpm</code></pre><p>会出现一个警告，不要慌，导入KEY即可</p><pre class=" language-bash"><code class="language-bash">rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc</code></pre><p>安装socat</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> epel-releaseyum -y <span class="token function">install</span> socat</code></pre><p>再次安装Rabbit MQ即可</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动管理平台插件</span>rabbitmq-plugins <span class="token function">enable</span> rabbitmq_management<span class="token comment" spellcheck="true"># 启动RabbitMQ</span>systemctl start rabbitmq-server</code></pre><p>这时候可以在地址栏输入当前环境的IP+15672进行访问了</p><p>因为默认的账号密码都是guest，无法远程登录，这个账号只适合说是本地登录，所以</p><h3 id="设置用户"><a href="#设置用户" class="headerlink" title="设置用户"></a>设置用户</h3><p>创建用户名</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl add_user admin 123456</code></pre><p>设置admin为最高权限</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl set_user_tags admin administrator</code></pre><p>授权远程访问</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl set_permissions -p / admin <span class="token string">"."</span> <span class="token string">"."</span> <span class="token string">".*"</span></code></pre><p>重启rabbitMQ</p><pre class=" language-bash"><code class="language-bash">systemctl restart rabbitmq-server</code></pre><p>输入IP登录即可</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD常用命令</title>
      <link href="2020/09/08/tools/cmd-chang-yong-ming-ling/"/>
      <url>2020/09/08/tools/cmd-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="CMD常用命令"><a href="#CMD常用命令" class="headerlink" title="CMD常用命令"></a>CMD常用命令</h1><p>pwd 查看当前路径</p><p>cd 当前路径</p><p>cd path 切换路径</p><p>盘符:切换到盘符根目录</p><p>cls清屏</p><p>dir显示当前目录下或指定目录下文件列表</p><p>del删除文件</p><p>erase删除至少一个文件</p><p>rd删除目录</p><p>rmdir删除目录</p><p>date显示或设置日期</p><p>time显示或设置时间</p><p>copy复制文件内容到另一个文件</p><p>move将文件从一个目录移动到另一个目录</p><p>echo str回显内容</p><p>echo str &gt; file 写入到文件，可以用来创建文本文件</p><p>exit退出cmd</p><p>ctrl+c终止当前任务</p><p>md创建目录</p><p>mkdir创建目录</p><p>path显示或设置环境配置</p><p>ren重命名文件</p><p>replace替换文件</p><p>title设置cmd当前回话标题</p><p>type显示文本文件内容</p><p>logoff注销</p><p>shutdown -f -s -t seconds 关机 强制 执行关机 倒计时 s秒</p><p>shutdown -a 关机 取消</p><p>at time shutdown -s 定时 执行某个任务/可设置周期执行任务</p><p>at /delete 清除at定时任务</p><p>tasklist进程列表</p><p>tasklist|findstr pid 查看指定进程pid的进程信息</p><p>taskkill -f -im/-pid taskNameOrID -t 杀死 强制 按镜像名/按id 任务名或id 及子任务</p><p>netstat -aon查看端口占用</p><p>netstat -aon|findstr port 查看指定端口占用情况，找到占用端口的进程pid</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="2020/09/08/tools/git-chang-yong-ming-ling/"/>
      <url>2020/09/08/tools/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="查看当前本地分支名称"><a href="#查看当前本地分支名称" class="headerlink" title="查看当前本地分支名称"></a>查看当前本地分支名称</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch</code></pre><h2 id="查看本地远程关联分支"><a href="#查看本地远程关联分支" class="headerlink" title="查看本地远程关联分支"></a>查看本地远程关联分支</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -a</code></pre><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>当本地创建了一个属于自己的分支的时候，并且push到了云端上，现在本地切到自己的分支，但是还有另外一个的分支存在，当我们需要进行update就采用这个另外一个分支，但是更新下来了，之后使用合并分支，合并到自己的分支上</p><p>当我们Git merge的时候有几种方式</p><pre class=" language-bash"><code class="language-bash">--ff<span class="token comment" spellcheck="true"># 正常update的时候采用的方式，简单就是顺着当前的时间线往下走可以到达另外一个分支的时候，那么git会融合，合并</span>--no-ff<span class="token comment" spellcheck="true"># 关闭上面的那个模式，提交的时候，创建一个merge分支的commit消息，    然后合并到当前的分支</span>--squash<span class="token comment" spellcheck="true"># 把一些不必要commit进行压缩，比如说，你的feature在开发的时候写的commit很乱，那么我们合并的时候不希望把这些历史commit带过来，于是使用–squash进行合并，此时文件已经同合并后一样了，但不移动HEAD，不提交。需要进行一次额外的commit来“总结”一下，然后完成最终的合并</span>--no-squash</code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle无法正常加载</title>
      <link href="2020/09/03/tools/gradle-wu-fa-jia-zai/"/>
      <url>2020/09/03/tools/gradle-wu-fa-jia-zai/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 2020.3.1设置</title>
      <link href="2020/09/03/tools/intellij-idea-2020.3.1-she-zhi/"/>
      <url>2020/09/03/tools/intellij-idea-2020.3.1-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA-2020-3-1设置"><a href="#IntelliJ-IDEA-2020-3-1设置" class="headerlink" title="IntelliJ IDEA 2020.3.1设置"></a>IntelliJ IDEA 2020.3.1设置</h1><h2 id="启动后配置"><a href="#启动后配置" class="headerlink" title="启动后配置"></a>启动后配置</h2><p>首次启动的时候一般启动的是（/bin/idea64.exe），会有提示说叫我们选择运行的环境，主体UI，勾选上就行了，然后注册<del>自己找破解</del></p><p>正常启动之后如下如图</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208144322.png" alt="image-20210208144322924"></p><p>图中的Setting 既为 在进入idea主界面后的 File → Settings</p><h3 id="设置项目默认的JDK配置"><a href="#设置项目默认的JDK配置" class="headerlink" title="设置项目默认的JDK配置"></a>设置项目默认的JDK配置</h3><p>==因为在此版本中没有这个选项，需要在进入项目之后再进行选择==</p><p>其余版本可以直接选择</p><ul><li>进入设置菜单 Project Structure | Project Settings | Project 中选择默认的JDK。（建议选本电脑已经安装的JDK）</li></ul><p>==设置后需要点<code>Apply</code>按钮生效==</p><h3 id="主题UI以及显示设置"><a href="#主题UI以及显示设置" class="headerlink" title="主题UI以及显示设置"></a>主题UI以及显示设置</h3><p>如下图进入设置菜单Settings | Appearance &amp; Behavior | Appearance 选择喜欢的主题。设置后需要点“Apply”按钮生效，这里我用的是插件中的主题（==可能黄色偏多？==）</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208144706.png" alt="image-20210208144706785"></p><p>如图进入菜单中的 Editor | General红色方框，选择根据鼠标滚轮进行放大缩小（本人未启动）</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208144856.png" alt="image-20210208144856505"></p><p>进入设置菜单Settings | Editor | General | Editor Tabs，<strong><em>不勾选”Show tabs in one row”\</em></strong>。 这样在打开代码文件较多是，上面的Tab标签可以多行显示，找起来方便一点</p><p>同时，<strong>勾选 Mark modified(*)</strong>当文件被修改后，文件Tab标签带星号，便于识别</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208145211.png" alt="image-20210208145211318"></p><p>因为IDEA的默认语法不够醒目，所以进入设置菜单Settings | Editor | Color Scheme | General</p><ul><li>在Errors and Warnings下，选择Error，设置Effects波浪线Underwaved，颜色修改为十六进制“FF3F3C”亮红色</li><li>在Errors and Warnings下，选择Unknown symbol，去掉勾选Foreground， 设置Effects波浪线Underwaved，颜色修改为“FF3F3C”亮红色</li><li>在Code下，分别选择Identifier under caret 和 Identifier under caret(write)，都设置Background颜色十六进制“406000”</li><li>在Editor下，选择Selection background，设置Background颜色设置十六进制“406000”</li></ul><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208145448.png" alt="image-20210208145447989"></p><h3 id="设置默认字符编码"><a href="#设置默认字符编码" class="headerlink" title="设置默认字符编码"></a>设置默认字符编码</h3><p>如下图，进入设置菜单Settings | Editor | File Encodings，设置默认字符编码（三个地方都设置为UTF-8）</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208145623.png" alt="image-20210208145623397"></p><h3 id="设置自动编译"><a href="#设置自动编译" class="headerlink" title="设置自动编译"></a>设置自动编译</h3><p>如下图，进入设置菜单Settings | Build, Exceution,Deployment | Compiler；<strong>勾选Build project automatically</strong>（从eclipse转过来的朋友记得勾选，因为eclipse开发并不用管理编译，源文件落盘的时候自动编译为是最新的，然而IDEA默认不编译，所以需要勾选）</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208145856.png" alt="image-20210208145856755"></p><h3 id="设置Auto-Import"><a href="#设置Auto-Import" class="headerlink" title="设置Auto Import"></a>设置Auto Import</h3><p>进入设置菜单Settings | Editor | General | Auto Import，<strong>勾选Add unambiguous imports on the fly</strong>（自动添加无歧义的import）， <strong>勾选 Optimizeimports on the fly</strong> （自动优化，比如删除无用的import）</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208150256.png" alt="image-20210208150256238"></p><h3 id="修改默认快捷键"><a href="#修改默认快捷键" class="headerlink" title="修改默认快捷键"></a>修改默认快捷键</h3><p>进入设置菜单Settings | Keymap；这里有多种选择，选择一个自己习惯的操作即可</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208150424.png" alt="image-20210208150424791"></p><h3 id="代码补全设置"><a href="#代码补全设置" class="headerlink" title="代码补全设置"></a>代码补全设置</h3><p>如下图，进入设置菜单Settings | Editor | General | Code Completion</p><ul><li>代码补全的时候，匹配候选代码忽略大小写，去掉勾选<strong>Match case</strong></li><li>代码补全时，<strong>勾选Show the documentation popup</strong>自动弹出方法用法文档(且<strong>等待时间缩短至100毫秒</strong>)</li><li>代码补全的时候，方法参数信息提示，<strong>三个都勾上</strong>，可以有类似于eclipse的提示方法参数</li></ul><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208150949.png" alt="image-20210208150949621"></p><h3 id="设置自动添加文件头（用于自动创建信息）又叫模板"><a href="#设置自动添加文件头（用于自动创建信息）又叫模板" class="headerlink" title="设置自动添加文件头（用于自动创建信息）又叫模板"></a>设置自动添加文件头（用于自动创建信息）又叫模板</h3><p>如下图，进入设置菜单Settings | Editor | File and Code Templates，直接增加<strong>File Header</strong>即可</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208152117.png" alt="image-20210208152117650"></p><h3 id="隐藏idea自带的-iml文件，以及-idea文件夹"><a href="#隐藏idea自带的-iml文件，以及-idea文件夹" class="headerlink" title="隐藏idea自带的.iml文件，以及.idea文件夹"></a>隐藏idea自带的.iml文件，以及.idea文件夹</h3><p>一般来说在文件目录中都是会存在一种idea自带的那个文件以及文件夹，在目录中看着是很不方便，所以避免不必要的干扰的话</p><p>进入设置菜单Settings | Editor | File Types。 在界面中找到<strong>Ignored File and Folder，</strong>老版本在界面最右下角，在<strong>Ignored File and Folder</strong>列表最后<strong>增加“*.iml;*.idea;”</strong>——==请注意最后是有个分号的==</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><h3 id="设置Git"><a href="#设置Git" class="headerlink" title="设置Git"></a>设置Git</h3><p>这个Git我们是经常使用的，所以直接配置，因为本人本地已经安装了的那个Git，所以可以说是直接搜索到</p><p>对于没有配置的同学来说进入设置菜单Settings | Version Control | Git ，找到<strong>Path to Git excutable</strong>中输入本地已经安装git.exe全软件的路径</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208152522.png" alt="image-20210208152522230"></p><h3 id="设置Maven"><a href="#设置Maven" class="headerlink" title="设置Maven"></a>设置Maven</h3><p>本地电脑已经单独安装了Maven3.6.3，并且在maven config 目录下配置了settings.xml配置文件，所以直接在settings.xml文件中修改</p><ul><li>本地存储路径</li><li>远程仓库使用的路劲</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 这里大约在五十多行的时候--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>E:\Program_Files\apache-maven-3.6.3\repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>  中间内容省略 <span class="token comment" spellcheck="true">&lt;!--这里大约在一百七十多行的时候--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><p>进入设置菜单Settings | Build, Exceution,Deployment | Build Tools | Maven</p><p>如下图选择你所需要的版本，因为已经配置好了，不适用IDEA自带的那个maven3的版本了对应下面仓库，以及C盘的settings.xml配置请直接替换</p><p>==设置后需要点<code>Apply</code>按钮生效==</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208153127.png" alt="image-20210208153127561"></p><h3 id="设置Gradle"><a href="#设置Gradle" class="headerlink" title="设置Gradle"></a>设置Gradle</h3><p>如下图，进入设置菜单Settings | Build, Exceution,Deployment | Build Tools | Gradle设置Home路径即可</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208153422.png" alt="image-20210208153422129"></p><h3 id="关闭自动更新"><a href="#关闭自动更新" class="headerlink" title="关闭自动更新"></a>关闭自动更新</h3><p>进入设置菜单Settings | Appearance &amp; Behavior | System Settings | Updates，去掉勾选自动Idea软件更新。 如希望更新，可以手动点 Check Now按钮</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208153543.png" alt="image-20210208153543366"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>如下图，进图设置菜单Settings | Plugins，搜索你想要下载的插件</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210208153647.png" alt="image-20210208153647316"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="2020/09/01/hou-duan/spring/springcloud/springcloud/"/>
      <url>2020/09/01/hou-duan/spring/springcloud/springcloud/</url>
      
        <content type="html"><![CDATA[<h1 id="前提知识点"><a href="#前提知识点" class="headerlink" title="前提知识点"></a>前提知识点</h1><ul><li>JavaEE</li><li>数据库</li><li>前端</li><li>Sevlet</li><li>Http</li><li>MyBatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>Dubbo、Zookeeper、分布式基础</li><li>Maven、Git</li><li>Ajax、Json</li><li>……</li></ul><h1 id="SpringCloud是什么"><a href="#SpringCloud是什么" class="headerlink" title="SpringCloud是什么"></a>SpringCloud是什么</h1><p>所谓的SpringCloud就是一套建立在SpringBoot上的常见的分布式系统模型，是微服务的一站式解决方案，包括服务发现注册、配置中心、负载均衡、短融器、数据监控、消息总线等</p><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p><code>Eureka</code>是SpringCloud的服务发现框架，是基于<code>REST</code>的服务，主要运行在<code>AWS</code>云上用于定位，还附带了一个<code>EurekaClient</code>组件，客户端具有一个内置的负载平衡器，Eureka是<code>Netfix</code>其中的一个分支，基于流量之类的提供加权的负载均衡</p><p>基本来说<code>Eureka</code>是一个服务发现框架，多个服务集中在这个框架进行一个列表发现</p><p>差不多可以说是按照一个淘宝一样的意思，我们购买者是消费者<code>Consumer</code>，商家是提供者<code>Provider</code>，淘宝相当于说是<code>Eureka</code>；当我们自己<code>Consumer</code>想要买东西的时候，如果直接去找商家<code>Provider</code>，这样可能会耗费大量的时间和精力，付出和收获不一定成正比，所以淘宝充当与中间商的角色，<code>Provider</code>在<code>Eureka</code>进行一个注册商品提供列表，<code>Consumer</code>在<code>Eureka</code>上进行一个获取商品信息，这就衍生出了以下的问题</p><ol><li><code>Provider</code>是否需要定期购买店铺地址，不购买了，是不是需要移除</li><li><code>Consumer</code>是不是也需要注册一个地址</li><li>淘宝可以不可以多个一起</li></ol><p><img src="http://nanxiang-liu.test.upcdn.net/image/SpringCloudEureka%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9E%8B.png" alt="SpringCloudEureka简单模型"></p><p>简单来说：</p><p><strong>服务发现</strong>：就是一个淘宝，整个过程有三个角色</p><p><strong>服务提供者</strong>：把自己能够提供的一些东西提供给外界</p><p><strong>服务消费者</strong>：需要这些东西的用户</p><p><strong>服务中心</strong>：就是服务提供者和服务消费者之间的桥梁，服务提供者可以自己注册到服务中心那边去，服务消费者如果需要消费一些服务的话就寻找注册到服务中心的服务提供者</p><p><strong>服务注册Register</strong>：当Eureka向<code>Eureka Server</code>注册的时候，会提供自身所拥有的元素据（URL、端口、运行情况，主页）</p><p><strong>服务续约Renew</strong></p><p>店铺提供者（提供者Eureka Client Provider）在淘宝（服务器<code>Eureka Server</code>）定时租借地址，淘宝（服务器<code>Eureka Server</code>）收到后继续保留地址信息，官方解释说是：<code>Eureka</code>每隔30s发送一次心跳检测机制来进行续约，通过续约来告知<code>Eureka Server</code>这个地址保留存在，当<code>Eureka Server</code>在90s内没有收到Eureka的续约的时候就会把这个地址从列表内剔除</p><p><strong>获取注册列表信息 Fetch Registries</strong></p><p>Eureka客户端从服务器获取注册信息，并将其缓存在本地（官方说没有后端存储），客户端会使用该信息查找其他服务，从而进行远程调用，该注册信息会在30s更新一次（默认的情况下）每次返回注册信息可能与本地缓存的信息不同，Eureka自动进行处理更新。如果因为某些原因导致注册列表信息不能及时匹配，Eureka客户端会重新获取整个注册表信息，Eureka服务器缓存注册列表信息，整个注册列表以及每个应用程序的信息都进行了压缩，压缩内容和没有压缩的内容完全相同，双方之间可以通过JSON进行通信，默认是Eureka使用压缩JSON获取注册信息；</p><p>根据模型理解就是：消费者（Eureka Client Consumer）去淘宝（<code>Eureka Server</code>）获取所有的店铺信息（注册列表Eureka Client List），并且消费者定期F5（服务器<code>Eureka Server</code>）获取并更新本地列表</p><p><strong>服务心跳检测Health Checks</strong></p><p>默认情况下，Eureka使用客户端心跳来确定客户端是否启动。除非另有说明，否则按照Spring Boot Actuator的规定，Discovery Client不会传播应用程序的当前运行状况检查状态。因此，在成功注册后，Eureka始终宣布该应用程序处于“启动”状态。可以通过启用Eureka运行状况检查来更改此行为，这会导致应用程序状态传播到Eureka。结果，其他所有应用程序都不会将流量发送到“ UP”以外的其他状态的应用程序</p><p><strong>服务下线Cancel</strong></p><p>Eureka客户端在程序关闭时向Eureka服务器发送取消请求。 发送请求后，该客户端实例信息将从服务器的实例注册表中删除。该下线请求不会自动完成，它需要调用以下内容：<code>DiscoveryManager.getInstance().shutdownComponent()</code></p><h2 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h2><p>一般来说默认的情况下，Eureka会在90秒内没有收到某个客户端发送的信号的话会自动将这个服务下线，但是基于现实的情况，微服务架构一般采用的是跨进程进行调用的，所以可能会出现那种微服务状态正常，网络分区故障，导致此实例被注销。</p><p>固定时间内大量实例被注销，可能会严重威胁整个微服务架构的可用性。为了解决这个问题，Eureka 开发了自我保护机制，那么什么是自我保护机制呢？</p><p><code>Eureka Server</code> 在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，<code>Eureka Server</code> 即会进入自我保护机制</p><p>自我保护机制启动的情况：</p><ul><li>Eureka不再进行一个服务注销</li><li>可以接受注册和注销服务，但是不会启动同步到其余节点上</li><li>网络稳定的时候，新注册的节点会同步到其余节点上</li></ul><p>这个是为了防止误杀的一个操作，当个别客户端出现失联的情况这个会认为是正常的，但是当<code>Eureka</code>捕获到大面积的提供者失联的情况的时候会认为是网络问题或传输出现了失误，进入到自我保护机制的情况下，当<code>Eureka</code>检测到<code>Provider</code>恢复的时候则会退出这个保护机制</p><p>通过如下配置进行一个是否开启保护机制</p><pre class=" language-yaml"><code class="language-yaml">eureka.server.enable<span class="token punctuation">-</span>self<span class="token punctuation">-</span>preservation=true</code></pre><h2 id="Eureka集群"><a href="#Eureka集群" class="headerlink" title="Eureka集群"></a>Eureka集群</h2><p>这时候假设淘宝开分店了，有淘宝，天猫，支付宝（虽然本来就是同一个集团旗下产品）组成了一个集团（集群）分布在不同的城市，比如：淘宝在杭州，天猫在北京，支付宝在上海，这样三个地方的机房就组成了一个集群，只要三个机房的任意一个地方不出问题都不会影响整体架构</p><p>Eureka集群相互之间通过Replicate来同步数据，相互之间不分主节点和节点，所有的架构都是平等的，在这种架构中，节点之间通过相互注册来实现高可用，每个节点之间都需要添加一个或多个有效的serverURL地址指向其余节点</p><p> Eureka Server 集群相互之间通过 Replicate 来同步数据，相互之间不区分主节点和从节点，所有的节点都是平等的。在这种架构中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的 serviceUrl 指向其他节点</p><p>如果某台<code>Eureka Server</code>宕机，<code>Eureka Client</code>的请求会自动切换到新的<code>Eureka Server</code>节点。当宕机的服务器重新恢复后，Eureka 会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行节点间复制，将请求复制到其它 <code>Eureka Server</code> 当前所知的所有节点中</p><p>另外 <code>Eureka Server</code> 的同步遵循着一个非常简单的原则：只要有一条边将节点连接，就可以进行信息传播与同步。所以，如果存在多个节点，只需要将节点之间两两连接起来形成通路，那么其它注册中心都可以共享信息。每个 <code>Eureka Server</code> 同时也是 Eureka Client，多个 <code>Eureka Server</code> 之间通过 P2P 的方式完成服务注册表的同步</p><p><code>Eureka Server</code>集群之间的状态是采用异步方式同步的，所以不保证节点间的状态一定是一致的，不过基本能保证最终状态是一致的</p><h3 id="Eureka分区"><a href="#Eureka分区" class="headerlink" title="Eureka分区"></a>Eureka分区</h3><p><code>Eureka</code>提供了两种概念的分区：<code>Region</code> AND <code>Zone</code>，两种分区都是来自亚马逊的<code>AWS</code></p><h4 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h4><p>可以说是地域分区的概念，也就是说，欧洲地区、美洲地区、亚太地区或亚太地区中的浙江省，杭州市，如此分区，没有具体的大小限制，可以根据项目中的具体情况进行自行分配大小</p><h4 id="Zone"><a href="#Zone" class="headerlink" title="Zone"></a>Zone</h4><p>类似于地区中的机房，比如广东省，深圳市下有三个机房的话，可以说是区分成zone1、zone2</p><h3 id="Eurka保证AP"><a href="#Eurka保证AP" class="headerlink" title="Eurka保证AP"></a>Eurka保证AP</h3><p><code>Eureka Server</code>各个节点是同一等级的，无论是哪个节点挂B了，其余节点都是可以说是进行继续注册和查询服务，当<code>Eureka Server</code>向某个<code>Eurka</code>进行注册的时候，如果发现了这个节点挂B了， 没有办法进行注册了，那么就会调用剩余的<code>Eurka</code>进行注册，只要有一台的节点可用的，那么就可以说是保证服务正常运行（保证其高可用性），但是查出来的数据不一定是最新的（节点之间还需互相同步，不保证高度的一致性）</p><h2 id="Eurka工作原理"><a href="#Eurka工作原理" class="headerlink" title="Eurka工作原理"></a>Eurka工作原理</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign</title>
      <link href="2020/09/01/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/feign/feign/"/>
      <url>2020/09/01/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/feign/feign/</url>
      
        <content type="html"><![CDATA[<h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p> 是由 Netflix 开源的<strong>声明式的 HTTP 客户端</strong>，目前已经捐献给 <a href="https://github.com/OpenFeign" target="_blank" rel="noopener">OpenFeign</a> 社区。</p><p> 是一个http请求调用的轻量级框架，可以以Java接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用。Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的请求，这种请求相对而言比较直观。</p><p>相比使用 RestTemplate 实现服务的调用，Feign 简化了代码的编写，提高了代码的可读性，大大提升了开发的效率。</p><h2 id="Feign解决了什么问题？"><a href="#Feign解决了什么问题？" class="headerlink" title="Feign解决了什么问题？"></a>Feign解决了什么问题？</h2><p>在服务调用的场景中，我们经常调用基于Http协议的服务，而我们经常使用到的框架可能有HttpURLConnection、Apache HttpComponnets、OkHttp3 、Netty等等，这些框架在基于自身的专注点提供了自身特性。而从角色划分上来看，他们的职能是一致的提供Http调用服务。具体流程如下：</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210221115229.png" alt="image-20201207235257603"></p><h2 id="处理过程图"><a href="#处理过程图" class="headerlink" title="处理过程图"></a><strong>处理过程图</strong></h2><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304102550.png" alt="在这里插入图片描述"></p><h3 id="基于面向接口的动态代理方式生成实现类"><a href="#基于面向接口的动态代理方式生成实现类" class="headerlink" title="基于面向接口的动态代理方式生成实现类"></a>基于面向接口的动态代理方式生成实现类</h3><p>在使用feign 时，会定义对应的接口类，在接口类上使用Http相关的注解，标识HTTP请求参数信息,如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">GitHub</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestLine</span><span class="token punctuation">(</span><span class="token string">"GET /repos/{owner}/{repo}/contributors"</span><span class="token punctuation">)</span>  List<span class="token operator">&lt;</span>Contributor<span class="token operator">></span> <span class="token function">contributors</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"owner"</span><span class="token punctuation">)</span> String owner<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"repo"</span><span class="token punctuation">)</span> String repo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Contributor</span> <span class="token punctuation">{</span>  String login<span class="token punctuation">;</span>  <span class="token keyword">int</span> contributions<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    GitHub github <span class="token operator">=</span> Feign<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">decoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GsonDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>GitHub<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"https://api.github.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Fetch and print a list of the contributors to this library.</span>    List<span class="token operator">&lt;</span>Contributor<span class="token operator">></span> contributors <span class="token operator">=</span> github<span class="token punctuation">.</span><span class="token function">contributors</span><span class="token punctuation">(</span><span class="token string">"OpenFeign"</span><span class="token punctuation">,</span> <span class="token string">"feign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Contributor contributor <span class="token operator">:</span> contributors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contributor<span class="token punctuation">.</span>login <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> contributor<span class="token punctuation">.</span>contributions <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在Feign 底层，通过基于面向接口的动态代理方式生成实现类，将请求调用委托到动态代理实现类，基本原理如下所示：</p><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304102555.png" alt="img"></p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectiveFeign</span> <span class="token keyword">extends</span> <span class="token class-name">Feign</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">///省略部分代码</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据接口类和Contract协议解析方式，解析接口类上的方法和注解，转换成内部的MethodHandler处理方式</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> nameToHandler <span class="token operator">=</span> targetToHandlersByName<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> methodToHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>DefaultMethodHandler<span class="token operator">></span> defaultMethodHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>DefaultMethodHandler<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultMethodHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMethodHandler</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultMethodHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        methodToHandler<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        methodToHandler<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> nameToHandler<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Feign<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    InvocationHandler handler <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> methodToHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 基于Proxy.newProxyInstance 为接口类创建动态实现，将所有的请求转换给InvocationHandler 处理。</span>    T proxy <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>DefaultMethodHandler defaultMethodHandler <span class="token operator">:</span> defaultMethodHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      defaultMethodHandler<span class="token punctuation">.</span><span class="token function">bindTo</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//省略部分代码</span></code></pre><p>所有的请求都会经过feign.ReflectiveFeign.FeignInvocationHandler#invoke</p><p><img src="assets/image-20201208001001222.png" alt="image-20201208001001222"></p><h3 id="PHASE-2-根据Contract协议规则，解析接口类的注解信息，解析成内部表现："><a href="#PHASE-2-根据Contract协议规则，解析接口类的注解信息，解析成内部表现：" class="headerlink" title="PHASE 2. 根据Contract协议规则，解析接口类的注解信息，解析成内部表现："></a>PHASE 2. 根据Contract协议规则，解析接口类的注解信息，解析成内部表现：</h3><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304102600.png" alt="在这里插入图片描述"></p><p>Feign 定义了转换协议，定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Defines what annotations and values are valid on interfaces. */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Contract</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * Called to parse the methods in the class that are linked to HTTP requests.   * 传入接口定义，解析成相应的方法内部元数据表示   * @param targetType {@link feign.Target#type() type} of the Feign interface.   */</span>  <span class="token comment" spellcheck="true">// TODO: break this and correct spelling at some point</span>  List<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> <span class="token function">parseAndValidatateMetadata</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>Contract.BaseContract是个抽象类，<ul><li>processAnnotationOnClass、解析类上的注解</li><li>processAnnotationOnMethod、解析方法上的注解</li><li>processAnnotationsOnParameter、解析参数上的注解</li></ul></li><li>它的parseAndValidatateMetadata方法的实现主要是调用了parseAndValidateMetadata方法，而该方法会调用processAnnotationOnClass、processAnnotationOnMethod、processAnnotationsOnParameter这些方法</li></ul><blockquote><p>Contract.Default继承了BaseContract，其processAnnotationOnClass方法处理feign.Headers注解；其processAnnotationOnMethod方法处理feign.RequestLine、feign.Body注解；其processAnnotationsOnParameter方法处理feign.Param、feign.QueryMap、feign.HeaderMap注解</p></blockquote><p>Feign 默认的协议规范</p><table><thead><tr><th>注解</th><th>接口Target</th><th>使用说明</th></tr></thead><tbody><tr><td><code>@RequestLine</code></td><td>方法上</td><td>定义HttpMethod 和 UriTemplate. UriTemplate 中使用<code>{}</code> 包裹的表达式，可以通过在方法参数上使用@Param 自动注入</td></tr><tr><td><code>@Param</code></td><td>方法参数</td><td>定义模板变量，模板变量的值可以使用名称的方式使用模板注入解析</td></tr><tr><td><code>@Headers</code></td><td>类上或者方法上</td><td>定义头部模板变量，使用@Param 注解提供参数值的注入。如果该注解添加在接口类上，则所有的请求都会携带对应的Header信息；如果在方法上，则只会添加到对应的方法请求上</td></tr><tr><td><code>@QueryMap</code></td><td>方法上</td><td>定义一个键值对或者 pojo，参数值将会被转换成URL上的 query 字符串上</td></tr><tr><td><code>@HeaderMap</code></td><td>方法上</td><td>定义一个HeaderMap, 与 UrlTemplate 和HeaderTemplate 类型，可以使用@Param 注解提供参数值</td></tr></tbody></table><h4 id="基于Spring-MVC的协议规范SpringMvcContract"><a href="#基于Spring-MVC的协议规范SpringMvcContract" class="headerlink" title="基于Spring MVC的协议规范SpringMvcContract:"></a>基于Spring MVC的协议规范SpringMvcContract:</h4><p>当前Spring Cloud 微服务解决方案中，为了降低学习成本，采用了Spring MVC的部分注解来完成 请求协议解析，也就是说 ，写客户端请求接口和像写服务端代码一样：客户端和服务端可以通过SDK的方式进行约定，客户端只需要引入服务端发布的SDK API，就可以使用面向接口的编码方式对接服务：</p><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304102602.png" alt="在这里插入图片描述"></p><h3 id="PHASE-3-基于-RequestBean，动态生成Request"><a href="#PHASE-3-基于-RequestBean，动态生成Request" class="headerlink" title="PHASE 3. 基于 RequestBean，动态生成Request"></a>PHASE 3. 基于 RequestBean，动态生成Request</h3><p>根据传入的Bean对象和注解信息，从中提取出相应的值，来构造Http Request 对象：</p><p><img src="http://nanxiang-liu.test.upcdn.net/%20image/20210221115248" alt="img"></p><h3 id="PHASE-4-使用Encoder-将Bean转换成-Http报文正文（消息解析和转码逻辑）"><a href="#PHASE-4-使用Encoder-将Bean转换成-Http报文正文（消息解析和转码逻辑）" class="headerlink" title="PHASE 4. 使用Encoder 将Bean转换成 Http报文正文（消息解析和转码逻辑）"></a>PHASE 4. 使用Encoder 将Bean转换成 Http报文正文（消息解析和转码逻辑）</h3><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304102605.png" alt="在这里插入图片描述"></p><p>目前Feign 有以下实现：</p><table><thead><tr><th>Encoder/ Decoder 实现</th><th>说明</th></tr></thead><tbody><tr><td>JacksonEncoder，JacksonDecoder</td><td>基于 Jackson 格式的持久化转换协议</td></tr><tr><td>GsonEncoder，GsonDecoder</td><td>基于Google GSON 格式的持久化转换协议</td></tr><tr><td>SaxEncoder，SaxDecoder</td><td>基于XML 格式的Sax 库持久化转换协议</td></tr><tr><td>JAXBEncoder，JAXBDecoder</td><td>基于XML 格式的JAXB 库持久化转换协议</td></tr><tr><td>ResponseEntityEncoder，ResponseEntityDecoder</td><td>Spring MVC 基于 ResponseEntity&lt; T &gt; 返回格式的转换协议</td></tr><tr><td>SpringEncoder，SpringDecoder</td><td>基于Spring MVC HttpMessageConverters 一套机制实现的转换协议 ,应用于Spring Cloud 体系中</td></tr></tbody></table><h3 id="PHASE-5-拦截器负责对请求和返回进行装饰处理"><a href="#PHASE-5-拦截器负责对请求和返回进行装饰处理" class="headerlink" title="PHASE 5. 拦截器负责对请求和返回进行装饰处理"></a>PHASE 5. 拦截器负责对请求和返回进行装饰处理</h3><p>在请求转换的过程中，Feign 抽象出来了拦截器接口，用于用户自定义对请求的操作：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 可以在构造RequestTemplate 请求时，增加或者修改Header, Method, Body 等信息   * Called for every request. Add data using methods on the supplied {@link RequestTemplate}.   */</span>  <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>RequestTemplate template<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="PHASE-6-日志记录"><a href="#PHASE-6-日志记录" class="headerlink" title="PHASE 6. 日志记录"></a>PHASE 6. 日志记录</h3><p>在发送和接收请求的时候，Feign定义了统一的日志门面来输出日志信息 , 并且将日志的输出定义了四个等级：</p><table><thead><tr><th>级别</th><th>说明</th></tr></thead><tbody><tr><td>NONE</td><td>不做任何记录</td></tr><tr><td>BASIC</td><td>只记录输出Http 方法名称、请求URL、返回状态码和执行时间</td></tr><tr><td>HEADERS</td><td>记录输出Http 方法名称、请求URL、返回状态码和执行时间 和 Header 信息</td></tr><tr><td>FULL</td><td>记录Request 和Response的Header，Body和一些请求元数据</td></tr></tbody></table><h3 id="PHASE-7-基于重试器发送HTTP请求"><a href="#PHASE-7-基于重试器发送HTTP请求" class="headerlink" title="PHASE 7 . 基于重试器发送HTTP请求"></a>PHASE 7 . 基于重试器发送HTTP请求</h3><p>Feign 内置了一个重试器，当HTTP请求出现IO异常时，Feign会有一个最大尝试次数发送请求，以下是Feign核心</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousMethodHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MethodHandler</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 省略部分代码</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//根据输入参数，构造Http 请求。</span>    RequestTemplate template <span class="token operator">=</span> buildTemplateFromArgs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 克隆出一份重试器</span>    Retryer retryer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试最大次数，如果中间有结果，直接返回</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">executeAndDecode</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        retryer<span class="token punctuation">.</span><span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>          logger<span class="token punctuation">.</span><span class="token function">logRetry</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>重试器有如下几个控制参数：</p><table><thead><tr><th>重试参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>period</td><td>初始重试时间间隔，当请求失败后，重试器将会暂停 初始时间间隔(线程 sleep 的方式)后再开始，避免强刷请求，浪费性能</td><td>100ms</td></tr><tr><td>maxPeriod</td><td>当请求连续失败时，重试的时间间隔将按照：<code>long interval = (long) (period * Math.pow(1.5, attempt - 1));</code> 计算，按照等比例方式延长，但是最大间隔时间为 maxPeriod, 设置此值能够避免 重试次数过多的情况下执行周期太长</td><td>1000ms</td></tr><tr><td>maxAttempts</td><td>最大重试次数</td><td></td></tr></tbody></table><h3 id="PHASE-8-发送Http请求"><a href="#PHASE-8-发送Http请求" class="headerlink" title="PHASE 8. 发送Http请求"></a>PHASE 8. 发送Http请求</h3><p>Feign 真正发送HTTP请求是委托给 <code>feign.Client</code> 来做的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * Executes a request against its {@link Request#url() url} and returns a response.   *  执行Http请求，并返回Response   * @param request safe to replay.   * @param options options to apply to this request.   * @return connected response, {@link Response.Body} is absent or unread.   * @throws IOException on a network error connecting to {@link Request#url()}.   */</span>  Response <span class="token function">execute</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Options options<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>Feign 默认底层通过JDK 的 <code>java.net.HttpURLConnection</code> 实现了<code>feign.Client</code>接口类,在每次发送请求的时候，都会创建新的HttpURLConnection 链接，这也就是为什么默认情况下Feign的性能很差的原因。可以通过拓展该接口，使用Apache HttpClient 或者OkHttp3等基于连接池的高性能Http客户端，我们项目内部使用的就是OkHttp3作为Http 客户端。</p><h1 id="Feign动态代理"><a href="#Feign动态代理" class="headerlink" title="Feign动态代理"></a>Feign动态代理</h1><p><code>Feign</code> 的基本用法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. Feign 动态代理</span>GitHub github <span class="token operator">=</span> Feign<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">decoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GsonDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>GitHub<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"https://api.github.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. Feign 执行</span>List<span class="token operator">&lt;</span>Contributor<span class="token operator">></span> contributors <span class="token operator">=</span> github<span class="token punctuation">.</span><span class="token function">contributors</span><span class="token punctuation">(</span><span class="token string">"OpenFeign"</span><span class="token punctuation">,</span> <span class="token string">"feign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>总结：</strong> <code>Feign</code> 使用时分成两步：一是生成 Feign 的动态代理；二是 Feign 执行。</p><h2 id="JDK的动态代理"><a href="#JDK的动态代理" class="headerlink" title="JDK的动态代理"></a>JDK的动态代理</h2><p>jdk的动态代理的简单示例</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * JDKDynamicProxy * jdkd动态代理 * * @author * @create 2018-03-29 16:17 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKDynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">JDKDynamicProxy</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取被代理接口实例对象     * @param &lt;T>     * @return     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Do something before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Do something after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当使用getProxy获取的代理对象执行方法的的时候都会经过invoke方法</p><h2 id="Feign-动态代理"><a href="#Feign-动态代理" class="headerlink" title="Feign 动态代理"></a>Feign 动态代理</h2><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304102828.png" alt="img"></p><p>先了解一下 <code>Target</code> 这个对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 接口的类型</span>  Class<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 代理对象的名称，默认为url,负载均衡时有用</span>  String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 请求的url地址，eg: https://api/v2</span>  String <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有一个默认的实现，硬编码实现。其中 Target.type 是用来生成代理对象的，url 是 Client 对象发送请求的地址。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HardCodedTarget</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Target</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HardCodedTarget</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HardCodedTarget</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token function">checkNotNull</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">checkNotNull</span><span class="token punctuation">(</span><span class="token function">emptyToNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token function">checkNotNull</span><span class="token punctuation">(</span><span class="token function">emptyToNull</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>就像示例中的一样使用硬编码的方式构建。</p><p>Feign的默认实现是ReflectiveFeign。feign.Feign.Builder#build</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Feign <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//客户端 </span>            <span class="token comment" spellcheck="true">// client 有三种实现 JdkHttp/ApacheHttp/okHttp，默认是 jdk 的实现</span>      Client client <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重试参数</span>      Retryer retryer <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>RequestInterceptor<span class="token operator">></span> requestInterceptors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestInterceptors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ri <span class="token operator">-</span><span class="token operator">></span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//日志</span>      Logger logger <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//契约</span>      Contract contract <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>contract<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>      Options options <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编码器</span>      Encoder encoder <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoder<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解码器</span>      Decoder decoder <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>decoder<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//InvocationHandler的工厂类</span>      InvocationHandlerFactory invocationHandlerFactory <span class="token operator">=</span>          Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>invocationHandlerFactory<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>      QueryMapEncoder queryMapEncoder <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queryMapEncoder<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>      SynchronousMethodHandler<span class="token punctuation">.</span>Factory synchronousMethodHandlerFactory <span class="token operator">=</span>          <span class="token keyword">new</span> <span class="token class-name">SynchronousMethodHandler<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> retryer<span class="token punctuation">,</span> requestInterceptors<span class="token punctuation">,</span> logger<span class="token punctuation">,</span>              logLevel<span class="token punctuation">,</span> decode404<span class="token punctuation">,</span> closeAfterDecode<span class="token punctuation">,</span> propagationPolicy<span class="token punctuation">,</span> forceDecoding<span class="token punctuation">)</span><span class="token punctuation">;</span>      ParseHandlersByName handlersByName <span class="token operator">=</span>          <span class="token keyword">new</span> <span class="token class-name">ParseHandlersByName</span><span class="token punctuation">(</span>contract<span class="token punctuation">,</span> options<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">,</span>              errorDecoder<span class="token punctuation">,</span> synchronousMethodHandlerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveFeign</span><span class="token punctuation">(</span>handlersByName<span class="token punctuation">,</span> invocationHandlerFactory<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="生成代理对象"><a href="#生成代理对象" class="headerlink" title="生成代理对象"></a>生成代理对象</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1Contract 将 target.type 接口类上的方法和注解解析成 MethodMetadata，</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> nameToHandler <span class="token operator">=</span> targetToHandlersByName<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> methodToHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>DefaultMethodHandler<span class="token operator">></span> defaultMethodHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>DefaultMethodHandler<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//过滤掉公共方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Util<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            DefaultMethodHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMethodHandler</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            defaultMethodHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            methodToHandler<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将需要处理的方法，以method为key，MethodHandler为value</span>            methodToHandler<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> nameToHandler<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Feign<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 生成 target.type 的 jdk 动态代理对象</span>    InvocationHandler handler <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> methodToHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    T proxy <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将默认不处理的方法，从动态代理中去除</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>DefaultMethodHandler defaultMethodHandler <span class="token operator">:</span> defaultMethodHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        defaultMethodHandler<span class="token punctuation">.</span><span class="token function">bindTo</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> proxy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304102828.png" alt="image-20201210003632911"></p><p> newInstance 生成了 JDK 的动态代理，从 <code>factory.create(target, methodToHandler)</code> 也可以看出 InvocationHandler 实际委托给了 methodToHandler。methodToHandler 默认是 SynchronousMethodHandler.Factory 工厂类创建的。</p><h1 id="MethodHandler-方法执行器"><a href="#MethodHandler-方法执行器" class="headerlink" title="MethodHandler 方法执行器"></a>MethodHandler 方法执行器</h1><p>ParseHandlersByName.apply 生成了每个方法的执行器 MethodHandler，其中最重要的一步就是通过 Contract 解析 MethodMetadata。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>Target key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. contract 将接口类中的方法和注解解析 MethodMetadata</span>    List<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> metadata <span class="token operator">=</span> contract<span class="token punctuation">.</span><span class="token function">parseAndValidatateMetadata</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata md <span class="token operator">:</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. buildTemplate 实际上将 Method 方法的参数转换成 Request</span>        BuildTemplateByResolvingArgs buildTemplate<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>md<span class="token punctuation">.</span><span class="token function">formParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> md<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.1 表单</span>            buildTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuildFormEncodedTemplateFromArgs</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">bodyIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.2 @Body 注解</span>            buildTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuildEncodedTemplateFromArgs</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.3 其余</span>            buildTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuildTemplateByResolvingArgs</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3. 将 metadata 和 buildTemplate 封装成 MethodHandler</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> md<span class="token punctuation">,</span> buildTemplate<span class="token punctuation">,</span> options<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> errorDecoder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="合约"><a href="#合约" class="headerlink" title="合约"></a>合约</h2><p>Contract的中文意义是合约，parseAndValidatateMetadata的作用顾名思义就是将我们传入的接口进行解析验证，看注解的使用是否符合规范，然后返回给我们接口上各种相应的元数据。</p><h3 id="BaseContract-子类"><a href="#BaseContract-子类" class="headerlink" title="BaseContract 子类"></a>BaseContract 子类</h3><p>其主要逻辑是验证我们使用的时候是否符合了规范。<br>抽取元数据的逻辑留给了子类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> <span class="token function">parseAndValidatateMetadata</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//检查传入的接口不能带有泛型</span>      <span class="token function">checkState</span><span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getTypeParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Parameterized types unsupported: %s"</span><span class="token punctuation">,</span>                 targetType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//检查传入的接口最多只能有一个父接口</span>      <span class="token function">checkState</span><span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Only single inheritance supported: %s"</span><span class="token punctuation">,</span>                 targetType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//找到传入的接口的父接口，父接口必须没有接口了。既整个继承体系只能有一层</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkState</span><span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span>                   <span class="token string">"Only single-level inheritance supported: %s"</span><span class="token punctuation">,</span>                   targetType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//新建一个结果集容器</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodMetadata<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodMetadata<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//取得接口里面的所有public方法，包括从父接口继承而来的</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> targetType<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//排除掉从Object继承的方法，static方法，接口中的default方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Modifier<span class="token punctuation">.</span>STATIC<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span>            Util<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//</span>        MethodMetadata metadata <span class="token operator">=</span> <span class="token function">parseAndValidateMetadata</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkState</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Overrides unsupported: %s"</span><span class="token punctuation">,</span>                   metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="解析接口中的单个方法"><a href="#解析接口中的单个方法" class="headerlink" title="解析接口中的单个方法"></a>解析接口中的单个方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> MethodMetadata <span class="token function">parseAndValidateMetadata</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetType<span class="token punctuation">,</span> Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//方法元数据封装类</span>      MethodMetadata data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//解析出方法的返回类型</span>      data<span class="token punctuation">.</span><span class="token function">returnType</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//用Feign中的静态方法configKey解析出接口&amp;方法作为一种String key</span>      data<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span>Feign<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果传入的接口有一个父接口，处理父接口上的注解，放入MethodMetadata</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processAnnotationOnClass</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> targetType<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//处理传入的这个接口上自己的注解</span>      <span class="token function">processAnnotationOnClass</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//注意这个方法虚方法，留给了子类去实现。</span>      <span class="token comment" spellcheck="true">//处理这个方法上的注解，同样是虚方法</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Annotation methodAnnotation <span class="token operator">:</span> method<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processAnnotationOnMethod</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> methodAnnotation<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//检查data里面template是否已放入了这个方法关于HHTP method的信息，比如时GET方法，POST方法之类的。这个操作之前应该是由processAnnotationOnMethod去实现的。</span>      <span class="token function">checkState</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">,</span>                 <span class="token string">"Method %s not annotated with HTTP method type (ex. GET, POST)"</span><span class="token punctuation">,</span>                 method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//得到方法的参数类型</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//得到参数的泛型信息</span>      Type<span class="token punctuation">[</span><span class="token punctuation">]</span> genericParameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//得到方法的参数上的在注解</span>      Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterAnnotations <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//遍历参数的注解</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> parameterAnnotations<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isHttpAnnotation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否是一个“http注解”？</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterAnnotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          isHttpAnnotation <span class="token operator">=</span> <span class="token function">processAnnotationsOnParameter</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> parameterAnnotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果参数是URL类型的，data中放入urlIndex?</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> URI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          data<span class="token punctuation">.</span><span class="token function">urlIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isHttpAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//如果“http注解”为false，检查data中formParams“表单参数”如果不为空，则报错。</span>          <span class="token comment" spellcheck="true">//body参数不能和form参数一起？？？？？</span>          <span class="token function">checkState</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">formParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token string">"Body parameters cannot be used with form parameters."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果data中bodyIndex不为空，？？？？？？？</span>          <span class="token function">checkState</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">bodyIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">,</span> <span class="token string">"Method has too many Body parameters: %s"</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//设置bodyIndex</span>          data<span class="token punctuation">.</span><span class="token function">bodyIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//设置bodyType？？？？</span>          data<span class="token punctuation">.</span><span class="token function">bodyType</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> genericParameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//检查headerMap所在的参数必须是一个Map类型，key为String</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkMapString</span><span class="token punctuation">(</span><span class="token string">"HeaderMap"</span><span class="token punctuation">,</span> parameterTypes<span class="token punctuation">[</span>data<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> genericParameterTypes<span class="token punctuation">[</span>data<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//同理</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkMapString</span><span class="token punctuation">(</span><span class="token string">"QueryMap"</span><span class="token punctuation">,</span> parameterTypes<span class="token punctuation">[</span>data<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> genericParameterTypes<span class="token punctuation">[</span>data<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="默认实现"><a href="#默认实现" class="headerlink" title="默认实现"></a>默认实现</h2><p>实现了以下3个方法的具体逻辑，负责抽取元信息<br>processAnnotationOnClass<br>processAnnotationOnMethod<br>processAnnotationsOnParameter</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">protected</span> <span class="token keyword">final</span> void <span class="token function">processAnnotationOnClass</span><span class="token punctuation">(</span>MethodMetadata <span class="token keyword">data</span><span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> List<span class="token operator">&lt;</span>GuardedAnnotationProcessor<span class="token operator">></span> processors <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">annotation</span> <span class="token operator">-></span> classAnnotationProcessors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>processor <span class="token operator">-></span> processor<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">annotation</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">annotation</span> <span class="token operator">-></span> processors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>processor <span class="token operator">-></span> processor<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">annotation</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processor <span class="token operator">-></span> processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">annotation</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">data</span><span class="token punctuation">.</span><span class="token function">addWarning</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>            <span class="token string">"Class %s has no annotations, it may affect contract %s"</span><span class="token punctuation">,</span>            targetType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">data</span><span class="token punctuation">.</span><span class="token function">addWarning</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>            <span class="token string">"Class %s has annotations %s that are not used by contract %s"</span><span class="token punctuation">,</span>            targetType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>targetType<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">annotation</span> <span class="token operator">-></span> <span class="token keyword">annotation</span><span class="token punctuation">.</span><span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>最后都委托到feign.Contract.Default#Default进行处理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerClassAnnotation</span><span class="token punctuation">(</span>Headers<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>header<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> headersOnType <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkState</span><span class="token punctuation">(</span>headersOnType<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Headers annotation was empty on type %s."</span><span class="token punctuation">,</span>        data<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> headers <span class="token operator">=</span> <span class="token function">toMap</span><span class="token punctuation">(</span>headersOnType<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to clear</span>    data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerMethodAnnotation</span><span class="token punctuation">(</span>RequestLine<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ann<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String requestLine <span class="token operator">=</span> ann<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkState</span><span class="token punctuation">(</span><span class="token function">emptyToNull</span><span class="token punctuation">(</span>requestLine<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">,</span>        <span class="token string">"RequestLine annotation was empty on method %s."</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Matcher requestLineMatcher <span class="token operator">=</span> REQUEST_LINE_PATTERN<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>requestLine<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestLineMatcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>          <span class="token string">"RequestLine annotation didn't start with an HTTP verb on method %s"</span><span class="token punctuation">,</span>          data<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>requestLineMatcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>requestLineMatcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decodeSlash</span><span class="token punctuation">(</span>ann<span class="token punctuation">.</span><span class="token function">decodeSlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collectionFormat</span><span class="token punctuation">(</span>ann<span class="token punctuation">.</span><span class="token function">collectionFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerMethodAnnotation</span><span class="token punctuation">(</span>Body<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ann<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String body <span class="token operator">=</span> ann<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkState</span><span class="token punctuation">(</span><span class="token function">emptyToNull</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"Body annotation was empty on method %s."</span><span class="token punctuation">,</span>        data<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyTemplate</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerMethodAnnotation</span><span class="token punctuation">(</span>Headers<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>header<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> headersOnMethod <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkState</span><span class="token punctuation">(</span>headersOnMethod<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Headers annotation was empty on method %s."</span><span class="token punctuation">,</span>        data<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token function">toMap</span><span class="token punctuation">(</span>headersOnMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerParameterAnnotation</span><span class="token punctuation">(</span>Param<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>paramAnnotation<span class="token punctuation">,</span> data<span class="token punctuation">,</span> paramIndex<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> String name <span class="token operator">=</span> paramAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkState</span><span class="token punctuation">(</span><span class="token function">emptyToNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"Param annotation was empty on param %s."</span><span class="token punctuation">,</span>        paramIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">nameParam</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> name<span class="token punctuation">,</span> paramIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Param<span class="token punctuation">.</span>Expander</span><span class="token operator">></span> expander <span class="token operator">=</span> paramAnnotation<span class="token punctuation">.</span><span class="token function">expander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>expander <span class="token operator">!=</span> Param<span class="token punctuation">.</span>ToStringExpander<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span><span class="token function">indexToExpanderClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>paramIndex<span class="token punctuation">,</span> expander<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRequestVariable</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span><span class="token function">formParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerParameterAnnotation</span><span class="token punctuation">(</span>QueryMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>queryMap<span class="token punctuation">,</span> data<span class="token punctuation">,</span> paramIndex<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">checkState</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">,</span>        <span class="token string">"QueryMap annotation was present on multiple parameters."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span>paramIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">queryMapEncoded</span><span class="token punctuation">(</span>queryMap<span class="token punctuation">.</span><span class="token function">encoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">registerParameterAnnotation</span><span class="token punctuation">(</span>HeaderMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>queryMap<span class="token punctuation">,</span> data<span class="token punctuation">,</span> paramIndex<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">checkState</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">,</span>        <span class="token string">"HeaderMap annotation was present on multiple parameters."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span>paramIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Feign-默认的协议规范"><a href="#Feign-默认的协议规范" class="headerlink" title="Feign 默认的协议规范"></a>Feign 默认的协议规范</h2><table><thead><tr><th>注解</th><th>接口Target</th><th>使用说明</th></tr></thead><tbody><tr><td><code>@RequestLine</code></td><td>方法上</td><td>定义HttpMethod 和 UriTemplate. UriTemplate 中使用<code>{}</code> 包裹的表达式，可以通过在方法参数上使用@Param 自动注入</td></tr><tr><td><code>@Param</code></td><td>方法参数</td><td>定义模板变量，模板变量的值可以使用名称的方式使用模板注入解析</td></tr><tr><td><code>@Headers</code></td><td>类上或者方法上</td><td>定义头部模板变量，使用@Param 注解提供参数值的注入。如果该注解添加在接口类上，则所有的请求都会携带对应的Header信息；如果在方法上，则只会添加到对应的方法请求上</td></tr><tr><td><code>@QueryMap</code></td><td>方法上</td><td>定义一个键值对或者 pojo，参数值将会被转换成URL上的 query 字符串上</td></tr><tr><td><code>@HeaderMap</code></td><td>方法上</td><td>定义一个HeaderMap, 与 UrlTemplate 和HeaderTemplate 类型，可以使用@Param 注解提供参数值</td></tr></tbody></table><h2 id="MethodMetadata"><a href="#MethodMetadata" class="headerlink" title="MethodMetadata"></a>MethodMetadata</h2><p>目的就是为了屏蔽 <code>Feign、JAX-RS 1/2、Spring Web MVC</code> 等 REST 声明式注解的差异，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String configKey<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 方法签名，类全限名+方法全限名</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Type returnType<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法返回值类型</span><span class="token keyword">private</span> Integer urlIndex<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 方法参数为url时，为 urlIndex</span><span class="token keyword">private</span> Integer bodyIndex<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Body注解的对应的参数位置</span><span class="token keyword">private</span> Integer headerMapIndex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @HeaderMap参数注解的位置</span><span class="token keyword">private</span> Integer queryMapIndex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @QueryMap参数注解的位置</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> queryMapEncoded<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// @QueryMap注解的Encoded</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Type bodyType<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// @QueryMap注解的</span><span class="token keyword">private</span> RequestTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 核心</span><span class="token comment" spellcheck="true">//form表单提交的时候参数名称</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> formParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数的名称和位置的对应关系</span><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> indexToName <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数的位置和类型的对应关系</span><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Expander</span><span class="token operator">>></span> indexToExpanderClass <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Expander</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Boolean<span class="token operator">></span> indexToEncoded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Expander<span class="token operator">></span> indexToExpander<span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>类上只有一个注解：</p><ol><li>@Headers -&gt; data.template().headers</li></ol><p>方法上可能有三个注解：</p><ol><li>@RequestLine -&gt; data.template().method + data.template().uri</li><li>@Body -&gt; data.template().body</li><li>@Headers -&gt; data.template().headers</li></ol><p>参数上可能有三个注解：</p><ol><li>@Param-&gt; data.indexToName</li><li>@QueryMap-&gt; data.queryMapIndex</li><li>@HeaderMap-&gt; data.headerMapIndex</li></ol><p>Feign 如何兼容 JAX-RS 1/2、Spring Web MVC?</p><p>只需要实现自己的 Contract，将对应的注解信息解析成 MethodMetadata，即可完成适配工作。</p><ol><li><code>jaxrs</code> Feign 原生支持，感兴趣的可以看一下其实现：<code>feign.jaxrs.JAXRSContract</code></li><li><code>Spring Web MVC</code> Spring Cloud OpenFeign 提供了支持</li></ol>]]></content>
      
      
      <categories>
          
          <category> Feign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign请求模板</title>
      <link href="2020/09/01/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/feign/feign-qing-qiu-mo-ban/"/>
      <url>2020/09/01/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/feign/feign-qing-qiu-mo-ban/</url>
      
        <content type="html"><![CDATA[<blockquote><p>请求模板,用于根据解析的java信息转换为请求对象</p></blockquote><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304104142.png" alt="img"></p><p>FeignInvocationHandler的invoke方法在执行的时候又委托给了MethodHandler。</p><p><code>feign.ReflectiveFeign.FeignInvocationHandler#invoke</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Object otherHandler <span class="token operator">=</span>          args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">?</span> Proxy<span class="token punctuation">.</span><span class="token function">getInvocationHandler</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>otherHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dispatch 、    private final Map&lt;Method, MethodHandler> dispatch;</span>  <span class="token keyword">return</span> dispatch<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>MethodHandler默认使用的是SynchronousMethodHandler</p><p><code>feign.SynchronousMethodHandler#invoke</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//把请求参数解析为RequestTemplate</span>  RequestTemplate template <span class="token operator">=</span> buildTemplateFromArgs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//HTTP请求参数设置</span>  Options options <span class="token operator">=</span> <span class="token function">findOptions</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//http请求的重试参数</span>  Retryer retryer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果发生异常进行相对应的重试</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 然后到executeAndDecode方法，通过RequestTemplate生成Request请求对象，然后Http Client</span>      <span class="token keyword">return</span> <span class="token function">executeAndDecode</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        retryer<span class="token punctuation">.</span><span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> th<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Throwable cause <span class="token operator">=</span> th<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>propagationPolicy <span class="token operator">==</span> UNWRAP <span class="token operator">&amp;&amp;</span> cause <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> cause<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> th<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">logRetry</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="参数解析成-Request"><a href="#参数解析成-Request" class="headerlink" title="参数解析成 Request"></a>参数解析成 Request</h1><p>以 BuildTemplateByResolvingArgs 为例。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> RequestTemplate <span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RequestTemplate mutable <span class="token operator">=</span> RequestTemplate<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 解析url参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">urlIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> urlIndex <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">urlIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkArgument</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>urlIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">,</span>                      <span class="token string">"URI parameter %s was null"</span><span class="token punctuation">,</span> urlIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        mutable<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>urlIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 解析参数argv成对应的对象</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> varBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> entry <span class="token operator">:</span> metadata<span class="token punctuation">.</span><span class="token function">indexToName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object value <span class="token operator">=</span> argv<span class="token punctuation">[</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Null values are skipped.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>indexToExpander<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                value <span class="token operator">=</span> <span class="token function">expandElements</span><span class="token punctuation">(</span>indexToExpander<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                varBuilder<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">+</span>    <span class="token comment" spellcheck="true">// 3. @Body中的参数占位符</span>    RequestTemplate template <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> mutable<span class="token punctuation">,</span> varBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. @QueryMap</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// add query map parameters after initial resolve so that they take</span>        <span class="token comment" spellcheck="true">// precedence over any predefined values</span>        Object value <span class="token operator">=</span> argv<span class="token punctuation">[</span>metadata<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> queryMap <span class="token operator">=</span> <span class="token function">toQueryMap</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        template <span class="token operator">=</span> <span class="token function">addQueryMapQueryParameters</span><span class="token punctuation">(</span>queryMap<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. @HeaderMap</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        template <span class="token operator">=</span>            <span class="token function">addHeaderMapHeaders</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> argv<span class="token punctuation">[</span>metadata<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将方法的参数解析成 RequestTemplate 后就简单了，只需要调用 request 即可最终解析成 Request。可以看到 Request 包含了 Http 请求的全部信息。到此，Feign 的参数解析全部完成。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Request <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolved<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"template has not been resolved."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Request<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>#</p>]]></content>
      
      
      <categories>
          
          <category> Feign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign</title>
      <link href="2020/09/01/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/feign/feign-chong-shi-ji-zhi/"/>
      <url>2020/09/01/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/feign/feign-chong-shi-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="重试的流程"><a href="#重试的流程" class="headerlink" title="重试的流程"></a>重试的流程</h1><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>  RequestTemplate template <span class="token operator">=</span> buildTemplateFromArgs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  Options options <span class="token operator">=</span> <span class="token function">findOptions</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  Retryer retryer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">executeAndDecode</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        retryer<span class="token punctuation">.</span><span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> th<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Throwable cause <span class="token operator">=</span> th<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>propagationPolicy <span class="token operator">==</span> UNWRAP <span class="token operator">&amp;&amp;</span> cause <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> cause<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> th<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">logRetry</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果在执行请求的过程中抛出RetryableException异常,则需要进行重试,如果在重试的过程中还是抛出异常,则放弃重试</p><p><img src="https://chin-puff.oss-cn-beijing.aliyuncs.com/img/20210304104300.png" alt="image-20201215001231719"></p><p>即只有发生IOException的时候才会转化为RetryableException,其他的饱和HTTP响应码的是不会进行重试的.</p><h1 id="Retry-接口"><a href="#Retry-接口" class="headerlink" title="Retry 接口"></a>Retry 接口</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Retryer</span> <span class="token keyword">extends</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 如果重试被允许，返回（睡觉后可能）。 否则传播例外。   */</span>  <span class="token keyword">void</span> <span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>RetryableException e<span class="token punctuation">)</span><span class="token punctuation">;</span>  Retryer <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Default</span> <span class="token keyword">implements</span> <span class="token class-name">Retryer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 最大重试次数</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxAttempts<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重试的间隔</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> period<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最大重试间隔</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxPeriod<span class="token punctuation">;</span>    <span class="token keyword">int</span> attempt<span class="token punctuation">;</span>    <span class="token keyword">long</span> sleptForMillis<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Default类的默认无参构造函数，</span>    <span class="token comment" spellcheck="true">// 重试间隔100 ms，最大重试间隔1s，最大重试次数默认5次</span>    <span class="token keyword">public</span> <span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重试间隔，最大重试间隔，最大重试次数，attempt默认是1</span>    <span class="token keyword">public</span> <span class="token function">Default</span><span class="token punctuation">(</span><span class="token keyword">long</span> period<span class="token punctuation">,</span> <span class="token keyword">long</span> maxPeriod<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAttempts<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>period <span class="token operator">=</span> period<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>maxPeriod <span class="token operator">=</span> maxPeriod<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>maxAttempts <span class="token operator">=</span> maxAttempts<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>attempt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// visible for testing;</span>    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写了Retryer的方法continueOrPropagate</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>RetryableException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果重试的次数attempt大于最大重试次数，则抛出重试异常对象RetryableException</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>attempt<span class="token operator">++</span> <span class="token operator">>=</span> maxAttempts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//间隔</span>      <span class="token keyword">long</span> interval<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">retryAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        interval <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">retryAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//间隔不能大于最大间隔</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">></span> maxPeriod<span class="token punctuation">)</span> <span class="token punctuation">{</span>          interval <span class="token operator">=</span> maxPeriod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        interval <span class="token operator">=</span> <span class="token function">nextMaxInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      sleptForMillis <span class="token operator">+=</span> interval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 计算时间间隔为重试尝试。 的间隔呈指数增加每次尝试     * @return 时间从现在纳秒，直到下一次尝试。     */</span>    <span class="token keyword">long</span> <span class="token function">nextMaxInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">long</span> interval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>period <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> attempt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> interval <span class="token operator">></span> maxPeriod <span class="token operator">?</span> maxPeriod <span class="token operator">:</span> interval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Retryer <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Default</span><span class="token punctuation">(</span>period<span class="token punctuation">,</span> maxPeriod<span class="token punctuation">,</span> maxAttempts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 实现永不重试请求。 它传播RetryableException   */</span>  Retryer NEVER_RETRY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>RetryableException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Retryer <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Feign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign编码器</title>
      <link href="2020/09/01/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/feign/feign-bian-ma-qi/"/>
      <url>2020/09/01/hou-duan/spring/springcloud/springcloud-yuan-cheng-diao-yong/feign/feign-bian-ma-qi/</url>
      
        <content type="html"><![CDATA[<p>目前Feign 有以下实现：</p><table><thead><tr><th>Encoder/ Decoder 实现</th><th>说明</th></tr></thead><tbody><tr><td>JacksonEncoder，JacksonDecoder</td><td>基于 Jackson 格式的持久化转换协议</td></tr><tr><td>GsonEncoder，GsonDecoder</td><td>基于Google GSON 格式的持久化转换协议</td></tr><tr><td>SaxEncoder，SaxDecoder</td><td>基于XML 格式的Sax 库持久化转换协议</td></tr><tr><td>JAXBEncoder，JAXBDecoder</td><td>基于XML 格式的JAXB 库持久化转换协议</td></tr><tr><td>ResponseEntityEncoder，ResponseEntityDecoder</td><td>Spring MVC 基于 ResponseEntity&lt; T &gt; 返回格式的转换协议</td></tr><tr><td>SpringEncoder，SpringDecoder</td><td>基于Spring MVC HttpMessageConverters 一套机制实现的转换协议 ,应用于Spring Cloud 体系中</td></tr></tbody></table><h1 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h1><p>编码器将请求参数解析到RequestTemplate中（HTTP报文）。不是所有的请求都会使用到编码器，会在生成MethodHandler的时候决定使用何种模板解析。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>Target target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> metadata <span class="token operator">=</span> contract<span class="token punctuation">.</span><span class="token function">parseAndValidateMetadata</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata md <span class="token operator">:</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>      BuildTemplateByResolvingArgs buildTemplate<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>md<span class="token punctuation">.</span><span class="token function">formParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> md<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buildTemplate <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">BuildFormEncodedTemplateFromArgs</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">bodyIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buildTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuildEncodedTemplateFromArgs</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        buildTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuildTemplateByResolvingArgs</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">isIgnored</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is not a method handled by feign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> md<span class="token punctuation">,</span> buildTemplate<span class="token punctuation">,</span> options<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> errorDecoder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编码器的种类是在创建<code>ParseHandlersByName</code>的时候决定的<code>feign.Feign.Builder#build</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Feign <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Client client <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  Retryer retryer <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>RequestInterceptor<span class="token operator">></span> requestInterceptors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestInterceptors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ri <span class="token operator">-</span><span class="token operator">></span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span>ri<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Logger logger <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  Contract contract <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>contract<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  Options options <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  Encoder encoder <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoder<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  Decoder decoder <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>decoder<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  InvocationHandlerFactory invocationHandlerFactory <span class="token operator">=</span>      Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>invocationHandlerFactory<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  QueryMapEncoder queryMapEncoder <span class="token operator">=</span> Capability<span class="token punctuation">.</span><span class="token function">enrich</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queryMapEncoder<span class="token punctuation">,</span> capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>  SynchronousMethodHandler<span class="token punctuation">.</span>Factory synchronousMethodHandlerFactory <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">SynchronousMethodHandler<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> retryer<span class="token punctuation">,</span> requestInterceptors<span class="token punctuation">,</span> logger<span class="token punctuation">,</span>          logLevel<span class="token punctuation">,</span> decode404<span class="token punctuation">,</span> closeAfterDecode<span class="token punctuation">,</span> propagationPolicy<span class="token punctuation">,</span> forceDecoding<span class="token punctuation">)</span><span class="token punctuation">;</span>  ParseHandlersByName handlersByName <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">ParseHandlersByName</span><span class="token punctuation">(</span>contract<span class="token punctuation">,</span> options<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">,</span>          errorDecoder<span class="token punctuation">,</span> synchronousMethodHandlerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveFeign</span><span class="token punctuation">(</span>handlersByName<span class="token punctuation">,</span> invocationHandlerFactory<span class="token punctuation">,</span> queryMapEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="参数解析到请求模板中"><a href="#参数解析到请求模板中" class="headerlink" title="参数解析到请求模板中"></a>参数解析到请求模板中</h2><p><code>feign.SynchronousMethodHandler#invoke</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将参数解析到请求模板中</span>  RequestTemplate template <span class="token operator">=</span> buildTemplateFromArgs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  Options options <span class="token operator">=</span> <span class="token function">findOptions</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  Retryer retryer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">executeAndDecode</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        retryer<span class="token punctuation">.</span><span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> th<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Throwable cause <span class="token operator">=</span> th<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>propagationPolicy <span class="token operator">==</span> UNWRAP <span class="token operator">&amp;&amp;</span> cause <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> cause<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> th<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">logRetry</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>请求模板的种类在生成MethordHandler的时候决定的。</p><h2 id="BuildTemplateByResolvingArgs"><a href="#BuildTemplateByResolvingArgs" class="headerlink" title="BuildTemplateByResolvingArgs"></a>BuildTemplateByResolvingArgs</h2><p>通过解析参数创建请求模板</p><p><code>feign.ReflectiveFeign.BuildTemplateByResolvingArgs#create</code>定义了创建的通用流程。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> RequestTemplate <span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  RequestTemplate mutable <span class="token operator">=</span> RequestTemplate<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mutable<span class="token punctuation">.</span><span class="token function">feignTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">urlIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> urlIndex <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">urlIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkArgument</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>urlIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"URI parameter %s was null"</span><span class="token punctuation">,</span> urlIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    mutable<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>urlIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> varBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> entry <span class="token operator">:</span> metadata<span class="token punctuation">.</span><span class="token function">indexToName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object value <span class="token operator">=</span> argv<span class="token punctuation">[</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Null values are skipped.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>indexToExpander<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token function">expandElements</span><span class="token punctuation">(</span>indexToExpander<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        varBuilder<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用编码器，将请求参数解析到请求体中</span>  RequestTemplate template <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> mutable<span class="token punctuation">,</span> varBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// add query map parameters after initial resolve so that they take</span>    <span class="token comment" spellcheck="true">// precedence over any predefined values</span>    Object value <span class="token operator">=</span> argv<span class="token punctuation">[</span>metadata<span class="token punctuation">.</span><span class="token function">queryMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> queryMap <span class="token operator">=</span> <span class="token function">toQueryMap</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    template <span class="token operator">=</span> <span class="token function">addQueryMapQueryParameters</span><span class="token punctuation">(</span>queryMap<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    template <span class="token operator">=</span>        <span class="token function">addHeaderMapHeaders</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> argv<span class="token punctuation">[</span>metadata<span class="token punctuation">.</span><span class="token function">headerMapIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="BuildFormEncodedTemplateFromArgs"><a href="#BuildFormEncodedTemplateFromArgs" class="headerlink" title="BuildFormEncodedTemplateFromArgs"></a>BuildFormEncodedTemplateFromArgs</h2><p>对from表单的数据进行编码，通过继承BuildTemplateByResolvingArgs类然后重写resolve方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> RequestTemplate <span class="token function">resolve</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>                                    RequestTemplate mutable<span class="token punctuation">,</span>                                    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> variables<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> formVariables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> variables<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">formParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        formVariables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>formVariables<span class="token punctuation">,</span> Encoder<span class="token punctuation">.</span>MAP_STRING_WILDCARD<span class="token punctuation">,</span> mutable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EncodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EncodeException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> mutable<span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="BuildEncodedTemplateFromArgs"><a href="#BuildEncodedTemplateFromArgs" class="headerlink" title="BuildEncodedTemplateFromArgs"></a>BuildEncodedTemplateFromArgs</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> RequestTemplate <span class="token function">resolve</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>                                  RequestTemplate mutable<span class="token punctuation">,</span>                                  Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> variables<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object body <span class="token operator">=</span> argv<span class="token punctuation">[</span>metadata<span class="token punctuation">.</span><span class="token function">bodyIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">checkArgument</span><span class="token punctuation">(</span>body <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"Body parameter %s was null"</span><span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">bodyIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">bodyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mutable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EncodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EncodeException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> mutable<span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>方法执行最终是通过SynchronousMethodHandler的invoke方法<code>feign.SynchronousMethodHandler#invoke</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//RequestTemplate对象的生成</span>  RequestTemplate template <span class="token operator">=</span> buildTemplateFromArgs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  Options options <span class="token operator">=</span> <span class="token function">findOptions</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Retryer的重试机制</span>  Retryer retryer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行并且进行解码</span>      <span class="token keyword">return</span> <span class="token function">executeAndDecode</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        retryer<span class="token punctuation">.</span><span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> th<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Throwable cause <span class="token operator">=</span> th<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>propagationPolicy <span class="token operator">==</span> UNWRAP <span class="token operator">&amp;&amp;</span> cause <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> cause<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> th<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">logRetry</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行的和解码的流程</p><pre class=" language-java"><code class="language-java">Object <span class="token function">executeAndDecode</span><span class="token punctuation">(</span>RequestTemplate template<span class="token punctuation">,</span> Options options<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//生成request对象</span>    Request request <span class="token operator">=</span> <span class="token function">targetRequest</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">logRequest</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Response response<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录开始时间</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行请求</span>      response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ensure the request is set. TODO: remove in Feign 12</span>      response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">toBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">requestTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">logIOException</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token function">elapsedTime</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">throw</span> <span class="token function">errorExecuting</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//记录请求时间</span>    <span class="token keyword">long</span> elapsedTime <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果解密器不为空,则进行解码,只有在强制使用解码的时候才使用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>decoder <span class="token operator">!=</span> null<span class="token punctuation">)</span>      <span class="token keyword">return</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">returnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对响应的结果进行异步处理</span>    CompletableFuture<span class="token operator">&lt;</span>Object<span class="token operator">></span> resultFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    asyncResponseHandler<span class="token punctuation">.</span><span class="token function">handleResponse</span><span class="token punctuation">(</span>resultFuture<span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">,</span>        metadata<span class="token punctuation">.</span><span class="token function">returnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        elapsedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resultFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Response handling not done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一直阻塞到获取结果为止</span>      <span class="token keyword">return</span> resultFuture<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CompletionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Throwable cause <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> cause<span class="token punctuation">;</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>在生成request的时候,会调用拦截器</p><pre class=" language-java"><code class="language-java">Request <span class="token function">targetRequest</span><span class="token punctuation">(</span>RequestTemplate template<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>RequestInterceptor interceptor <span class="token operator">:</span> requestInterceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    interceptor<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h1><p><img src="assets/image-20201214201003374.png" alt="image-20201214201003374"></p><p>在强制模式下,值调用解码器,否则进行业务处理.</p><p><img src="assets/image-20201214201048190.png" alt="image-20201214201048190"></p><p>异步处理的流程</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>CompletableFuture<span class="token operator">&lt;</span>Object<span class="token operator">></span> resultFuture<span class="token punctuation">,</span>                    String configKey<span class="token punctuation">,</span>                    Response response<span class="token punctuation">,</span>                    Type returnType<span class="token punctuation">,</span>                    <span class="token keyword">long</span> elapsedTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// copied fairly liberally from SynchronousMethodHandler</span>  <span class="token keyword">boolean</span> shouldClose <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      response <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">logAndRebufferResponse</span><span class="token punctuation">(</span>configKey<span class="token punctuation">,</span> logLevel<span class="token punctuation">,</span> response<span class="token punctuation">,</span>          elapsedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//如果元数据返回类型是`Response`，直接返回回去即可，不需要`decode()`解码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Response<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> returnType<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null          <span class="token operator">||</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> MAX_RESPONSE_BUFFER_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        shouldClose <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        resultFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Ensure the response body is disconnected</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bodyData <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将`response`解码返回，主要对`2xx`和`404`等进行解码，`404`需要特别的开关控制。其他情况，使用`errorDecoder`进行解码，以异常的方式返回</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVoidType</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Object result <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>        shouldClose <span class="token operator">=</span> closeAfterDecode<span class="token punctuation">;</span>        resultFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>decode404 <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">404</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isVoidType</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> Object result <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>      shouldClose <span class="token operator">=</span> closeAfterDecode<span class="token punctuation">;</span>      resultFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      resultFuture<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span>errorDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>configKey<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">final</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> Level<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">logIOException</span><span class="token punctuation">(</span>configKey<span class="token punctuation">,</span> logLevel<span class="token punctuation">,</span> e<span class="token punctuation">,</span> elapsedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    resultFuture<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span><span class="token function">errorReading</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">final</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    resultFuture<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldClose<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">ensureClosed</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="错误解码器"><a href="#错误解码器" class="headerlink" title="错误解码器"></a>错误解码器</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;mid=2247485494&amp;idx=1&amp;sn=c0dc26473c5dae5ad1bfb51384bdf5b0&amp;chksm=e8c3ffc2dfb476d45d2ba82122b2906161ffd84f84a70f489c1fbe6f03bbf19d621ee45ac4fd&amp;scene=126&amp;sessionid=1608167824&amp;key=bd23f22e65e86b66d042919ad5889a4c6abea890575c21352edf4fb848366ca4c34c9a6ad4d9f4f9d7488cc46adaf396b49cca85033eb683bca74430ac5a7d2fe421e7a52a8f0355658f74fa9a2bfbee4be9c8c89dd5ed7ab246bef56c9f234a2fa5d7f8bb34b7511cf9d973333ca93359e711550981f6c378559ea9562ed229&amp;ascene=1&amp;uin=ODMxMzE1ODgx&amp;devicetype=Windows+10+x64&amp;version=63000039&amp;lang=zh_CN&amp;exportkey=AU%2FLdRIF9X4XXBENRijMXds%3D&amp;pass_ticket=fJwqGGG1PO7pdL5btYgB6AC7OJptqnivulykCz2PsfpqOodOHlF8zxd7ls%2BHXbsL&amp;wx_header=0" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;mid=2247485494&amp;idx=1&amp;sn=c0dc26473c5dae5ad1bfb51384bdf5b0&amp;chksm=e8c3ffc2dfb476d45d2ba82122b2906161ffd84f84a70f489c1fbe6f03bbf19d621ee45ac4fd&amp;scene=126&amp;sessionid=1608167824&amp;key=bd23f22e65e86b66d042919ad5889a4c6abea890575c21352edf4fb848366ca4c34c9a6ad4d9f4f9d7488cc46adaf396b49cca85033eb683bca74430ac5a7d2fe421e7a52a8f0355658f74fa9a2bfbee4be9c8c89dd5ed7ab246bef56c9f234a2fa5d7f8bb34b7511cf9d973333ca93359e711550981f6c378559ea9562ed229&amp;ascene=1&amp;uin=ODMxMzE1ODgx&amp;devicetype=Windows+10+x64&amp;version=63000039&amp;lang=zh_CN&amp;exportkey=AU%2FLdRIF9X4XXBENRijMXds%3D&amp;pass_ticket=fJwqGGG1PO7pdL5btYgB6AC7OJptqnivulykCz2PsfpqOodOHlF8zxd7ls%2BHXbsL&amp;wx_header=0</a></p>]]></content>
      
      
      <categories>
          
          <category> Feign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="2020/08/13/hou-duan/spring/springboot/springboot/"/>
      <url>2020/08/13/hou-duan/spring/springboot/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>众所周知<code>Spring</code>基于 IOC 和 AOP 两个特性对 Java 开发本身进行了大大的简化。但是一个大型的项目需要集成很多其他组件，比如一个 WEB 项目，至少要集成MVC框架、<code>Tomcat</code>这种 WEB 容器、日志框架、ORM框架，连接数据库要选择连接池吧……使用<code>Spring</code>的话每集成一个组件都要去先写它的配置文件，比较繁琐且容易出错。</p><p>于是……<code>Spring Boot</code>出生了</p><p>SpringBoot 基于 Spring 开发。SpringBoot 本身并不提供 Spring 框架的核心特性以及扩展功能，也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具</p><p>关于 SpringBoot 有一句很出名的话就是<strong>约定大于配置</strong>。采用 Spring Boot 可以大大的简化开发模式，它集成了大量常用的第三方库配置，所有你想集成的常用框架，它都有对应的组件支持，例如 Redis、MongoDB、Jpa、kafka，Hakira 等等。SpringBoot 应用中这些第三方库几乎可以零配置地开箱即用，大部分的 SpringBoot 应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑</p><h1 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a>SpringBoot自动装配原理</h1><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>全部的依赖都在<code>pom.xml</code>中</p><ul><li><code>spring-boot-dependencies</code>核心工程依赖在夫工程中</li><li>当我们自己引入一些springBoot的依赖的时候，不需要指定版本号，</li></ul><h2 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>就是SpringBoot的启动场景；</p><p>SpringBoot会将大部分的功能场景，使用启动器进行启动的</p><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot01HelloApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot01HelloApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment" spellcheck="true">// 标注这个是一个SpringBoot的应用</span>    <span class="token annotation punctuation">@SpringBootConfiguration</span> <span class="token comment" spellcheck="true">// SpringBoot的配置</span>        <span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">// Spring的配置类</span>        <span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 说明这是一个Spring的组件</span>    <span class="token annotation punctuation">@EnableAutoConfiguration</span> <span class="token comment" spellcheck="true">// 自动配置</span>        <span class="token annotation punctuation">@AutoConfigurationPackage</span> <span class="token comment" spellcheck="true">// 自动配置包</span>            <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationPackages<span class="token punctuation">.</span>Registrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自动配置‘包注册’</span>        <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自动配置 选择器</span><span class="token comment" spellcheck="true">// 获取所有的配置</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取候选的配置</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                         <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you "</span>                    <span class="token operator">+</span> <span class="token string">"are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>META-INF/spring.factories</strong>自动配置的核心文件</p><pre><code>Properties properties = PropertiesLoaderUtils.loadProperties(resource);</code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>从<code>@SpringBootApplication</code>（标注了是个SpringBoot的应用）注解进入衍生出两个注解，分别是<code>@SpringBootConfiguration</code>（SpringBoot配置）和<code>@EnableAutoConfiguration</code>（自动导入包）</p><p><code>@SpringBootConfiguration</code>里面有<code>@Configuration</code>到<code>@Component</code></p><p><code>@EnableAutoConfiguration</code>里面有<code>@AutoConfigurationPackage</code>（自动配置包）和<code>@Import(AutoConfigurationImportSelector.class)</code>（自动导入包的核心）；<code>@AutoConfigurationPackage</code>里面有<code>@Import(AutoConfigurationPackages.Registrar.class)</code>（自动注册包）；</p><p><code>@Import(AutoConfigurationImportSelector.class)</code>导入一个名为<code>AutoConfigurationImportSelector</code>（自动导入选择器）的类，类里面的<code>getAutoConfigurationEntry()</code>方法获得自动配置的实体，而方法中的<code>getCandidateConfigurations()</code>获取候选的配置，标注了<code>EnableAutoConfiguration</code>这个类就可以获取这个类下面的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>下面的<code>loadFactoryNames</code>因为调用了了<code>loadSpringFactories</code>获取所有的加载配置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factoryType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>   String factoryTypeName <span class="token operator">=</span> factoryType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>factoryTypeName<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>loadSpringFactories</code>里面从常量<code>FACTORIES_RESOURCE_LOCATION</code>中获取项目资源和系统资源</p><pre class=" language-java"><code class="language-java">classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">)</span> <span class="token operator">:</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>FACTORIES_RESOURCE_LOCATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FACTORIES_RESOURCE_LOCATION <span class="token operator">=</span> <span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">;</span></code></pre><p>从<code>META-INF/spring.factories</code>这遍历了所有的<code>nextElement</code></p><pre class=" language-java"><code class="language-java">result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   URL url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   UrlResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>   Properties properties <span class="token operator">=</span> PropertiesLoaderUtils<span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> entry <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String factoryTypeName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String factoryImplementationName <span class="token operator">:</span> StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryTypeName<span class="token punctuation">,</span> factoryImplementationName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>遍历完成之后封装为<code>properties</code>以供我们自己使用，文件在</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/SpringBoot%E5%AF%BC%E5%8C%85%E6%A0%B8%E5%BF%83%E6%96%87%E4%BB%B6.png" alt="SpringBoot导包核心文件"></p><p><strong>结论：SpringBoot的所有自动配置都是在启动的时候扫描并加载的，spring.factories所有的自动配置都是在这里面，但是不一定生效，主要是有个判断条件；只要导入了对应的start，就会有对应启动器，这样启动器就连接自动装配就会生效，配置成功</strong></p><ul><li>SpringBoot在启动的时候，从类路径下获取指定的值</li><li>将这些自动配置的类导入容器，自动配置就会生效，进行自动配置</li><li>整合的JavaEE，解决方案和自动配置的东西都在<code>spring-boot-autoconfigure:2.3.2.RELEASE</code>中</li><li>会把所有需要导入的组件，以类的方式返回，这些组件就会被添加到容器里面</li><li>容器中也会存在非常多的文件，就是这些文件给这类容器中导入了这个场景需要的所有组件</li><li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作</li></ul><h3 id="SpringApplication-run"><a href="#SpringApplication-run" class="headerlink" title="SpringApplication.run"></a>SpringApplication.run</h3><p>主要做了以下的事情：</p><ul><li>推断应用的类型是普通的项目还是web项目</li><li>查找并加载所有可用的初始化容器，设置到initializers属性中</li><li>找出所有的应用程序监听器，设置到listeners属性中</li><li>推断并设置main方法的定义类，找到运行的主类</li></ul><p><img src="http://nanxiang-liu.test.upcdn.net/image/SpringApplication.run%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="SpringApplication.run的执行流程图"></p><h1 id="Yaml与properties"><a href="#Yaml与properties" class="headerlink" title="Yaml与properties"></a>Yaml与properties</h1><p>首先SpringBoot默认是的配置文件的格式是<code>properties</code></p><p>SpringBoot使用全局配置文件，并且配置文件的名称是固定的——application</p><ul><li>application.properties<ul><li>key = value</li></ul></li><li>applicatio.yaml<ul><li>key: 空格 value</li></ul></li></ul><p>其配置文件的作用：<strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了</strong></p><p>简单说就是其个性化操作——(<em>^_^</em>)</p><h2 id="Yaml"><a href="#Yaml" class="headerlink" title="Yaml"></a>Yaml</h2><p>Yaml不是一种置标语言，而是一个标记语言</p><h3 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h3><p>以往的配置文件，大多是是使用xml来惊醒配置，相遇对于yaml来说更加简洁明了</p><h3 id="Yaml语法"><a href="#Yaml语法" class="headerlink" title="Yaml语法"></a>Yaml语法</h3><p><strong>说明：语法要求严格！</strong></p><ul><li>空格不能省略</li><li>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的</li><li>属性和值的大小写都是十分敏感的</li></ul><p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><pre><code>k: v</code></pre><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “kuang \n shen”  输出 ：kuang  换行  shen</p></li><li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘kuang \n shen’  输出 ：kuang  \n  shen</p></li></ul><p><strong>对象、Map（键值对）</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#对象、Map格式</span><span class="token key atrule">k</span><span class="token punctuation">:</span>    <span class="token key atrule">v1</span><span class="token punctuation">:</span>        v2<span class="token punctuation">:</span></code></pre><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">student</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> chin        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span></code></pre><p>行内写法</p><ul><li><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">student</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> chin<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span></code></pre></li></ul><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素,比如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> cat <span class="token punctuation">-</span> dog <span class="token punctuation">-</span> pig</code></pre><p>行内写法</p><pre><code>pets: [cat,dog,pig]</code></pre><p><strong>修改SpringBoot的默认端口号</strong></p><p>配置文件中添加，端口号的参数，就可以切换端口；</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span></code></pre><h2 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 注册bean到容器中</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*作用是将配置文件中的每一个属性的值都映射到这个组件中，告诉SpringBoot将本来中的所有属性和配置文件中的相关配置进行一个绑定prefix = "person"：意思是将配置文件中的person和entity类中的属性一一对应只有这个组件是容器中的组件的时候才可以说是使用容器提供的 @ConfigurationProperties功能*/</span></code></pre><p>使用全局配置的时候是可以使用yaml全局配置</p><h2 id="ConfigurationProperties和-Value对比"><a href="#ConfigurationProperties和-Value对比" class="headerlink" title="@ConfigurationProperties和 @Value对比"></a>@ConfigurationProperties和 @Value对比</h2><ul><li>@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</li><li>松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</li><li>JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</li><li>复杂类型封装，yml中可以封装对象 ， 使用value就不支持</li></ul><h1 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h1><pre class=" language-yaml"><code class="language-yaml">@NotNull(message="名字不能为空")private String userName;@Max(value=120<span class="token punctuation">,</span>message="年龄最大不能查过120")private int age;@Email(message="邮箱格式错误")private String email;空检查@Null       验证对象是否为null@NotNull    验证对象是否不为null<span class="token punctuation">,</span> 无法查检长度为0的字符串@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0<span class="token punctuation">,</span>只对字符串<span class="token punctuation">,</span>且会去掉前后空格.@NotEmpty   检查约束元素是否为NULL或者是EMPTY.Booelan检查@AssertTrue     验证 Boolean 对象是否为 true  @AssertFalse    验证 Boolean 对象是否为 false  长度检查@Size(min=<span class="token punctuation">,</span> max=) 验证对象（Array<span class="token punctuation">,</span>Collection<span class="token punctuation">,</span>Map<span class="token punctuation">,</span>String）长度是否在给定的范围之内  @Length(min=<span class="token punctuation">,</span> max=) string is between min and max included.日期检查@Past       验证 Date 和 Calendar 对象是否在当前时间之前  @Future     验证 Date 和 Calendar 对象是否在当前时间之后  @Pattern    验证 String 对象是否符合正则表达式的规则</code></pre><h1 id="多环境的切换"><a href="#多环境的切换" class="headerlink" title="多环境的切换"></a>多环境的切换</h1><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境</p><p>在主配置文件编写的时候，文件名可以是 <code>application-{profile}.properties/yml</code>，用来指定多个环境版本，但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 在配置文件中指定使用dev环境，可以通过设置不同的端口号进行测试</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><h2 id="yaml的多环境"><a href="#yaml的多环境" class="headerlink" title="yaml的多环境"></a>yaml的多环境</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token comment" spellcheck="true">#选择要激活那个环境块</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true">#配置环境的名称</span><span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod  <span class="token comment" spellcheck="true">#配置环境的名称</span></code></pre><h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p><img src="http://nanxiang-liu.test.upcdn.net/image/%E5%AE%98%E6%96%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E4%BD%8D%E7%BD%AE.png" alt="官方配置文件加载位置"></p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p><ul><li>优先级1：项目路径下的config文件夹配置文件</li><li>优先级2：项目路径下配置文件</li><li>优先级3：资源路径下的config文件夹配置文件</li><li>优先级4：资源路径下配置文件</li></ul><h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 表示这是一个配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 自动配置的配置属性</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// spring 的底层注解，根据不同的条件，判断当前配置或类是否生效</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> ConditionalOnWebApplication<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// springMVC的字符编码过滤器</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 判断是否符合某个条件</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"server.servlet.encoding"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>    ……<span class="token punctuation">}</span></code></pre><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><p>黑细腻：</p><ul><li>SpringBoot启动会加载大量的自动配置类</li><li>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中</li><li>我们再来看这个自动配置类中到底配置了哪些组件（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</li><li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可</li></ul><p><strong>xxxxAutoConfigurartion：自动配置类</strong>，给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性</strong></p><h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><p><strong>自动配置类必须在一定的条件下才能生效</strong></p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效</p><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#开启springboot的调试类</span>debug=true</code></pre><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p><p><strong>Unconditional classes: （没有条件的类）</strong></p><h1 id="SpringBoot-Web开发"><a href="#SpringBoot-Web开发" class="headerlink" title="SpringBoot Web开发"></a>SpringBoot Web开发</h1><p>jar：webappde</p><p>需要解决的问题：导入静态资源、首页404、jsp，模板引擎、装配扩展SpringMVC、CURD、拦截器、语言转换</p><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Duration cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   CacheControl cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第一种方式通过maven引入的方式进行一个导入</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">*</span>    第二种通过静态资源进行引入    这里相当于只要是域名后面的所有<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>的文件都会被 <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span>所引入进到资源文件中就绪    classpath<span class="token operator">:</span><span class="token operator">/</span>META<span class="token operator">-</span>INF<span class="token operator">/</span>resources<span class="token operator">/</span>    classpath<span class="token operator">:</span><span class="token operator">/</span>resources<span class="token operator">/</span>    classpath<span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>    classpath<span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>    上面的四个位置的资源都会被加载，四个位置按照顺序权限执行    <span class="token operator">*</span><span class="token operator">/</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在springBoot可以采用以下两种的方式处理静态资源</p><ul><li>webjars——域名/webjars/**</li><li>classpath:/META-INF/resources/、classpath:/resources/、classpath:/static/、classpath:/public/四个位置进行静态资源的处理（优先级顺序执行）——域名/文件名</li></ul><h2 id="模板引擎（Thymeleaf）"><a href="#模板引擎（Thymeleaf）" class="headerlink" title="模板引擎（Thymeleaf）"></a>模板引擎（Thymeleaf）</h2><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#creating-and-configuring-the-template-engine" target="_blank" rel="noopener">官方文档地址</a></p><p>Thymeleaf是适用于Web和独立环境的现代服务器端Java模板引擎，能够处理HTML，XML，JavaScript，CSS甚至纯文本，可以处理的Template Mode有以下几种</p><ul><li>HTML</li><li>XML</li><li>TEXT</li><li>JAVASCRIPT</li><li>CSS</li><li>RAW</li></ul><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，用来写一些表达式；而这些值的话通过后台用Model进行传输</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-java8time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>需要导入以上依赖，否者会报视图无法解析</p><pre class=" language-markdown"><code class="language-markdown">javax.servlet.ServletException: Circular view path <span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">test</span><span class="token punctuation">]</span><span class="token punctuation">:</span> would</span> dispatch back to the current handler URL [/test] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)</code></pre><p>以及Controller层不能使用<code>@RestController</code>这样会无法定位到需要的文件位置从而只是返回你所返回的字符串，需要用的是<code>@Controller</code>注解这样可以直接定位到所需的页面</p><p>Html文件需要导入</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>Simple expressions:</p><ul><li>Variable Expressions: <code>${...}</code></li><li>Selection Variable Expressions: <code>*{...}</code></li><li>Message Expressions: <code>#{...}</code></li><li>Link URL Expressions: <code>@{...}</code></li><li>Fragment Expressions: <code>~{...}</code></li></ul><h3 id="属性的优先级"><a href="#属性的优先级" class="headerlink" title="属性的优先级"></a>属性的优先级</h3><p>当<code>th:*</code>在同一个标签中使用了多个的时候，会按照以下的优先级顺序执行</p><table><thead><tr><th align="left">订购</th><th align="left">特征</th><th align="left">属性</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Fragment inclusion（片段包含）</td><td align="left"><code>th:insert</code> <code>th:replace</code></td></tr><tr><td align="left">2</td><td align="left">Fragment iteration（片段迭代）</td><td align="left"><code>th:each</code></td></tr><tr><td align="left">3</td><td align="left">Conditional evaluation（条件评估）</td><td align="left"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td></tr><tr><td align="left">4</td><td align="left">Local variable definition（局部变量定义）</td><td align="left"><code>th:object</code> <code>th:with</code></td></tr><tr><td align="left">5</td><td align="left">General attribute modification（常规属性修改）</td><td align="left"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td></tr><tr><td align="left">6</td><td align="left">Specific attribute modification（特定属性修改）</td><td align="left"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td></tr><tr><td align="left">7</td><td align="left">Text (tag body modification)（文字【标签正文修改】）</td><td align="left"><code>th:text</code> <code>th:utext</code></td></tr><tr><td align="left">8</td><td align="left">Fragment specification（片段规格）</td><td align="left"><code>th:fragment</code></td></tr><tr><td align="left">9</td><td align="left">Fragment removal（碎片清除）</td><td align="left"><code>th:remove</code></td></tr></tbody></table><p>虽然有以上的优先级，但是如果其中的属性位置反转的话，虽然最后的结果都是一样的，就是可读性的话骚味差点</p><h2 id="扩展装配自定义MVC"><a href="#扩展装配自定义MVC" class="headerlink" title="扩展装配自定义MVC"></a>扩展装配自定义MVC</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 单项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RibbitMQ</title>
      <link href="2020/08/07/hou-duan/zhong-jian-jian/rabbitmq/"/>
      <url>2020/08/07/hou-duan/zhong-jian-jian/rabbitmq/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是RabbitMQ"><a href="#什么是RabbitMQ" class="headerlink" title="什么是RabbitMQ?"></a>什么是RabbitMQ?</h1><ul><li>正常理解都是一个消息中间件是<code>Erlang</code>开发的基于<code>AMQP</code>的开源最佳实践</li><li><strong>AMQP</strong> : Advanced Message Queue Protocol，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</li><li>可靠性。支持持久化，传输确认，发布确认等保证了MQ的可靠性。</li><li>灵活的分发消息策略。这应该是RabbitMQ的一大特点。在消息进入MQ前由Exchange(交换机)进行路由消息。分发消息策略有：简单模式、工作队列模式、发布订阅模式、路由模式、通配符模式。</li><li>支持集群。多台RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。</li><li>多种协议。RabbitMQ支持多种消息队列协议，比如 STOMP、MQTT 等等。</li><li>支持多种语言客户端。RabbitMQ几乎支持所有常用编程语言，包括 Java、.NET、Ruby 等等。</li><li>可视化管理界面。RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker。</li><li>插件机制。RabbitMQ提供了许多插件，可以通过插件进行扩展，也可以编写自己的插件。</li></ul><h1 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h1><p>所谓的消息队列指的是两个应用之间传递的消息，例如：APP向电脑端网页or后台进行消息的发送，数据的传递等，消息队列指的是两个应用之间的数据容器，在这这个队列中一般来说是有两个角色（生产者和消费者），生产者只负责进行消息的收集，也就是把数据收集到消息队列里面，（所谓的数据的产生），而消费者就只负责消息中取出数据进行一个读取，双方都是不管这是什么数据，谁发送的数据</p><h1 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h1><p>主要的作用三个：解耦、异步、削峰</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>请移步到<a href="https://puffslemon.com/2020/09/10/tools/rabbitmq-an-zhuang/" target="_blank" rel="noopener">Tool分类下的这个地址查看</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RibbitMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的优化</title>
      <link href="2020/07/30/shu-ju-ku/mysql-de-you-hua/"/>
      <url>2020/07/30/shu-ju-ku/mysql-de-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL的优化问题"><a href="#SQL的优化问题" class="headerlink" title="SQL的优化问题"></a>SQL的优化问题</h1>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试问题</title>
      <link href="2020/07/28/hou-duan/mian-shi-wen-ti/"/>
      <url>2020/07/28/hou-duan/mian-shi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="和equals-的区别"><a href="#和equals-的区别" class="headerlink" title="==和equals()的区别"></a>==和equals()的区别</h2><p>基本类型：比较值是否相同</p><p>引用类型：比较近引用是否相同</p><pre class=" language-java"><code class="language-java">String x <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>String y <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>String z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">==</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较</p><p>String 重写了 Object 的 equals 方法，把引用比较改成了值比较</p><p>== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重写了 equals 方法</p><h2 id="为什么要重写hashCode和equals方法"><a href="#为什么要重写hashCode和equals方法" class="headerlink" title="为什么要重写hashCode和equals方法"></a>为什么要重写hashCode和equals方法</h2><p>因为要得到散列码（hash）的时候要通过key.hashcode（）去得到key的哈希码才可以做hash运算；不论是put和get方法，都要使用equals方法，equals方法是object的一个方法，直接调用是比较内存</p><h2 id="static的关键字"><a href="#static的关键字" class="headerlink" title="static的关键字"></a>static的关键字</h2><ul><li>修饰代码块</li><li>修饰成员变量</li><li>修饰方法</li></ul><p>static关键字虽然不能修饰普通类，但可以用static关键字修饰内部类使其变成静态内部类。static关键字本身的含义就是共享，而Java类加载到JVM内存的方法区，也是线程共享的，所以没必要用static关键字修饰普通类</p><h2 id="String、StringBuilder和StringBuffer的区别"><a href="#String、StringBuilder和StringBuffer的区别" class="headerlink" title="String、StringBuilder和StringBuffer的区别"></a>String、StringBuilder和StringBuffer的区别</h2><ul><li>String是字符串常量，而StringBuffer和StringBuilder是字符串变量</li><li>String创建的字符内容是不可改变的，而由StringBuffer和StringBuilder创建的字符内容是可以改变的</li><li>StringBuffer是线程安全的，而StringBuilder是非线程安全的</li></ul><p>在使用时应优先考虑使用StringBuilder，因为它支持StringBuffer的所有操作，但是因为它不执行同步，不会有线程安全带来额外的系统消耗，所以速度更快</p><p>虽然三个在底层都是使用的char数组进行实现的，但是String类中定义的char数组是final的，而StringBuffer和StringBuilder都是继承自AbstractStringBuilder类</p><h2 id="异步、同步、BIO、NIO"><a href="#异步、同步、BIO、NIO" class="headerlink" title="异步、同步、BIO、NIO"></a>异步、同步、BIO、NIO</h2><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Collection下的ArrayList、LinkedList"><a href="#Collection下的ArrayList、LinkedList" class="headerlink" title="Collection下的ArrayList、LinkedList"></a>Collection下的ArrayList、LinkedList</h3><p>ArrayList的底层是数组，初始化的时候数据量是0，当add的时候会变成10，每次扩容的话是之前容量的1.5倍，特性是查询快，删除效率比较低，查询快是因为通过脚标查询的</p><p>LinkedList的底层是带有头节点和尾节点的双向链表，有两种插入方式：<code>LInkedFirst</code>（头部插入）、<code>LinkedLast</code>（尾部插入），特性是非常适合经常增加、删除的操作，但是查询在量大的时候会说是比较慢，主要是因为是链表查询，通过顺序进行比较</p><p>在保证线程安全的情况下又想使用<code>List</code>的话可以采用<code>Vector</code>，和<code>ArrayList</code>一样使用是是一个数组的结构，区别是大部分的方法都是被<code>snchronized</code>修饰的，所以说是一个线程安全的，扩容的时候和<code>ArrayList</code>区别在于ArrayList是1.5倍扩容，而<code>Vector</code>是采用的2倍扩容机制的</p><h3 id="Set下的HashSet"><a href="#Set下的HashSet" class="headerlink" title="Set下的HashSet"></a>Set下的HashSet</h3><h3 id="Map中的HashMap，涉及到线程安全的话采用的是ConcurrentHashMap"><a href="#Map中的HashMap，涉及到线程安全的话采用的是ConcurrentHashMap" class="headerlink" title="Map中的HashMap，涉及到线程安全的话采用的是ConcurrentHashMap"></a>Map中的HashMap，涉及到线程安全的话采用的是ConcurrentHashMap</h3><p>底层结构在1.7版本和1.8版本是不一样的</p><p>1.7版本的时候是数组+链表的一个结构</p><p>1.8的时候的是数组+单链表+红黑树</p><p>在单链表和红黑树之间的转换的话，是当链表的长度大于等于8以及Hash桶大于等于64的时候转换为红黑树存储，在红黑树的数量在小于等于6的时候会重新转换为链表的的一个结构，Hash桶的数量默认是16个，而那个点的阈值默认是0.75，扩容的方式是先检测数组里面的个数，因为负载因子为0.75，桶的默认是16的，所以说阈值为12，当Hash桶占用的容量到达了12或往上的时候，会触发扩容机制，会从16变成32按照2倍扩容，之后会把之前的元素再次进行一个Hash运算，add到新的Hash桶里面，按照链表或红黑树的方式组合排列起来。</p><p>这里不是线程安全的，因为在insert的时候多线程会有数据覆盖的可能，另外也是在1.7的时候<code>PUT</code>操作的时候有个<code>Resize</code>的过程会造成一个头插的一个环形链表导致一直死循环，在1.8版本的时候已经做了修复改成了尾插</p><p><strong>当要在多线程情况下安全操作Map的话有三种解决方式</strong></p><ul><li>使用Hashtable</li><li>使用Collections.synchronizedMap，对方法加同步锁</li><li>使用JUC并发包中的ConcurrentHashMap类</li></ul><p>Hashtable的话是一个线程安全的类，但是底层那边使用的给全部方法都加了synchronize同步锁，相当于给整个Hash表加了一个大锁，多线程访问的时候只要有一个线程访问到该对象，其他的线程就只能说是阻塞等待获取当前线程的锁，在多线程的情况下体验很差</p><p>Collections.synchronizedMap的话底层如果传入的是HashMap对象，其实也是对HashMap的方法做了一层封装，里面使用了对象锁来进行保护在多线程的情况下操作安全，本质上也是对于HashMap进行的一个全表锁</p><p>ConcurrentHashMap数据结构在1.7的时候是个分片数组，为了保证线程安全是有个Segment锁，是继承于ReentrantLock（可重入锁），来保证线程的安全，每次就只给一段的加速保证并发度，1.8的时候是改成了HashMap一样的数据结构，放弃了分片锁的这个结构，而采用了<code>Synchronized</code>的和<code>CAS</code>操作，在1.6的时候采用<code>JVM</code>优化的力度非常大的，数据结构和HashMap结构类似，都是数组+链表的结构，</p><p><code>ConcurrentHashMap</code>中<code>synchronized</code>只锁定当前链表或红黑二叉树的首节点，只要节点 hash 不冲突，就不会产生并发</p><p>CAS相当于说是一个轻量级的加锁的一个过程，在修改并发量不是很大的情况下，会先查一遍之后再修改，准备写之前再查一次，和修改之前的结果看看是否有区别，如果有区别的话就是这个修改是不安全的，如果没有区别的话这个修改就是安全的，这时候可以安全的去进行一个修改，而不是用加锁的形式进行修改，在低并发的情况下会好一点</p><p>CAS<strong>缺点：</strong>当并发量特别大的时候对于CPU性能消耗比较大，因为有个忙循环的过程，高并发的时候还是直接使用状态机，重量级锁之类的；另外就是ABA的问题在第一次读的时候和第二次读的时候可能会有被第三线程修改过，但是后来又被改回来的情况，这种情况可以说是通过并发包里面的戳或标志位来进行一个解决，相当于给一个版本号</p><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h2><p>关于synchronized的使用方式：</p><ul><li><p>同步代码块：当用在同步代码块的时候可以指定任意的锁</p></li><li><p>方法：锁的方法就是锁当前的this</p></li><li><p>静态方法：锁的是当前的class对象</p><p>synchronized首先锁的是一个种类，在无锁状态下，因为synchronized的偏向锁，到轻量级锁，到重量级锁</p></li><li><p>偏向锁：会偏向于获得第一个锁的线程，会将获得锁的线程拉到这个锁对象的对象头中，当有另外的线程来的时候会立刻结束这个偏向的状态，从而跑到一个轻量级锁的状态</p></li><li><p>轻量级锁：在线程进入的在虚拟栈中开辟一个空间（LockRecord）将锁对象的MarkWord写入，之后尝试将另一个的Lock Record的指针使用CAS去修改锁对象头的区域，这时候时候判断指针是否进行一个修改，如果修改成功的话，就是获得锁，修改不成功的话进入到自旋锁的状态；也是适用于低并发的一个情况</p></li><li><p>重量级锁：也就是自旋锁，用的是互斥锁的一个过程，加锁过程主要实现原理是</p><ul><li>同步代码块编译之后会代码前后添加两个指令，<code>mointerenter</code>、<code>mointerexit</code>；当一个线程来的时候发现这个锁的标志位是无锁的一个状态，会尝试给一个互斥锁对象，这个锁对象的时候会和另外一个对象关联，即监视器锁<code>monitor</code>，会在<code>monitor</code>的锁定器+1，并且将指针写入到对象头中，并修改锁对象头的标志位为10，就是重量级锁的一个标志位，这里就完成了一个换锁的过程，这个过程是一个可重入的，并不会说是每次都出去进行一个加锁的过程，每次进来让这个锁记录+1即可，当其他锁来的时候会检查这个锁对象头中<code>monitor</code>计数不为0的时候会在监视状态下去等待竞争这个锁，当之前的结束了这个操作的时候就会退出并释放这个锁，逐步将加上的锁释放几次，将其锁定器上的计数归零完成一个锁的释放让其余线程进行竞争锁</li><li>同步方法：采用的是<code>ACC_SYNCHRONIZED</code>标记位，当<code>JVM</code>检测到这个<code>flag</code>，自动走了一个同步方法调用的策略，</li></ul></li></ul><h3 id="ReentrantLock和synchronized的使用考虑"><a href="#ReentrantLock和synchronized的使用考虑" class="headerlink" title="ReentrantLock和synchronized的使用考虑"></a>ReentrantLock和synchronized的使用考虑</h3><p>从<code>JVM</code>层面上来说的话<code>synchronized</code>是<code>JVM</code>的一个关键字，<code>ReentrantLock</code>的话是一个类，需要手动编码</p><p><code>synchronized</code>使用的时候是可以直接通过代码块或同步方法，不需要关心锁的释放，<code>ReentrantLock</code>需要手动释放锁，并且还需要配合Try finally代码块一定要去把锁进行一个释放</p><p><code>ReentrantLock</code>对于<code>synchronized</code>来说有几个高级特性，提供了一个线程长期等待不到一个锁的时候，为了防止死锁的话可以手动调用一个<code>lockInterruptibly</code>方法去尝试释放这个锁从而不用去等待，<code>ReentrantLock</code>提供了一个构建公平锁的方法，函数有一个但是不推荐使用，因为会让<code>ReentrantLock</code>的等级下降，还提供了一个<code>condition</code>，可以指定唤醒绑定到<code>condition</code>上的线程</p><p>选择方面的话需要根据场景进行一个选择，当某一个时刻QPS很高的时候，另一个时刻却不高，这样如果选择<code>synchronized</code>进行一个加锁的过程的话全部升级到重量级锁，这样对于QPS高的时候是好处的，但是在并发的一个情况的下的话很多时候是不需要这么高的锁的，因为不可逆，一旦加到重量级锁的话就始终是那个状态了</p><h2 id="JUC下的包"><a href="#JUC下的包" class="headerlink" title="JUC下的包"></a>JUC下的包</h2><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p><code>CountDownLatch</code>适用于单线程下又希望某一段过程并发执行并且最后回归到单线程的一个状态，适用于一个线程等待一批线程到达一个同步点之前进去，并且计数器是不能重用的</p><p>计数器的保证是因为在初始化的时候会实例化AQS的内部类<code>Synchronized</code>并且将<code>count</code>传给<code>AQS</code>的一个<code>state</code>标志位是用<code>volatile</code>修饰的</p><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>没有一个一个线程的执行，而是一批线程达到一个同步点的时候才向下执行，计数器也是不能重用的</p><h3 id="Atomic"><a href="#Atomic" class="headerlink" title="Atomic"></a>Atomic</h3><h2 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h2><p>是JVM提供的一个最轻量级的一个关键字，这里涉及到了计算机的模型，因为CPU和内存之间的线程效率不同，为了不影响CPU的计算，中间做了很多LLV的缓存，线程就在这些缓存中进行工作会从主内存取到工作内存中进行计算，在工作内存中计算完了之后再传过去，多线程之间的可见性如何保证的，再JVM里面为了解决这些东西，提供了JMM的模型，<code>Volatile</code>修饰的一个变量，就可以保证这个变量在所有线程之间的可见性，这样这个线程在修改变量之后会立刻刷到主内存中，之后使用会从主内存中取值</p><p>无法保证变量的原子性的，可以采用<code>synchronized</code></p><h2 id="foreach删除元素是否能行"><a href="#foreach删除元素是否能行" class="headerlink" title="foreach删除元素是否能行"></a>foreach删除元素是否能行</h2><h2 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h2><h3 id="全局异常的处理"><a href="#全局异常的处理" class="headerlink" title="全局异常的处理"></a>全局异常的处理</h3><h3 id="捕获异常的处理方式"><a href="#捕获异常的处理方式" class="headerlink" title="捕获异常的处理方式"></a>捕获异常的处理方式</h3><h3 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h3><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>有个核心线程数的，当线程运行的时候，当没有设置成预启动加载的话，首发线程为0，提交一个新任务的时候会先建立一个核心线程，然后去执行任务，这里的线程方面的话会做一个判断就如果一直建立核心线程，当达到最大线程的核心线程的时候，如果都是还在继续提交建立线程，会放到<code>BlockingQueue</code>里面作为节点，如果说是桶线程也满了的话，就会继续建立非核心线程，假设一直创建的话，数量达到非核心线程数量<code>MaxAccess</code>的话，就会触发拒绝策略，JDK内置了四种拒绝策略</p><ul><li>AbortPolicy：直接抛异常</li><li>DisCardPolicy：不通知直接丢弃任务</li><li>DisCardOldestPolicy：丢弃最早的未执行的任务</li><li>CallerRunsPolicy：会分配谁调用我的这个线程执行这个任务，这种方式会影响新任务的提交速度</li></ul><p>队列使用的是阻塞队列，JDK提供了两种</p><ul><li>：是不保存任务，JDK提供的new catch线程池使用就是这种队列</li><li>第二种采用的是有界队列，<code>ArrayBlockingQueue</code>我们指定数量，超了的话就OOM</li><li>第三种是无界队列：<code>LInkedBlockingQueue</code>，也是可能因超出上下文的OOM的</li><li>第四种是优先级队列</li></ul><p>线程池中比较重要的是线程构造，在创建一个线程池的时候需要提供一个线程的<code>threadFactory</code>，一定要指定名称，也可以设置为守护线程，当BM关闭的时候可以让线程跟着一块消亡</p><h1 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a>高阶</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="JVM的内存模型"><a href="#JVM的内存模型" class="headerlink" title="JVM的内存模型"></a>JVM的内存模型</h3><p>运行时的内存区域：</p><ul><li>线程私有区<ul><li>程序计数器：在JVM栈内存来说是比较小的一个区域，也是唯一一块不会OOM的区域，是用于告诉你线程执行的代码是归于哪一行，也就是上下文切换之后这里会回到一个正确的状态</li><li>虚拟机栈：主要使用的是栈帧，一个方法的调用是从入栈到出栈的过程</li><li>本地方法栈：s</li></ul></li><li>线程共享区<ul><li>方法区：JVM规范，在1.7的时候实现的是在<code>HotSpot</code>虚拟机中叫做永久代，存放的是常量池的常量还有类的元数据信息，在1.8的时候转到了一个集结内存中（元空间）存放的是类的元数据信息，这里方法区是会出现OOM的这个情况的，存放的是Java里面产生的对象、对象的实例，同时也是GC重点回收的一个区域，并且也会产生OOM的</li><li>运行时常量池：1.8的时候将运行常量池转移到堆中，在1.8之前是在元空间里面的的，堆里面存放的是一个常量池被加载之后，运行时常量池和静态变量是到了堆中的</li><li>直接内存：主要是存放在JVM的元空间，放在元空间的好处是OOM的几率相对于之前来说小了很多</li></ul></li></ul><h3 id="OOM排查思路和过程"><a href="#OOM排查思路和过程" class="headerlink" title="OOM排查思路和过程"></a>OOM排查思路和过程</h3><p>借助一些<code>jvisualvm</code>的一下工具，去查询<code>dump</code>下下来的堆栈信息中进行一个排查</p><h3 id="垃圾回收算法和垃圾回收器"><a href="#垃圾回收算法和垃圾回收器" class="headerlink" title="垃圾回收算法和垃圾回收器"></a>垃圾回收算法和垃圾回收器</h3><h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><ul><li>标记清除，标记不可达的对象，将判定为死亡的对象之后依次抹除，使用可能会造成很多的内存碎片，并且当对象是比较大的时候，标记率是比较低的<ul><li>引用计数，但是会产生循环依赖</li><li>Java中可以作为<code>GCRoots</code>根节点，如果不在这个链上的话就是可以判断回收了；在虚拟机中引用的一些对象，方法区中的静态变量所引用的对象、常量所引用对象；可作为可达性分析节点的一些对象</li></ul></li><li>标记复制：简单粗暴将堆划分两块，在GC的时候有引用的对象直接复制到另一半；<strong>缺点</strong>是会造成内存支持量偏低，好处是不太会产生内存大块的碎片</li><li>标记整理：每次只使用一块区域，会把已经死亡对象，往另一侧移动，复制，然后就可以找出剩下额一块区域</li><li>分代回收</li></ul><h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h4><p>CMS：可以和用户线程并发操作的，GC线程与用户线程并行执行额一款垃圾回收，特点是低延迟，主要是用于老年代回收的，因为算法用的是标记清除，所以可以容忍一定量的垃圾回收碎片，当达到一个阈值的时候，会触发一次标记整理来清理一下</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收（并发清理）</li></ul><p>初始标记和最终标记不是并发执行的，会产生短暂的<code>Stop The World</code>，后面的并发标记和筛选回收的耗时比较长，是和用户线程一起并发执行的，可以实现最短的低延迟</p><p>G1：也是并发的，原本是在缩短处理超大堆时产生的停顿，相对于CMS的就是内存碎片大量降低，关注最小时延的垃圾回收器</p><p>引入了分区的概念，合理利用垃圾收集各周期的资源，弥补了CMS的众多缺陷；G1的算法是基于标记-整理的，不会产生空间碎片，分配的大对象的时候不会得到连续的空间触发<code>Full GC</code>，会在年轻代区域使用，而CMS只能作为老年代区域使用</p><p><strong>Stop The World的区别</strong></p><ul><li>G1是有很多的立区域（Region）是可控制的，并且是在回收内存后会马上同时做合并空间内存</li><li>CMS默认是在STW做的</li></ul><h4 id="收集器的应用场景"><a href="#收集器的应用场景" class="headerlink" title="收集器的应用场景"></a>收集器的应用场景</h4><p>G1垃圾收集算法主要应用在多CPU大内存的服务中，在满足高吞吐量的同时，尽可能的满足垃圾回收时的暂停时间。</p><p>就目前而言、CMS还是默认首选的GC策略、可能在以下场景下G1更适合：</p><ul><li>服务端多核CPU、JVM内存占用较大的应用（至少大于4G）</li><li>应用在运行过程中会产生大量内存碎片、需要经常压缩空间</li><li>想要更可控、可预期的GC停顿周期，防止高并发下应用雪崩现象</li></ul><h3 id="GC排查过程"><a href="#GC排查过程" class="headerlink" title="GC排查过程"></a>GC排查过程</h3><p>需要跑命令去查看一下，可以看到当前的CPU高进程的ID，使用<code>jstack</code>命令，登上进程来代替</p><h2 id="RockMQ的使用场景"><a href="#RockMQ的使用场景" class="headerlink" title="RockMQ的使用场景"></a>RockMQ的使用场景</h2><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>高访问两的业务上：通过配置监听规则将流量分发到不同服务器上，使用会话保持功能将同一客户端的请求转发到同一台后端服务器上</li><li>横向扩张系统：业务的扩张，当前服务器无法满足需求，增加服务器，分发请求处理</li><li>消除单点故障：多台服务器，一台坏了，就切换另外一台</li><li>同城容灾：主可用区出现机房故障或不可用时切换到另外一个备可用区恢复服务能力</li><li>跨地域容灾：通过DNS进行地址分发到各地的路由器到实例服务器中</li></ul><h2 id="Nginx的负载均衡"><a href="#Nginx的负载均衡" class="headerlink" title="Nginx的负载均衡"></a>Nginx的负载均衡</h2><p>Nginx提供一个服务池配置节点进行轮询访问</p><ul><li>轮询：按时间顺序逐一分配到不同的后端服务器</li><li>加权轮询：weight值越大，分配到的访问几率越高</li><li>ip_hash：每个请求按访问IP的hash结果分配，这样来自同一个IP的固定访问一个后端服务器</li><li>url_hash：按照访问的URL的hash结果来分配请求，是每个URL定向到同一个后端服务器</li><li>least_conn：最少连接数，哪个机器连接数少就分配到哪个</li><li>hash关键数值：hash自定义的key</li></ul><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h2><p>IOC （Inversion of control ）控制反转/反转控制。它是一种思想不是一个技术实现。描述的是：Java 开发领域对象的创建以及管理的问题</p><ul><li><strong>传统的开发方式</strong> ：往往是在类 A 中手动通过 new 关键字来 new 一个 B 的对象出来</li><li><strong>使用 IOC 思想的开发方式</strong> ：不通过 new 关键字来创建对象，而是通过 IOC 容器(Spring 框架) 来帮助我们实例化对象。我们需要哪个对象，直接从 IOC 容器里面过去即可</li></ul><p>使用了IOC思想的开发方式我们失去了管理创建对象的能力，但是得到的是不用考虑对象的创建、管理等一些列的事情</p><ul><li><strong>控制</strong> ：指的是对象创建（实例化、管理）的权力</li><li><strong>反转</strong> ：控制权交给外部环境（Spring 框架、IOC 容器）</li></ul><p>IOC 的思想就是两方之间不互相依赖，由第三方容器来管理相关资源</p><ol><li>对象之间的耦合度或者说依赖程度降低</li><li>资源变的容易管理；比如你用 Spring 容器提供的话很容易就可以实现一个单例</li></ol><p>IOC（Inverse of Control:控制反转）是一种<strong>设计思想</strong> 或者说是某种模式。这个设计思想就是 <strong>将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理</strong>，<strong>IOC 容器是 Spring 用来实现 IOC 的载体， IOC 容器实际上就是个 Map（key，value）,Map 中存放的是各种对象</strong>，IOC 最常见以及最合理的实现方式叫做依赖注入（Dependency Injection，简称 DI）</p><h2 id="什么是AOP和OOP"><a href="#什么是AOP和OOP" class="headerlink" title="什么是AOP和OOP"></a>什么是AOP和OOP</h2><p>AOP 是 OOP（面向对象编程）的一种延续</p><p>OOP 编程思想可以解决大部分的代码重复问题。但是有一些问题是处理不了的。比如在父类 Animal 中的多个方法的相同位置出现了重复的代码，OOP 就解决不了</p><p>横切逻辑代码存在的问题：</p><ul><li>代码重复问题</li><li>横切逻辑代码和业务代码混杂在一起，代码臃肿，不变维护</li></ul><p><strong>AOP 就是用来解决这些问题的</strong></p><p>AOP 另辟蹊径，提出横向抽取机制，将横切逻辑代码和业务逻辑代码分离</p><p><strong>AOP 主要用来解决</strong>：在不改变原有业务逻辑的情况下，增强横切逻辑代码，根本上解耦合，避免横切逻辑代码重复。</p><h2 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h2><p>接口有代理类的话走的是JDK的动态代理，没有的话走的是<code>cglib</code>字节码技术去创建代理类对象</p><p>JDK动态代理底层主要使用的是Java反射中的两个类：<code>Proxy</code>、<code>InvocationHandler</code>，是通过bind的方式去绑定之前的代理与原来的实现类去做一个关系，并且是通过<code>Proxy</code>相关的来创建代理类对象的，通过<code>invoke</code>去执行那个方法</p><h2 id="Spring的生命周期"><a href="#Spring的生命周期" class="headerlink" title="Spring的生命周期"></a>Spring的生命周期</h2><p>大致分为三个阶段</p><ul><li>bean的一次加工，将对象实例化，在实例化的前后有<code>BeanPostProcessor</code>在做前置和后置处理</li><li>依赖注入的过程，在这个过程中，首先会设置一个属性值，然后Bean实现<code>BeanAware</code>的相关接口，比如说<code>DiposableBean</code>这接口的话就会给<code>bean</code>注入相对应的<code>aware</code>属性这里分为两步，这两步前后也会有<code>BeanPostProcessor</code>后处理的这个操作</li><li>bean的二次加工，这前后可以采用像<code>ApplicationContext</code>配置一个后置处理的<code>bean</code>主要是调用了bean中写的<code>environment</code>的一个方法或bean实现了一个<code>InitializingBean</code>，会二次回调<code>afterPropertiesSet</code>方法</li><li>在这之后<code>bean</code>就是已经建立了的，会根据<code>bean</code>的<code>scope</code>选择，默认是单例的就会继续走下去，如果是多实例的话也就是bean的scope是prototype多实例的会移交给你去管理后续的生命周期</li><li>当是单实例<code>bean</code>的时候还是会交给<code>Spring</code>去管理生命周期，当Spring容器销毁的时候就会调用<code>destory</code>相对应的方法，如果说是实现的是一个<code>Disposable Bean</code>的话，接口中也会有自己销毁的那个逻辑存在的</li></ul><h2 id="如何解决Spring中的bean循环依赖"><a href="#如何解决Spring中的bean循环依赖" class="headerlink" title="如何解决Spring中的bean循环依赖"></a>如何解决Spring中的bean循环依赖</h2><p>正常的当一个bean调用构造函数进行实例化之后，也就是说属性这时候还没有填充进去，可以通过三级缓存向外暴露依赖的引用值，对于单例来说<code>Spring</code>整个生命周期就只有一个对象，所以这个对象会存在与<code>CaChe</code>中，所以在创建<code>bean</code>的时候会从这个<code>CaChe</code>中进行获取，这个缓存就是<code>singletonObject</code>，如果获取不到并且对象有正在创建的时候，就从二级缓存<code>earlySingletonObjects</code>中获取，如果这里还是获取不到并且允许<code>singletonFactories</code>的<code>geObject()</code>获取的话就从三级花奴才能中获取<code>singletonFactory.getObject()</code>(三级缓存)获取，如果获取到了则：从<code>singletonFactories</code>中移除，并放入<code>earlySingletonObjects</code>中。其实也就是从三级缓存移动到了二级缓存</p><p>其实Spring解决循环依赖的就在于<code>singletonFactories</code>这个三级<code>Cache</code>，因为这个cache的类型就是<code>ObjectFactory</code>这里是解决循环依赖的关键点，发生在<code>createBeanInstance</code>之后，也就是单例对象这个时候是已经被创建出来了的，虽然是不完美，但是也是被看到的了，根据对象引用能定位到堆中的对象，这里是采用构造器创建的单例对象，但是一般来说最好是通过在字段上使用<code>@Autowired</code>注解进行解决，让Spring决定在合适的时候进行注入，另外就是使用介于setter方式进行依赖注入</p><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="MyBatis的分页"><a href="#MyBatis的分页" class="headerlink" title="MyBatis的分页"></a>MyBatis的分页</h2><ul><li>最原始的业务代码层面利用<code>List</code>的<code>suBList()</code>数据切片</li><li>原生的SQL关键字<code>Limit</code>实现</li><li><code>RowBounds</code>在Dao层定义好所要传输的所有分页信息，类型为<code>RowBounds</code>在server层进行pageInfo封装调用Dao层</li><li><code>Interceptor实现</code>利用MyBatis中的拦截器进行分类</li><li><code>PageHelper</code>项目分类，内部实现是自己封装拦截器</li></ul><h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="服务暴露的过程"><a href="#服务暴露的过程" class="headerlink" title="服务暴露的过程"></a>服务暴露的过程</h2><p>假设现在的场景都是在使用dubbo协议（dubbo、rmi、thrift、hessian、http、webservice、thrift、memcached、redis、rest、grpc）</p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="SQL调优的思路"><a href="#SQL调优的思路" class="headerlink" title="SQL调优的思路"></a>SQL调优的思路</h2><p>SQL调优最基本的，每个表都需要有主键，有主建的表MySQL会创建聚族索引，好处是主键和数据行是在一行的，在explain查的时候，这个的type级别是<code>const</code>，聚族索引是通向真实数据行的有利途径，另外一个就是查的数据可能是覆盖索引</p><p><strong>索引：</strong></p><ul><li>当有主键的时候SQL慢可以查看是否建立了相对应的索引</li><li>建立索引的时候尽量选择where条件后面的字段、group by、还有join连接的字段作为当前SQL的索引列</li><li>并且索引列也需要排序，要符合最左匹配原则</li><li>要根据索引选择器，非重复的数据行和重复的数据行中间的排列，大的放左边，小的放右边这样的形式，这种多列的索引列要去建立联合索引，而不要是建立单个索引</li><li>SQL写的时候不能将索引列放到一个表达式中，也尽量少用反向判断，比如NotNull、不等于、Notln类似的关键词这些都会导致索引失效的这个问题</li><li>查询频繁的话可以使用覆盖索引：可以直接在索引中查询到数据的 </li></ul><p><strong>索引失效</strong>可以去考虑SQL底层是不是出了什么问题，因为MySQL底层是会根据随机采样来计算索引的基数，如果出现错误，会认为虽然你的索引选择性比较大但MySQL会认为你的索引选择性比较小就不走自己定的索引，可以采用<code>force index</code>强制走该索引，还不行就需要刷新，要用<code>analyze TABLES</code>看看是否有重新排队</p><p>普通索引：</p><p>索引存放的是叶子节点和主键，还有索引列；查的时候是通过它的索引列查询到它的主键，再通过主键去回表查询，最后还是走的聚族索引查询的，因为有回表过程所以会慢一点</p><p>如果对主键进行查询，索引中只要建立主键就好了，其余不同字段的话就需要创建一个非聚族索引来加快查询速度</p><p><strong>唯一索引和普通索引的区别?</strong></p><p>因为唯一索引，会去确保列的唯一的话会再做一次判断的过程，判断过程开销是很小的，开销大的点在<code>buffer</code>区</p><h2 id="单个索引还是多个索引"><a href="#单个索引还是多个索引" class="headerlink" title="单个索引还是多个索引"></a>单个索引还是多个索引</h2><h2 id="MVCC和事务隔离级别的关系"><a href="#MVCC和事务隔离级别的关系" class="headerlink" title="MVCC和事务隔离级别的关系"></a>MVCC和事务隔离级别的关系</h2><p>InnoDB的特性就是支持事务，为了保证事务的并发度提供了一个隔离级别</p><ul><li><code>Read Uncommitted</code>（结果无法保证）</li><li><code>Read committed</code>解决了事务的脏读</li><li>MySQL默认的<code>Repeatable Read</code>解决了脏读和不可重复读，没有解决幻读</li><li><code>Serizlizable</code>串行化的，所有的都是由串行来执行的没有事务的，是最高的安全级别</li></ul><p>要解决幻读的时候，当是索引范围查询的时候会在后面加个<code>for update</code>会锁住未出现的行，确保事务中不会读到其他事务中提交的数据行，采用的是行级锁</p><p>丢失更新采用手动处理，采用乐观锁和悲观锁</p><ul><li>乐观锁：类似于CAS一样可以加个版本号，读完之后在改，改的时候再查一次看版本号是否相同，一致的话就安全写回</li><li>悲观锁：可以等人查的时候加上一个for update加上行锁，并且提供了一个事务传播的行为</li></ul><h2 id="MySQL的事务"><a href="#MySQL的事务" class="headerlink" title="MySQL的事务"></a>MySQL的事务</h2><p>原则：</p><ul><li>原子性：就是在一个事务里面的所有操作，要么都完成，要么都不完成，如果事务发生错误，就会造成回滚</li><li>一致性：事务的开始和结束之后，对于数据库的数据都是没有进行破坏的，表明写入的资料以及数据都是必须符合所有的预设规则的</li><li>隔离性：</li><li>持久性：</li></ul><p>用 BEGIN, ROLLBACK, COMMIT来实现</p><ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul><p>直接用 SET 来改变 MySQL 的自动提交模式:</p><ul><li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li></ul><h2 id="用过什么连接查询"><a href="#用过什么连接查询" class="headerlink" title="用过什么连接查询"></a>用过什么连接查询</h2><p>内连接查询：inner join</p><p>左连接查询：left join</p><p>右连接查询：right join</p><p>全连接查询：union</p><h2 id="Order-By排序"><a href="#Order-By排序" class="headerlink" title="Order By排序"></a>Order By排序</h2><p>我們可以將<code>SELECT</code>取得的資料集依某欄位來作排序，而排序分別可以由小至大 (ascending; 預設)，或由大至小 (descending)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> table_column1<span class="token punctuation">,</span> table_column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column_name1 <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">,</span> column_name2 <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="用过的SQL优化"><a href="#用过的SQL优化" class="headerlink" title="用过的SQL优化"></a>用过的SQL优化</h2><h3 id="大表优化"><a href="#大表优化" class="headerlink" title="大表优化"></a>大表优化</h3><ul><li>限定数据的范围</li><li>读写分离</li><li>垂直分表</li><li>水平分表</li></ul><h3 id="数据库的优化"><a href="#数据库的优化" class="headerlink" title="数据库的优化"></a>数据库的优化</h3><ul><li>SQL语句优化</li><li>索引优化</li><li>数据库表结构的优化、</li><li>硬件升级</li></ul><h2 id="SQL的常用函数"><a href="#SQL的常用函数" class="headerlink" title="SQL的常用函数"></a>SQL的常用函数</h2><h3 id="聚合函數-SQL-Aggregate-Functions"><a href="#聚合函數-SQL-Aggregate-Functions" class="headerlink" title="聚合函數 (SQL Aggregate Functions)"></a>聚合函數 (SQL Aggregate Functions)</h3><ul><li><a href="https://www.fooish.com/sql/avg-function.html" target="_blank" rel="noopener">AVG()</a></li><li><a href="https://www.fooish.com/sql/count-function.html" target="_blank" rel="noopener">COUNT()</a></li><li><a href="https://www.fooish.com/sql/max-function.html" target="_blank" rel="noopener">MAX()</a></li><li><a href="https://www.fooish.com/sql/min-function.html" target="_blank" rel="noopener">MIN()</a></li><li><a href="https://www.fooish.com/sql/sum-function.html" target="_blank" rel="noopener">SUM()</a></li></ul><h3 id="字串函數-SQL-String-Functions"><a href="#字串函數-SQL-String-Functions" class="headerlink" title="字串函數 (SQL String Functions)"></a>字串函數 (SQL String Functions)</h3><ul><li><a href="https://www.fooish.com/sql/ascii-function.html" target="_blank" rel="noopener">ASCII()</a></li><li><a href="https://www.fooish.com/sql/char-function.html" target="_blank" rel="noopener">CHAR()</a></li><li><a href="https://www.fooish.com/sql/concat-function.html" target="_blank" rel="noopener">CONCAT()</a></li><li><a href="https://www.fooish.com/sql/length-function.html" target="_blank" rel="noopener">LENGTH()</a></li><li><a href="https://www.fooish.com/sql/replace-function.html" target="_blank" rel="noopener">REPLACE()</a></li><li><a href="https://www.fooish.com/sql/ucase-function.html" target="_blank" rel="noopener">UCASE()</a></li><li><a href="https://www.fooish.com/sql/lcase-function.html" target="_blank" rel="noopener">LCASE()</a></li><li><a href="https://www.fooish.com/sql/mid-function.html" target="_blank" rel="noopener">MID()</a></li></ul><h3 id="數值函數-SQL-Mathematical-Functions"><a href="#數值函數-SQL-Mathematical-Functions" class="headerlink" title="數值函數 (SQL Mathematical Functions)"></a>數值函數 (SQL Mathematical Functions)</h3><ul><li><a href="https://www.fooish.com/sql/abs-function.html" target="_blank" rel="noopener">ABS()</a></li><li><a href="https://www.fooish.com/sql/ceil-function.html" target="_blank" rel="noopener">CEILING()</a></li><li><a href="https://www.fooish.com/sql/floor-function.html" target="_blank" rel="noopener">FLOOR()</a></li><li><a href="https://www.fooish.com/sql/power-function.html" target="_blank" rel="noopener">POWER()</a></li><li><a href="https://www.fooish.com/sql/sqrt-function.html" target="_blank" rel="noopener">SQRT()</a></li><li><a href="https://www.fooish.com/sql/log-function.html" target="_blank" rel="noopener">LOG()</a></li><li><a href="https://www.fooish.com/sql/trigonometric-function.html" target="_blank" rel="noopener">三角函數</a></li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="栈和队列的区别以及是什么，怎么实现"><a href="#栈和队列的区别以及是什么，怎么实现" class="headerlink" title="栈和队列的区别以及是什么，怎么实现"></a>栈和队列的区别以及是什么，怎么实现</h2><ul><li>栈先进先出的特点，可以很好的控制访问控制，栈的数据访问是有很严格的，只能访问最后加入的数据，这对数据访问控制严格的应用很有好处。现实中，字符串倒序输出，使用栈的原理就可以很好的实现</li><li>队列可以模拟很多现实的生产环境，例如排队，队列是先进先出，不允许有任何元素插队</li></ul><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="VUE的表格实现或Layui的表格实现以及思路"><a href="#VUE的表格实现或Layui的表格实现以及思路" class="headerlink" title="VUE的表格实现或Layui的表格实现以及思路"></a>VUE的表格实现或Layui的表格实现以及思路</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="2020/07/27/hou-duan/spring/spring/springmvc/"/>
      <url>2020/07/27/hou-duan/spring/spring/springmvc/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是MVC？"><a href="#什么是MVC？" class="headerlink" title="什么是MVC？"></a>什么是MVC？</h2><ul><li>MVC也就是模型（Model）、视图（View）、控制器（Controller），即是一种设计规范</li><li>作用主要是降低了View和业务逻辑的双向耦合性</li><li>主要是讲业务逻辑、数据、显示分离开来的方法进行代码编写</li></ul><h3 id="模型（Model）"><a href="#模型（Model）" class="headerlink" title="模型（Model）"></a>模型（Model）</h3><p>数据模型，主要是展示数据，所以包含着数据和行为，也可以说是JavaBean的组件，在现实开发种一般都是分开写的，也就是——DAO层和Service层。也是这个模型提供了数据查询和更新的功能，包括数据和业务两个。</p><h3 id="视图（VIew）"><a href="#视图（VIew）" class="headerlink" title="视图（VIew）"></a>视图（VIew）</h3><p>也就是负责进行模型的展示，一般来说就是我们所看到的东西，也即是客户想看到的东西，唔，就是一个Web应用输入网址回车，所弹出来的页面，就干这个事情</p><h3 id="控制器（Controller）"><a href="#控制器（Controller）" class="headerlink" title="控制器（Controller）"></a>控制器（Controller）</h3><p>用于接受用户的请求，委托给Model进行处理，处理完毕后把返回的Model给到View负责展示，也就是相当于，唔，中间人的操作</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/Java/SpringMVC/JSP%2Bservlet%2Bjavabean%E6%A8%A1%E5%BC%8F.png" alt="jsp+servlet+javabean"></p><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>其实归根到底就是<strong>用的人多，公司需要，==面试要问==</strong></p><h1 id="Spring-MVC实现原理"><a href="#Spring-MVC实现原理" class="headerlink" title="Spring MVC实现原理"></a>Spring MVC实现原理</h1><ul><li>客户端发送请求被<code>DispatcherServlet</code>（前置控制器）接受并拦截请求</li><li>调用映射处理器<code>HandlerMapping</code>根据请求的<code>URL</code>查找具体的<code>Controller</code></li><li><code>HandlerExecution</code>将解析后的信息传递给<code>DispatcherServlet</code></li><li>处理器适配器<code>HandlerAdapter</code>按照特定的规则去执行<code>Handler</code></li><li><code>Handler</code>让具体的<code>controller</code>进行执行</li><li>执行之后的具体信息返回给<code>HandlerAdapter</code></li><li><code>HandlerAdapter</code>将视图逻辑名和模型传递给<code>DispatcherServlet</code></li><li>调用视图解析器<code>ViewResolver</code>来解析所传递的逻辑视图名</li><li>视图解析器将解析的逻辑视图名传给<code>DispatcherServlet</code></li><li><code>DispatcherServlet</code>根据视图解析器解析的视图结果，调用具体的视图</li><li>返回客户端呈现</li></ul><h1 id="MVC的实现方式"><a href="#MVC的实现方式" class="headerlink" title="MVC的实现方式"></a>MVC的实现方式</h1><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><h2 id="普通实现"><a href="#普通实现" class="headerlink" title="普通实现"></a>普通实现</h2><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法</p><ul><li>缺点：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul><h2 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h2><ul><li>@Controller注解类型用于声明Spring类的实例是一个控制器</li><li>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>    controller<span class="token annotation punctuation">@Service</span>     service<span class="token annotation punctuation">@Component</span>    组件<span class="token annotation punctuation">@Repository</span>    dao层</code></pre><p>可以直接在方法上上使用<code>@RequestMapping</code>直接标出所需要的想要的路径</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span></code></pre><p>三种直接代替原本的bean注册，在类上使用<code>@Controller</code>会直接注册到SpringMVC中</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p><ul><li>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</li><li>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</li><li>只注解在方法上面</li></ul><h1 id="前后端交互JSON"><a href="#前后端交互JSON" class="headerlink" title="前后端交互JSON"></a>前后端交互JSON</h1><p><strong>JSON</strong>(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于<a href="http://www.crockford.com/javascript" target="_blank" rel="noopener">JavaScript Programming Language</a>, <a href="http://www.ecma-international.org/publications/files/ecma-st/ECMA-262.pdf" target="_blank" rel="noopener">Standard ECMA-262 3rd Edition - December 1999</a>的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言</p><p>JSON建构于两种结构：</p><ul><li>“名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为<em>对象（object）</em>，纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。</li><li>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。</li></ul><p>这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。</p><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><h2 id="JSON-和-JavaScript-对象互转"><a href="#JSON-和-JavaScript-对象互转" class="headerlink" title="JSON 和 JavaScript 对象互转"></a>JSON 和 JavaScript 对象互转</h2><p>可以在js文件里面使用以下两种方式</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"刘钦华"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span>        sex<span class="token punctuation">:</span> <span class="token string">"man"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果是：{"name":"刘钦华","age":"25","sex":"man"}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"+++++++++++++++++"</span><span class="token punctuation">)</span><span class="token keyword">var</span> object <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果是：{age: "25" name: "刘钦华" sex: "man"}</span></code></pre><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>一般来说Json都会在后端进行完成传给前端</p><p>也就是Controller层返回一串JSON数据</p><p>学习中使用的是<code>Jackson</code></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>之后的<code>web.xml</code>and<code>servlet.xml</code>配置就正常配置就好了</p><p>一般来说都会出现那种乱码，如何解决呢?</p><p>第一种：统一处理方式</p><p>在<code>servlet.xml</code>中添加如下</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre><p>第二种：返回的json串统一解决</p><p>直接在类上使用<code>@RestController</code>可以在该类下的所有方法都是使用json字符串解决了</p><p>第三种：原生态解决</p><p>因为在<code>@RequestMapping</code>中有方法解决</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/j1"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span></code></pre><p>但是一般不推荐如此，难看是一点，公司一般不会这么写着开发的，小公司除外</p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="简单唠嗑"><a href="#简单唠嗑" class="headerlink" title="简单唠嗑"></a>简单唠嗑</h2><p>Ajax就是异步请求的<code>JavaScript</code>和<code>xml</code>，是一种无需重新加载整个网页的情况下，实时更新某一部分的网页内容的技术，是一种用于创建更好的以及交互性能更强的web应用程序的技术</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/Ajax%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="Ajax工作原理"></p><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除</li></ul><h2 id="实现Demo"><a href="#实现Demo" class="headerlink" title="实现Demo"></a>实现Demo</h2><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>Demo使用的是jQuery提供的</p><pre class=" language-markdown"><code class="language-markdown">jQuery.ajax(...)<span class="token code keyword">      部分参数：</span><span class="token code keyword">            url：请求地址</span><span class="token code keyword">            type：请求方式，GET、POST（1.9.0之后用method）</span><span class="token code keyword">        headers：请求头</span><span class="token code keyword">            data：要发送的数据</span><span class="token code keyword">    contentType：即将发送信息至服务器的内容编码类型(默认: "application/x-www-form-urlencoded; charset=UTF-8")</span><span class="token code keyword">          async：是否异步</span><span class="token code keyword">        timeout：设置请求超时时间（毫秒）</span><span class="token code keyword">      beforeSend：发送请求前执行的函数(全局)</span><span class="token code keyword">        complete：完成之后执行的回调函数(全局)</span><span class="token code keyword">        success：成功之后执行的回调函数(全局)</span><span class="token code keyword">          error：失败之后执行的回调函数(全局)</span><span class="token code keyword">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><span class="token code keyword">        dataType：将服务器端返回的数据转换成指定类型</span><span class="token code keyword">          "xml": 将服务器端返回的内容转换成xml格式</span><span class="token code keyword">          "text": 将服务器端返回的内容转换成普通文本格式</span><span class="token code keyword">          "html": 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><span class="token code keyword">        "script": 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><span class="token code keyword">          "json": 将服务器端返回的内容转换成相应的JavaScript对象</span><span class="token code keyword">        "jsonp": JSONP 格式使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span></code></pre><p>简单案例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a1</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1:param=>"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"liu"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>$Title$</title>        <%--<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>--%>        <script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"></script>        <script>            function a1(){                $.post({                    url:"${pageContext.request.contextPath}/a1",                    data:{'name':$("#txtName").val()},                    success:function (data,status) {                        alert(data);                        alert(status);                    }                });            }        </script>    </head>    <body></code></pre><h3 id="SpringMVC实现"><a href="#SpringMVC实现" class="headerlink" title="SpringMVC实现"></a>SpringMVC实现</h3><p>增加一个实体类</p><p>接口编写</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"chin"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"开发"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"实际"</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"运维"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前端</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html>    <head>        <title>Title</title>        <script src="${pageContext.request.contextPath}/static/js/jquery-3.5.1.js"></script>        <script>            $(function () {                $("#btn").click(function () {                    $.post("${pageContext.request.contextPath}/a2", function (data) {                        console.log(data)                        var html = "";                        for (let i = 0; i < data.length; i++) {                            html += "<tr>" +                                "<td>" +                                data[i].name + "</td>" +                                "<td>" +                                data[i].age + "</td>" +                                "<td>" +                                data[i].sex + "</td>" +                                "</tr>"                        }                        $("#content").html(html);                    });                })            });        </script>    </head>    <body>        <input type="button" value="加载数据" id="btn">        <table>            <tr>                <td>姓名</td>                <td>年龄</td>                <td>性别</td>            </tr>            <tbody id="content">            </tbody>        </table>    </body></html></code></pre><h3 id="TestDemo"><a href="#TestDemo" class="headerlink" title="TestDemo"></a>TestDemo</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">a3</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"用户名错误"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"密码Error"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> msg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><c:set var="baseUrl" value="${pageContext.request.contextPath}/"/><html>    <head>        <title>登录</title>        <script src="${pageContext.request.contextPath}/static/js/jquery-3.5.1.js"></script>        <script>            function username() {                $.post({                    url: "${baseUrl}a3",                    data: {"name": $("#name").val()},                    success: function (data) {                        console.log(data.toString());                        if (data.toString() === 'OK') {                            $("#userInfo").css("color", "green");                        } else {                            $("#userInfo").css("color", "red");                        }                        $("#userInfo").html(data);                    }                })            }            function password() {                $.post({                    url: "${baseUrl}a3",                    data: {"password": $("#password").val()},                    success: function (data) {                        console.log(data.toString());                        if (data.toString() === 'OK') {                            $("#passwordInfo").css("color", "green");                        } else {                            $("#passwordInfo").css("color", "red");                        }                        $("#passwordInfo").html(data);                    }                })            }        </script>    </head>    <body>        <p>            用户名：<input type="text" id="name" onblur="username()">            <span id="userInfo"></span>        </p>        <p>            密码：<input type="text" id="password" onblur="password()">            <span id="passwordInfo"></span>        </p>    </body></html></code></pre><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="简单唠嗑-1"><a href="#简单唠嗑-1" class="headerlink" title="简单唠嗑"></a>简单唠嗑</h2><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong> </p><ul><li>==<strong>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</strong>==</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--拦截器配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--这个请求下面的所有文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.config.CustomInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--这个请求下面的所有文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.config.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>这里是拦截器配置</p><h3 id="config拦截器重写"><a href="#config拦截器重写" class="headerlink" title="config拦截器重写"></a>config拦截器重写</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断登录情况</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"goLogin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"userLoginInfo"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/jsp/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/main"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goLogin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">goLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userLoginInfo"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goOut"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">goOut</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"userLoginInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="前端页面的编写"><a href="#前端页面的编写" class="headerlink" title="前端页面的编写"></a>前端页面的编写</h3><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><c:set var="baseUrl" value="#{pageContext.request.contextPath}"/><html><head>    <title>登录页面</title></head><body><h1>登录</h1><form action="${baseUrl}/user/login" method="post">    用户名：<input type="text" name="username">    密码：<input type="text" name="password">    <input type="submit" value="提交"></form></body></html></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>首页</title>    <c:set var="baseUrl" value="${pageContext.request.contextPath}"/></head><body><h1>首页</h1><span>${username}</span><p>    <a href="${baseUrl}/user/goOut">注销</a></p></body></html></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><c:set var="baseUrl" value="${pageContext.request.contextPath}"/><html><head>  <title>主页</title></head><body><h1><a href="${baseUrl}/user/goLogin">登录页面</a></h1><h1><a href="${baseUrl}/user/main">首页</a></h1></body></html></code></pre><p>三个编写</p><p>逻辑主要是<code>index</code>页面点击首页无法进入<code>main</code>因为被拦截器拦截，只能跳转到登录页面先进性登录，之后才能跳转到<code>main</code>页面</p><p>而直接从登录可以直接到登录页面跳转到main页面</p><p>点击首页进去，到登录页面，输入密码，可以进入首页，显示用户名/当返回index的时候，点击首页，会先确定是否有session，有直接进去首页，没有拦截到登录页面；点击注销，会<code>session.removeAttribute</code>当前登录的session，当点击注销的时候就无法再从首页进入首页；</p><p>只要不点击注销这个session就一直存在的情况下</p><p>拦截器使用AOP的思想进行横切实现</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><p>文件上传这个在实际开发项目中是很常见的事情，使用SpringMVC的话的确是可以很好的支持文件上传，大那是在其上下文中默认的是没有装配的<code>MultipartResolver</code>，所以默认的情况下不太能支持文件上床的工作，如果想要在Spring中使用文件上传的功能，则需要在上下文中配置<code>MultipartResolver</code></p><p>前端的要求：为了能上传文件，必须将表单的<code>method</code>设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">fileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">fileUpload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> CommonsMultipartFile file<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取文件名 : file.getOriginalFilename();</span>        String filename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果文件名为空，直接回到首页！</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件名 : "</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上传路径保存设置</span>        String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果路径不存在，创建一个</span>        File realPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>realPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            realPath<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件保存地址："</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件输入流</span>        InputStream is <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件输出流</span>        OutputStream os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取写出</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Title: fileUpload2     * @Description: 采用file.Transto 来保存上传的文件     * @param: file     * @param: request     * @return: java.lang.String     * @Author: LQH     * @Date: 2020/08/12 05:06     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">fileUpload2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> CommonsMultipartFile file<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//上传路径保存设置</span>        String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File realPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>realPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            realPath<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//上传文件地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件保存地址："</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span>        file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/download"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">downloads</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//要下载的图片地址</span>        String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> <span class="token string">"基础语法.jpg"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1、设置response 响应头</span>        response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置页面不缓存,清空buffer</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符编码</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"multipart/form-data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//二进制传输数据</span>        <span class="token comment" spellcheck="true">//设置响应头</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span>                           <span class="token string">"attachment;fileName="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、 读取文件--输入流</span>        InputStream input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、 写出文件--输出流</span>        OutputStream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4、执行 写出操作</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的简单介绍学习</title>
      <link href="2020/07/13/hou-duan/spring/spring/spring/"/>
      <url>2020/07/13/hou-duan/spring/spring/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>Spring框架分为多个模块。应用程序可以选择所需的模块。核心容器的模块是核心，包括配置模型和依赖项注入机制。除此之外，Spring框架还为不同的应用程序体系结构提供了基础支持，包括消息传递，事务性数据和持久性以及Web。它还包括基于Servlet的Spring MVC Web框架，以及并行的Spring WebFlux反应式Web框架。</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/Spring4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="image-20200713204940317"></p><p>上面的图是Spring4种找到的，至于最新的Spring5种木有找到这个图</p><p>至于在Spring5首页所介绍的是这个</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/Java/SpringMVC/What%20Spring%20can%20do.png" alt="官网介绍"></p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><ul><li>一个快速开发的脚手架</li><li>基于Spring可以快速开发单个微服务</li><li>约定是大于配置的</li></ul><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><ul><li>基于SpringBoot实现</li></ul><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="IOC的原型"><a href="#IOC的原型" class="headerlink" title="IOC的原型"></a>IOC的原型</h2><p>可以使用一个set接口进行实现策略模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在以往的开发中使用的是那种根据用户需求修改代码，少一点的类还好，但是如果是成千上万个类的话，工作量会十分的大，这时候这时候可以考虑使用set接口实现动态策略，也就是上面的那种</p><p>在没有使用set接口实现之前程序是主动new对象，也就是说程序员想要修改就是修改，主动权在程序猿的手上，用户的每个需求都需要修改源代码；在使用了set之后程序不具有主动性，而是变成了被动接受的，也就是控制权交回给了程序本身</p><p>IOC思想就是属于那种当有了新的需求之后，我们开发者只需要关注新的业务实现了而不用去管理程序的接口，就像一个可以自定义的网站，也即是很多接口的网站；这样一来系统的耦合性大大降低了，可以更加专注在业务的实现上，当横向扩展一个新的需求，也即是新的业务的时候就只要专注扩展这个新的业务就行了，这时候我们只需要出一个对外实现的接口就可以了，至于前端需要实现的时候只需要把之前的接口替换为这个接口就可以了。</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/IOC%E5%9F%BA%E6%9C%ACSET%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt="前后对比"></p><p> 以上是<strong>IOC的原型</strong></p><h2 id="IOC的本质"><a href="#IOC的本质" class="headerlink" title="IOC的本质"></a>IOC的本质</h2><p>IOC全名叫做<strong>控制的反转（Inversion of Control）</strong>，是一种设计思想，所谓的<strong>依赖注入（DI）</strong>只是实现IOC的一种方式</p><p>当在没有IOC的程序中，我们所使用的面向对象编程，对象的所有的创建与对象之间的依赖关系完全就是在程序中；然而对象的创建由程序的自己控制，控制反转之后将对象的创建转移给第三方，就是所谓的<strong>依赖对象的方式反转</strong>，也叫控制反转</p><p>IOC是Spring框架的核心内容，使用了多种方式完美实现了IOC，可以使用xml配置，也可以使用注解，新版本的Spring框架可以做到O配置实现IOC</p><p>Spring容器在初始化的时候是首先需要读取配置文件的，根据配置文件或元数据创建与组织对象存入容器中，程序使用的时候再从IOC容器取出需要的对象。</p><p>IOC是一种通过描述（xml或注解）并通过第三方去生产或获取特定的对象方式。再Spring中实现控制反转的是IOC容器，实现方法是依赖注入，也即是DI</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/SpringIOC%E5%AE%B9%E5%99%A8.png" alt="SpringIOC容器"></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Spring创建对象    原本创建对象使用的是下面这种方式：    Hello hello = new Hello();    现在使用bean标签进行创建，对于在bean标签里面来说    id = 变量名    class = 对象    property = 给对象中的属性设置值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ll.entity.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里使用了的是pojo的set注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>之后就可以使用</p><pre class=" language-java"><code class="language-java">Hello hello <span class="token operator">=</span> <span class="token punctuation">(</span>Hello<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样进行new一个对象</p><p>上面这个过程就叫做控制反转</p><ul><li>控制：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，在使用了Spring之后，对象是由Spring创建了</li><li>反转：程序本身是不创建对象的，而是变成了被动接收对象</li><li>DI：利用set方式进行注入</li></ul><p>所以所谓的<strong>IOC就是一种编程思想，由原来的主动创建对象变成了被动接收对象</strong></p><h2 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h2><ol><li>默认实现使用无参构造创建对象</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--直接使用是无参构造创建--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>找工作中<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>有参构造方式——使用下标赋值</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--构造函数参数索引，下标赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>积极寻找工作<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>有参构造方式——通过类型</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>找工作<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li>有参构造方式——通过参数名</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>找工作<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>当创建多一个类的时候，一个<code>Entity</code>的<code>User</code> and <code>UserT</code>的时候</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Spring容器，当配置加载的时候就已经加载了全部了</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一样会出输出两个，也就是<code>User</code> and <code>UserT</code>的无参构造的内容，也即是在getBean的时候已经把容器里面的对象都创建了</p><h1 id="Spring的配置"><a href="#Spring的配置" class="headerlink" title="Spring的配置"></a>Spring的配置</h1><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--别名配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>newUser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// User user = (User) context.getBean("user");</span>User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"newUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>别名的配置可以说是两种方式都是可以取出原本的值来，好处就是原本的全限定名字可能很长，别名的话可以简写</p><h2 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h2><ul><li>id：bean的唯一标识符，相当于对象名</li><li>class：bean对象所对应的全限定名</li><li>name：同时也是别名，可以同时取多个别名,可以通过逗号分割，也可以通过分号，空格分割取不同的别名</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.UserT<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t,t2 t3<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>找工作中<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><p>可以将多个配置文件合为一个，多人开发的时候，不同的类不同的配置就需要不同的bean，我们可以使用import将所有人的beans.xml合并为一个总的</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>当出现相同的类定名的时候，后面导入的会覆盖前面的同名bean</p><h1 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI依赖注入</h1><h2 id="构造器注入，上面的IOC有说"><a href="#构造器注入，上面的IOC有说" class="headerlink" title="构造器注入，上面的IOC有说"></a>构造器注入，上面的IOC有说</h2><h2 id="SET方式注入"><a href="#SET方式注入" class="headerlink" title="SET方式注入"></a>SET方式注入</h2><p>由于可以混合使用基于构造函数的DI和基于setter的DI，因此将构造函数用于强制性依赖项并将setter方法或配置方法用于可选依赖项是一个很好的经验法则。请注意，可以 在setter方法上使用<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-required-annotation" target="_blank" rel="noopener">@Required</a>批注，以使该属性成为必需的依赖项。但是，最好使用带有参数的程序验证的构造函数注入。</p><p>依赖注入：SET注入</p><ul><li>依赖：bean对象创建依赖容器</li><li>注入：bean对象中的所有属性，由容器来决定</li></ul><h3 id="TestDemo"><a href="#TestDemo" class="headerlink" title="TestDemo"></a>TestDemo</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> cloe<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> cad<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties info<span class="token punctuation">;</span>    <span class="token keyword">private</span> String wife<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Address <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> books<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBooks</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> books<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCloe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cloe<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCloe</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> cloe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloe <span class="token operator">=</span> cloe<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getCad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cad<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCad</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> cad<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cad <span class="token operator">=</span> cad<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getGames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> games<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGames</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>games <span class="token operator">=</span> games<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Properties <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span>Properties info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getWife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> wife<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWife</span><span class="token punctuation">(</span>String wife<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wife <span class="token operator">=</span> wife<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", books="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", cloe="</span> <span class="token operator">+</span> cloe <span class="token operator">+</span>                <span class="token string">", cad="</span> <span class="token operator">+</span> cad <span class="token operator">+</span>                <span class="token string">", games="</span> <span class="token operator">+</span> games <span class="token operator">+</span>                <span class="token string">", info="</span> <span class="token operator">+</span> info <span class="token operator">+</span>                <span class="token string">", wife='"</span> <span class="token operator">+</span> wife <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Address{"</span> <span class="token operator">+</span>                <span class="token string">"address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置类</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>刘钦华<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--第一种，普通注入，value--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DI注入<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--第二种，Bean注入，ref--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--第三种注入，数组--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>统一阿萨姆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>计算机与实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--List--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cloe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>歌曲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Map--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cad<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4402024510100110<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>银行卡<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>110393857610298324983324<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--SET--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>FF14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>csGo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--NULL--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Properties--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1001023<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDISET</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        Student{            name='DI注入', address='Address{address='刘钦华'},            books=[Tools, 统一阿萨姆, 计算机与实现],            cloe=[歌曲, 代码, 电影],            cad={                身份证=4402024510100110,                银行卡=110393857610298324983324                },            games=[FF14, LOL, csGo],            info={                password=123456,                url=男,                driver=1001023,                username=root                },            wife='null'            }         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="拓展方式注入"><a href="#拓展方式注入" class="headerlink" title="拓展方式注入"></a>拓展方式注入</h2><p>在Spring 3.1中引入的c-namespace允许使用内联属性来配置构造函数参数，而不是嵌套<code>constructor-arg</code>元素</p><p>使用p-namespace，您可以使用<code>bean</code>元素的属性（而不是嵌套 <code>&lt;property/&gt;</code>元素）来描述协作Bean的属性值，或同时使用这两者。</p><p>Spring支持<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#xsd-schemas" target="_blank" rel="noopener">带有</a> XML定义的<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#xsd-schemas" target="_blank" rel="noopener">命名空间的</a>可扩展配置格式。<code>beans</code>本章讨论的配置格式在XML Schema文档中定义。但是，p命名空间未在XSD文件中定义，仅存在于Spring的核心中。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--P命名空间注入，property--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>刘钦华<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--C命名空间注入，Construct--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>刘钦华<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>P命名空间和C命名空间不可以直接使用，要使用需要导入以下两个方式</p><pre class=" language-xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"xmlns:c="http://www.springframework.org/schema/c"</code></pre><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><table><thead><tr><th align="left">Scope</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-singleton" target="_blank" rel="noopener">singleton</a></td><td align="left">(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-prototype" target="_blank" rel="noopener">prototype</a></td><td align="left">Scopes a single bean definition to any number of object instances.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-request" target="_blank" rel="noopener">request</a></td><td align="left">Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-session" target="_blank" rel="noopener">session</a></td><td align="left">Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-application" target="_blank" rel="noopener">application</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web.html#websocket-stomp-websocket-scope" target="_blank" rel="noopener">websocket</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><h3 id="singleton（单例模式）"><a href="#singleton（单例模式）" class="headerlink" title="singleton（单例模式）"></a>singleton（单例模式）</h3><p><img src="http://nanxiang-liu.test.upcdn.net/image/singleton.png" alt="单例模式"></p><p>默认的使用方式就是单例，也即是说无论取多少个对象出来，但是都是从一个Bean管理的对象里面复制出来的，需要再bean配置文件里面加上<code>scope=&quot;singleton&quot;</code>不加也是可以的，因为是默认的单例</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>每次对特定bean提出请求时，bean部署的非单一原型范围都会导致创建一个新bean实例。也就是说，将Bean注入到另一个Bean中，或者您可以通过<code>getBean()</code>容器上的方法调用来请求它。通常，应将原型作用域用于所有有状态Bean，将单例作用域用于无状态Bean。</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/IOC_prototype.png" alt="原型"></p><p>也就是说每一个bean创建都是一个单独的对象，需要在bean标签的配置里面加上<code>scope=&quot;prototype&quot;</code></p><p>每次从容器中get的时候，都会产生一个新的对象</p><h3 id="其余的几个作用域"><a href="#其余的几个作用域" class="headerlink" title="其余的几个作用域"></a>其余的几个作用域</h3><p>只会在weib开发中用到</p><h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><ul><li>所谓的自动装配就是Spring满足Bean依赖的一种方式</li><li>Spring会在上下文中自动寻找，并自动给Bean装配属性</li></ul><p>Spring中的三种装配的方式</p><ol><li>在xml中显示的配置</li><li>在Java中显示配置</li><li><strong>隐式的自动装配</strong></li></ol><h3 id="ByName自动装配"><a href="#ByName自动装配" class="headerlink" title="ByName自动装配"></a>ByName自动装配</h3><p>会自动在容器上下文中查找，也就是和自己对象set方法后面的值相对应的的<code>beanid</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;property name="cat" ref="cat"/>    &lt;property name="dog" ref="dog"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="byType自动装配"><a href="#byType自动装配" class="headerlink" title="byType自动装配"></a>byType自动装配</h3><p>会自动在容器上下问中查找，也即是和自己对象属性类型的相同的bean</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;property name="cat" ref="cat"/>    &lt;property name="dog" ref="dog"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="使用注解自动装配"><a href="#使用注解自动装配" class="headerlink" title="使用注解自动装配"></a>使用注解自动装配</h3><p>使用注解前提是：</p><ol><li>导入约束，context约束</li><li>配置注解的支持：<code>&lt;context:annotation-config/&gt;</code></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context                           https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p>可以直接在POJO上使用或直接在SET方法上使用</p><p>使用Autowired我们可以不用编写SET方法，前提是你这个你的自动装配在 IOC （Spring）容器中存在，且符合名字byName</p><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><p>当配置文件的<bean>有多个相同类型，但是id值不一样的时候，会出现识别不了的情况，这时候就可以使用后面跟个<code>value = “xxxxxx”</code>id值来适配</p><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p>这个是JDK的注解，里面同样是有实现，但是当出现两个类型一样的时候，会出现识别不了的情况，这时候可以加上<code>value = “XXXXXXXX”</code>进行识别</p><pre class=" language-java"><code class="language-java">   String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span></code></pre><p>首先通过名字查找，后通过类型查找，当两个都找不到的时候，才报错</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>@Resource    AND    @Autowired的区别：</p><ul><li>都是自动装配，可以放在属性的字段上的</li><li>@Autowire是通过byType的方式实现的</li><li>@Resource默认通过byName的方式实现，如果找不到所谓的名字的话，就会转为通过byType实现；如果两个都是不存在的话就直接报错</li><li>执行顺序不同：@Autowired通过byType的方式实现，类型重复的话就会按照名字进行匹配 </li></ul><h1 id="Spring使用注解开发"><a href="#Spring使用注解开发" class="headerlink" title="Spring使用注解开发"></a>Spring使用注解开发</h1><p>在Spring4往后，必须使用AOP包的导入</p><p>使用</p><h2 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h2><h2 id="属性如何注入"><a href="#属性如何注入" class="headerlink" title="属性如何注入"></a>属性如何注入</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 相当于配置文件里面的 &lt;property name="name" value="DI注入"/></span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"chin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当然，复杂的还是使用那个配置文件</p><h2 id="衍生注解"><a href="#衍生注解" class="headerlink" title="衍生注解"></a>衍生注解</h2><p>@Compoent有几个衍生注解</p><ul><li>dao：【@Repository】</li><li>service：【@Service】</li><li>controller：【@Controller】</li></ul><p>注解都是将某个类注册到Spring中，装配bean </p><h2 id="自动装配置"><a href="#自动装配置" class="headerlink" title="自动装配置"></a>自动装配置</h2><ul><li>@Autowired：自动装配，通过名字和类型<ul><li>如果<code>Autowired</code>不能唯一自动装配上注解的话，则需要通过<code>@Qualifire(value = “”)</code></li></ul></li><li>@Nullable：当字段配置上了这个注解的时候，说明这个字段是可以为null的</li><li>@Resource：自动装配，通过名字和类型</li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton "</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 相当于配置文件里面的 &lt;property name="name" value="DI注入"/></span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"chin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>xml与注解</p><ul><li>xml更加万能，适用于各种场合，维护起来更加便捷</li><li>注解：不是自己的类使用不了，维护相对来说困难</li></ul><p>xml与注解的最佳实践</p><ul><li>xml用来管理bean</li><li>注解只负责完成属性的注入</li><li>使用过程中只需要注意：想要注解生效，就必须要开启注解的支持</li></ul><h1 id="使用Java的方式配置Spring"><a href="#使用Java的方式配置Spring" class="headerlink" title="使用Java的方式配置Spring"></a>使用Java的方式配置Spring</h1><p>现在一般来说不需要使用Java的xml配置了，全权交给Java实现；JavaConfig是Spring的一个子项目，Spring4之后成为了一个核心功能</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"gettewtesF"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.chin.entity"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>ChinConfig2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="TestDemo-1"><a href="#TestDemo-1" class="headerlink" title="TestDemo"></a>TestDemo</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>ChinConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User getUser <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>SpringAPO的底层，就是代理模式</p><p>代理模式分类</p><ul><li>静态代理</li><li>动态代理</li></ul><p><img src="http://nanxiang-liu.test.upcdn.net/image/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt="代理模式"></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般采用接口或抽象类实现</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，会有一些附属操作</li><li>客户角色：访问代理对象的人</li></ul><p>代理模式的好处：</p><ul><li>可以使得真实角色更加纯粹，不用去关注一些公共的事务之类的</li><li>公共的事务就直接交给代理角色完成就好了，实现了业务分工</li><li>公共业务发生扩展的时候方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色，代码量就会翻倍，开发效率以及维护降低</li></ul><h3 id="实现AOP"><a href="#实现AOP" class="headerlink" title="实现AOP"></a>实现AOP</h3><p>正常的我们是从<code>Dao</code>–&gt;<code>service</code>—&gt;<code>Controller</code>—&gt;<code>View（前端）</code>但是现在需要一个新的功能，而我们不可能说是直接修改代码，只能增加新功能（在公司是不太允许的，万一出现无法修复的BUG——功能产生BUG）那么我们就需要插入一个新功能——AOP机制的实现，横向开发</p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><ul><li>动态代理和静态代理的角色一样</li><li>动态代理的代理类是动态生成的，不知我们自己写的</li><li>基于接口的动态代理、基于类的动态代理<ul><li>基于接口：JDK的动态代理</li><li>基于类：cglib</li><li>Java字节码的实现：javasist</li></ul></li><li>一个动态代理类对应的就是一个接口，对应的就是一类的业务</li><li>一个动态代理类可以对应多个类，</li></ul><p>Proxy：生成动态代理、InvocationHandler：调用处理程序并返回结果的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 被代理的接口</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成得到代理类</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理代理实例，并且返回结果</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态代理的本质使用的就是反射机制</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span> <span class="token operator">+</span>msg<span class="token operator">+</span><span class="token string">"方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 真实角色</span>        ServiceImpl service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 代理角色</span>        ProxyInvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态生成代理类</span>        Service proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Service<span class="token punctuation">)</span> handler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>什么是AOP，就是面向切面编程，是属于OOP的一种衍生，通过预编译的方式和运行期的动态代理实现程序功能的统一维护的一种技术。是属于软件开发的热点，是Spring框架中的一个重要内容，是函数式编程的一种衍生泛型。利用AOP可以对业务的各种逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高开发效率</p><h2 id="AOP在Spring中的作用"><a href="#AOP在Spring中的作用" class="headerlink" title="AOP在Spring中的作用"></a>AOP在Spring中的作用</h2><p>==<strong>提供声明式的事务，允许用户自定义切面</strong>==</p><ul><li>横切关注点：跨越应用程序多个模块方法、功能。也就是说即使与我们自身的业务无关，但是还是需要关注的部分，如：日志、安全、缓存、事务等等模块</li><li>切面（ASPECT）：横切关注点，也就是说一个类</li><li>通知（Advice）：切面完成的工作，也即是说类中的方法</li><li>目标（Taraget）：被通知对象，返回结果等</li><li>代理（Proxy）：想目标对象应用通知之后创建的对象</li><li>切入点（PointCut）：切面通知执行的地点定义</li><li>连接点（JoinPoint）：与切入点匹配的执行点</li></ul><p><img src="http://nanxiang-liu.test.upcdn.net/image/AOP%E7%AE%80%E4%BB%8B.png" alt="AOP简介"></p><p>SpringAOP中，通过通知定义横切逻辑，Spring中支持5种类型的通知</p><table><thead><tr><th align="center">通知类型</th><th align="center">连接点</th><th align="left">实现接口</th></tr></thead><tbody><tr><td align="center">前置通知</td><td align="center">方法之前</td><td align="left">org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td align="center">后置通知</td><td align="center">方法后</td><td align="left">org.springframework.aop.AfterRenturningAdvice</td></tr><tr><td align="center">环绕通知</td><td align="center">方法前后</td><td align="left">org.aopllliance.intercept.MethodInterceptor</td></tr><tr><td align="center">异常抛出通知</td><td align="center">方法抛出异常</td><td align="left">org.springframework.aop.ThrowsAdvice</td></tr><tr><td align="center">引介通知</td><td align="center">类中增加新的方法属性</td><td align="left">org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><h2 id="Spring实现AOP"><a href="#Spring实现AOP" class="headerlink" title="Spring实现AOP"></a>Spring实现AOP</h2><p>在使用AOP之前需要导包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--AOP的包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="方式一：使用Spring的API接口【主要是SpringAPI接口的实现】"><a href="#方式一：使用Spring的API接口【主要是SpringAPI接口的实现】" class="headerlink" title="方式一：使用Spring的API接口【主要是SpringAPI接口的实现】"></a>方式一：使用Spring的API接口【主要是SpringAPI接口的实现】</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--方式一--></span><span class="token comment" spellcheck="true">&lt;!--配置Aop--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置切入点 expression：限定符——类名——类下面的方法——参数 限定符和方法名采用通配符*号进行配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.chin.service.ChinServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--执行环绕增加--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h3 id="方式二：自定义实现AOP【切面的定义】"><a href="#方式二：自定义实现AOP【切面的定义】" class="headerlink" title="方式二：自定义实现AOP【切面的定义】"></a>方式二：自定义实现AOP【切面的定义】</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--方式二--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.diy.DiyPoinCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--切入点--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.chin.service.ChinServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--通知--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h3 id="方式三：使用注解实现"><a href="#方式三：使用注解实现" class="headerlink" title="方式三：使用注解实现"></a>方式三：使用注解实现</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationDevelopment</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.chin.service.ChinServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行之前======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.chin.service.ChinServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行之后++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.chin.service.ChinServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint point<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"signature："</span> <span class="token operator">+</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行方法</span>        point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之后"</span> <span class="token operator">+</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--方式三--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotationPoinCut<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.diy.AnnotationDevelopment<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--开启注解支持--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span></code></pre><h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h1><p>步骤：</p><ul><li>导入相关的jar包<ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop植入</li><li>mybatis-spring</li></ul></li><li>编写相关代码</li><li>测试</li></ul><h2 id="mybatis-spring"><a href="#mybatis-spring" class="headerlink" title="mybatis-spring"></a>mybatis-spring</h2><p>导入jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--mybatis与Spring的植入包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我们可以使用 <code>SqlSessionFactoryBean</code>来创建 <code>SqlSessionFactory</code>。 要配置这个工厂 bean，只需要把下面代码放在 Spring 的 XML 配置文件中，如果定义了接口的话那么可以通过 <code>MapperFactoryBean</code> 将接口加入到 Spring 中。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--DataSource：使用Spring的数据源替换MyBatis的配置 c3p0 dbcp druid--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mariadb.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mariadb://47.267.27.333:3306/mybatis?useSSL<span class="token punctuation">=</span>false&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>liu1995<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--SqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--绑定MyBatis配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mappers/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--SqlSessionTemplate使用的就是sqlSession--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--这里只能选择构造器注入，因为这里没有set方法--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-dao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.mapper.UserMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>创建接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建mapper文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT *        FROM mybatis.user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>创建SqlSessionFactory的实现类，因为mybatis-spring使用的都是sqlSessionFacotyTemplate</p><p>需要注意的是：所指定的映射器类==<strong>必须</strong>==是一个接口，而不是具体的实现类。在这个示例中，通过注解来指定 SQL 语句，但是也可以使用 MyBatis 映射器的 XML 配置文件。</p><p>而调取MyBatis的时候就只需要几行代码即可</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SqlSessionTemplate sqlSession<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样我们写的时候就不用使用mybatis的sqlSessionFartoy，而是使用的是SqlsessionTemplate</p><h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><ul><li>一组业务当成一个业务来做，要么都成功，要么都失败</li><li>事务再项目开发中涉及到数据的一致性的问题</li><li>确保完整性和统一性</li></ul><h2 id="事务ACID原则"><a href="#事务ACID原则" class="headerlink" title="事务ACID原则"></a>事务ACID原则</h2><ul><li>原子性：事务是数据库的逻辑工作单位，事务中包括的所有操作要么都做，要么都不做</li><li>一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束</li><li>隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li>持久性：已被提交的事务对数据库的修改应该永久保存在数据库中</li></ul><p>我们将严格遵循ACID属性的事务称为<strong>刚性事务</strong>。与之相对，期望最终一致性，在事务执行的中间状态允许暂时不遵循ACID属性的事务称为<strong>柔性事务</strong>，可参考<strong>传统事务与柔性事务</strong>，柔性事务的使用涉及到<strong>分布式事务</strong>方案，可以后续扩展，这里我们先将注意集中在事务实现原理上</p><h2 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h2><ul><li>声明式事务：AOP</li><li>编程式事务：需要在代码中进行的管理</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置声明式事务--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--结合AOP进行织入事务--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--给某些方法配置配置事务--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置事务切入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.chin.mapper.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h3 id="Spring中propagation的七种事务配置"><a href="#Spring中propagation的七种事务配置" class="headerlink" title="Spring中propagation的七种事务配置"></a>Spring中propagation的七种事务配置</h3><ul><li>==<strong>REQUIRED</strong>==：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择</li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行</li><li>MANDATORY：支持当前事务，如果当前没有事务，就抛出异常</li><li>REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起</li><li>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li><li>NEVER：以非事务方式执行，如果当前存在事务，则抛出异常</li><li>NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务</li></ul><p>注意这些操作会直接影响数据的存储，必须根据当时情况进行选择</p><h3 id="为什么要配置事务？"><a href="#为什么要配置事务？" class="headerlink" title="为什么要配置事务？"></a>为什么要配置事务？</h3><ul><li>如果不配置事务的话，可能会存在数据提交不一致的情况，特别是银行项目涉及到金额，订单之类的，必须配置事务</li><li>如果不在Spring中配置事务的话我们就需要在代码中进行配置事务</li><li>事务在项目的开发中十分的重要，涉及到数据的一致性，完整性的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合基本</title>
      <link href="2020/07/13/hou-duan/spring/spring/ssm-zheng-he/"/>
      <url>2020/07/13/hou-duan/spring/spring/ssm-zheng-he/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><p>所谓的<code>SSM</code>就是Spring、SpringMVC、MyBatis进行整合开发的项目</p><h2 id="pom-xml依赖的导入"><a href="#pom-xml依赖的导入" class="headerlink" title="pom.xml依赖的导入"></a>pom.xml依赖的导入</h2><p>最简化的：</p><ul><li>Junit</li><li>数据库驱动：Oracle、MySQL、MariaDB</li><li>数据库连接池：Druid、c3p0、DBCP</li><li>Servlet和JSP</li><li>MyBatis</li><li>Spring</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Junit--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--数据库驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mariadb.jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mariadb-java-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Servlet - JSP --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Mybatis--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Spring--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--lombok--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>静态资源到处的问题处理</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h2 id="创建基本包、配置文件"><a href="#创建基本包、配置文件" class="headerlink" title="创建基本包、配置文件"></a>创建基本包、配置文件</h2><ul><li>com.chin.entity</li><li>com.chin.controller</li><li>com.chin.service</li><li>com.chin.mapper</li></ul><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/chin/mapper/BookMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring/spring-dao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring/spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring/spring-mvc.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a>spring-dao.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--关联数据库文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:database.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--连接池--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置连接池属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最大并发连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${maxActive}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 初始化连接数量 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${initialSize}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置获取连接等待超时的时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${maxWait}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最小空闲连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${minIdle}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${timeBetweenEvictionRunsMillis}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${minEvictableIdleTimeMillis}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validationQuery<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${validationQuery}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${testWhileIdle}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${testOnBorrow}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${testOnReturn}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxOpenPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${maxOpenPreparedStatements}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打开removeAbandoned功能 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeAbandoned<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${removeAbandoned}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 1800秒，也就是30分钟 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeAbandonedTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${removeAbandonedTimeout}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭abanded连接时输出错误日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logAbandoned<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${logAbandoned}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置SqlSessionFactory对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --></span>    <span class="token comment" spellcheck="true">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入sqlSessionFactory --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 给出需要扫描Dao接口包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>创建数据库数据源</p><p>database.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">org.mariadb.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mariadb://你的数据库地址:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">#配置扩展插件 监控统计用filters:stat 日志用filters:log4j 防御sql注入用filters:wall</span><span class="token attr-name">filters</span><span class="token punctuation">=</span><span class="token attr-value">stat</span><span class="token comment" spellcheck="true">#最大连接池数量  初始化建立物理连接的个数  获取连接时最长的等待时间  最小连接池数量  maxIdle已经弃用</span><span class="token attr-name">maxActive</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">maxWait</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token attr-name">minIdle</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token attr-name">maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">15</span><span class="token comment" spellcheck="true">#有两个含义 1.Destroy 线程会检测连接的时间 2.testWhileIdle的判断依据</span><span class="token attr-name">timeBetweenEvictionRunsMillis</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token comment" spellcheck="true">#Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接</span><span class="token attr-name">minEvictableIdleTimeMillis</span><span class="token punctuation">=</span><span class="token attr-value">300000</span><span class="token comment" spellcheck="true">#用来检测连接是否的sql，要求是一个查询语句。在mysql中通常设置为SELECT 'X'</span><span class="token attr-name">validationQuery</span><span class="token punctuation">=</span><span class="token attr-value">SELECT 'x'</span><span class="token comment" spellcheck="true">#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery连接是否有效</span><span class="token attr-name">testWhileIdle</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#申请连接时执行validationQuery检测连接是否有效 这个配置会降低性能</span><span class="token attr-name">testOnBorrow</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true">#归还连接时执行validationQuery检测连接是否有效 这个配置会降低性能</span><span class="token attr-name">testOnReturn</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true">#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true</span><span class="token attr-name">maxOpenPreparedStatements</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment" spellcheck="true">#对于建立连接超过removeAbandonedTimeout的连接强制关闭</span><span class="token attr-name">removeAbandoned</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#指定连接建立多长就被强制关闭</span><span class="token attr-name">removeAbandonedTimeout</span><span class="token punctuation">=</span><span class="token attr-value">1800</span><span class="token comment" spellcheck="true">#指定发生removeabandoned时，是否记录当前线程的堆栈信息到日志中</span><span class="token attr-name">logAbandoned</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><h3 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--扫描service层的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--BookServiceImpl注入到IOC容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.service.BooksServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置SpringMVC --></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.开启SpringMVC注解驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.静态资源默认servlet配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.扫描web相关的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="编写Entity层"><a href="#编写Entity层" class="headerlink" title="编写Entity层"></a>编写Entity层</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: Books * @Description: TODO 类描述 * @Author: LQH * @Date: 2020/08/05 * @Version: 1.0 **/</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bookId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bookCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> String detail<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="编写对应的Mapper-xml"><a href="#编写对应的Mapper-xml" class="headerlink" title="编写对应的Mapper.xml"></a>编写对应的Mapper.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chin.mapper.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO ssmbuild.books (book_name, book_count, detail)        VALUES (#{bookName}, #{bookCount}, #{detail});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        DELETE        FROM ssmbuild.books        WHERE book_id = #{bookId};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        UPDATE ssmbuild.books        SET book_name  = #{bookName},            book_count = #{bookCount},            detail     = #{detail}        WHERE book_id = #{bookId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBookById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT *        FROM ssmbuild.books        WHERE book_id = #{bookId};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAllBooks<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT *        FROM ssmbuild.books    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: BookMapper * @Description: TODO 类描述 * @Author: LQH * @Date: 2020/08/05 * @Version: 1.0 **/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">insertBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    Books <span class="token function">selectBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookId"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">selectAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="编写Service层的接口和实现类"><a href="#编写Service层的接口和实现类" class="headerlink" title="编写Service层的接口和实现类"></a>编写Service层的接口和实现类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: BooksService * @Description: TODO 类描述 * @Author: LQH * @Date: 2020/08/05 * @Version: 1.0 **/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BooksService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">insertBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    Books <span class="token function">selectBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">selectAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>chin<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>BookMapper<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName: BooksServiceImpl * @Description: 实现类 * @Author: LQH * @Date: 2020/08/05 * @Version: 1.0 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooksServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BooksService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> BookMapper bookMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBookMapper</span><span class="token punctuation">(</span>BookMapper bookMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bookMapper <span class="token operator">=</span> bookMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">insertBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">deleteBook</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Books <span class="token function">selectBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">selectBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">selectAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">selectAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="编写web-xml"><a href="#编写web-xml" class="headerlink" title="编写web.xml"></a>编写web.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--encodingFilter--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.CharacterEncodingFilter        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Session过期时间--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h2 id="编写jsp文件"><a href="#编写jsp文件" class="headerlink" title="编写jsp文件"></a>编写jsp文件</h2><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><pre class=" language-jsp"><code class="language-jsp"><%--  Created by IntelliJ IDEA.  User: Puffs  Date: 2020/08/05  Time: 16:58  To change this template use File | Settings | File Templates.--%><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>首页</title>    <style>        a {            text-decoration: none;            color: brown;            font-size: 18px;        }        h3 {            width: 300px;            height: 250px;            margin: 100px auto;            text-align: center;            line-height: 250px;            background: bisque;            border-radius: 5px;        }    </style></head><body><h3>    <a href="${pageContext.request.contextPath}/book/allBook">进入书籍页面</a></h3></body></html></code></pre><h3 id="allBook-jsp"><a href="#allBook-jsp" class="headerlink" title="allBook.jsp"></a>allBook.jsp</h3><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>书籍列表</title>    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <!-- 引入 Bootstrap -->    <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet"></head><body><div class="container">    <div class="row clearfix">        <div class="col-md-12 column">            <div class="page-header">                <h1>                    <small>书籍列表 —— 显示所有书籍</small>                </h1>            </div>        </div>    </div>    <div class="row">        <div class="col-md-4 column">            <a class="btn btn-primary" href="${pageContext.request.contextPath}/book/toInsertBook">新增</a>        </div>    </div>    <div class="row clearfix">        <div class="col-md-12 column">            <table class="table table-hover table-striped">                <thead>                <tr>                    <th>书籍编号</th>                    <th>书籍名字</th>                    <th>书籍数量</th>                    <th>书籍详情</th>                    <th>操作</th>                </tr>                </thead>                <tbody>                <c:forEach var="book" items="${requestScope.get('list')}">                    <tr>                        <td>${book.getBookId()}</td>                        <td>${book.getBookName()}</td>                        <td>${book.getBookCount()}</td>                        <td>${book.getDetail()}</td>                        <td>                            <a href="${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookId()}">更改</a>                            |                            <a href="${pageContext.request.contextPath}/book/delete/${book.getBookId()}">删除</a>                        </td>                    </tr>                </c:forEach>                </tbody>            </table>        </div>    </div></div></code></pre><h3 id="insertBook-jsp"><a href="#insertBook-jsp" class="headerlink" title="insertBook.jsp"></a>insertBook.jsp</h3><pre class=" language-jsp"><code class="language-jsp"><%--  Created by IntelliJ IDEA.  User: Puffs  Date: 2020/08/06  Time: 05:18  To change this template use File | Settings | File Templates.--%><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>增加书籍</title>    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.1/css/bootstrap.min.css"          integrity="sha384-VCmXjywReHh4PwowAiWNagnWcLhlEJLA5buUprzK8rxFgeH0kww/aWY76TfkUoSX" crossorigin="anonymous"></head><body><div class="container">    <div class="row clearfix">        <div class="col-md-12 column">            <div class="page-header">                <h1>                    <small>新增书籍</small>                </h1>            </div>        </div>    </div>    <form action="${pageContext.request.contextPath}/book/insertBook" method="post">        <div class="form-group">            <label>书籍名称：</label>            <label>                <input type="text" name="bookName" class="form-control">            </label>        </div>        <div class="form-group">            <label>书籍数量：</label>            <label>                <input type="text" name="bookCount" class="form-control">            </label>        </div>        <div class="form-group">            <label>书籍描述：</label>            <label>                <input type="text" name="detail" class="form-control">            </label>        </div>        <div class="form-group">            <input type="submit" class="form-control" value="添加">        </div>    </form></div></body></html></code></pre><h3 id="updateBook-jsp"><a href="#updateBook-jsp" class="headerlink" title="updateBook.jsp"></a>updateBook.jsp</h3><pre class=" language-jsp"><code class="language-jsp"><%--  Created by IntelliJ IDEA.  User: Puffs  Date: 2020/08/07  Time: 00:23  To change this template use File | Settings | File Templates.--%><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>修改信息</title>    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <!-- 引入 Bootstrap -->    <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet"></head><body><div class="container">    <div class="row clearfix">        <div class="col-md-12 column">            <div class="page-header">                <h1>                    <small>修改书籍信息</small>                </h1>            </div>        </div>    </div>    <form action="${pageContext.request.contextPath}/book/updateBook" method="post">        <input type="hidden" name="bookId" value="${UBook.bookId}">        <div class="form-group">            <label>书籍名称：</label>            <input type="text" name="bookName" class="form-control" value="${UBook.bookName}" required>        </div>        <div class="form-group">            <label>书籍数量：</label>            <input type="text" name="bookCount" class="form-control" value="${UBook.bookCount}" required>        </div>        <div class="form-group">            <label>书籍描述：</label>            <input type="text" name="detail" class="form-control" value="${UBook.detail}" required>        </div>        <div class="form-group">            <input type="submit" class="form-control" value="提交">        </div>    </form></div></body></html></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8中的For循环</title>
      <link href="2020/07/04/tools/java8-zhong-de-for-xun-huan/"/>
      <url>2020/07/04/tools/java8-zhong-de-for-xun-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8中的For循环"><a href="#Java8中的For循环" class="headerlink" title="Java8中的For循环"></a>Java8中的For循环</h1><h2 id="Collection类"><a href="#Collection类" class="headerlink" title="Collection类"></a>Collection类</h2><p>常见的集合有两种形式（<code>Collection&lt;E&gt;、Map&lt;K，V&gt;</code>）</p><p>在以往的遍历有以下几种形式</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段干扰字段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 普通for循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 增强for循环</span><span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//迭代器</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Java8中的forEach</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加上Lambda</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sort排序</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span>  o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>本质使用的是==<strong>反射机制</strong>==</p><p>底层使用的是==<strong>动态代理</strong>==</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中无法下载源码的时候</title>
      <link href="2020/07/04/tools/xiang-mu-zhong-wu-fa-xia-zai-yuan-ma-de-shi-hou/"/>
      <url>2020/07/04/tools/xiang-mu-zhong-wu-fa-xia-zai-yuan-ma-de-shi-hou/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端/数据结构与算法/数据结构</title>
      <link href="2020/06/22/hou-duan/shu-ju-jie-gou-yu-suan-fa/shu-ju-jie-gou/"/>
      <url>2020/06/22/hou-duan/shu-ju-jie-gou-yu-suan-fa/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="2020/06/21/hou-duan/java/ji-chu/mybatis/"/>
      <url>2020/06/21/hou-duan/java/ji-chu/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h2><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h3 id="如何获取MyBatis"><a href="#如何获取MyBatis" class="headerlink" title="如何获取MyBatis"></a>如何获取MyBatis</h3><ul><li><a href="https://github.com/" target="_blank" rel="noopener">GItHub</a>：最大的机油交汇网站</li><li><a href="https://mvnrepository.com/artifact/org.mybatis" target="_blank" rel="noopener">MVNrepository</a>：Maven仓库</li><li><a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">中文文档</a>：MyBatis的DOS</li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><ul><li>持久化就是将程序的数据在持久状态和瞬时状态妆化的过程<ul><li>瞬时状态类似于内存，断电的话就会直接失去</li></ul></li><li>数据库（jdbc），io文件持久化</li><li>冷藏：买肉，想要后面吃，放冰箱存起来，罐头……</li></ul><h3 id="为什么要持久化"><a href="#为什么要持久化" class="headerlink" title="为什么要持久化"></a>为什么要持久化</h3><p>某些对象不可以丢掉</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>Dao层、Service层、Controller层</p><ul><li>也就是说可以完成持久化工作的代码块</li><li>层之间的界限明显</li></ul><h2 id="为什么需要MyBatis"><a href="#为什么需要MyBatis" class="headerlink" title="为什么需要MyBatis"></a>为什么需要MyBatis</h2><ul><li>方便</li><li>传统的JDBC代码复杂，MyBatis是简化，一个框架</li><li>优点<ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql</li></ul></li></ul><h1 id="MyBatis的使用"><a href="#MyBatis的使用" class="headerlink" title="MyBatis的使用"></a>MyBatis的使用</h1><hr><p>正常来说——搭建环境 –&gt; 导入MyBatis–&gt;编写代码–&gt;测试</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="搭建数据库"><a href="#搭建数据库" class="headerlink" title="搭建数据库"></a>搭建数据库</h3><ul><li>自己工具创建数据库</li><li>SQL创建数据库</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>MyBatis<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>MyBatis<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">30</span> <span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">30</span> <span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> UTF8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'刘钦华'</span><span class="token punctuation">,</span> <span class="token string">'1234553151'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'陈何'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'和海水的'</span><span class="token punctuation">,</span><span class="token string">'21353325436'</span><span class="token punctuation">)</span></code></pre><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><ol><li>新建maven项目</li><li>删除src目录</li><li>导入maven依赖</li></ol><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--导入依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SQL驱动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mariadb.jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mariadb-java-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--MyBatis--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Junit--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="编写MyBatis的工具类"><a href="#编写MyBatis的工具类" class="headerlink" title="编写MyBatis的工具类"></a>编写MyBatis的工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// sqlSessionFactory --> sql session</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从 XML 中构建 SqlSessionFactory</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取SqlSessionFactory</span>            String resource <span class="token operator">=</span> <span class="token string">"org/mybatis/example/mybatis-config.xml"</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。    SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。    可以通过 SqlSession 实例来直接执行已映射的 SQL 语句    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", pwd='"</span> <span class="token operator">+</span> pwd <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Dao接口"><a href="#Dao接口" class="headerlink" title="Dao接口"></a>Dao接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper        PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>绑定对应的实体类<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.ll.entity.User"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getUserList"</span> resultType<span class="token operator">=</span><span class="token string">"com.ll.entity.User"</span><span class="token operator">></span>        select <span class="token operator">*</span> from MyBatis<span class="token punctuation">.</span>user  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><h1 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h1><hr><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>namespace中的包名要和 Dao/mapper 接口的包名一致！</p><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><pre class=" language-XML"><code class="language-XML"><insert id="addUser" parameterType="com.kuang.pojo.User">    insert into mybatis.user (id, name, pwd) values (#{id},#{name},#{pwd});</insert></code></pre><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><pre class=" language-XML"><code class="language-XML"><update id="updateUser" parameterType="com.kuang.pojo.User">    update mybatis.user set name=#{name},pwd=#{pwd}  where id = #{id} ;</update></code></pre><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><pre class=" language-XML"><code class="language-XML"><delete id="deleteUser" parameterType="int">    delete from mybatis.user where id = #{id};</delete></code></pre><h2 id="万能Map"><a href="#万能Map" class="headerlink" title="万能Map"></a>万能Map</h2><p>当实体类或数据库中的表和字段过多的时候，可以考虑使用<code>Map</code>进行传参</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">insertUserAll</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUserAll<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    INSERT INTO mybatis.user (id, name, pwd) values(#{userId},#{userName},#{passWord})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUserAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>       SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">,</span> <span class="token string">"233333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       mapper<span class="token punctuation">.</span><span class="token function">insertUserAll</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>       sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h1 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h1><hr><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><p>mybatis-config.xml</p><p>在配置文件中会有可以影响MyBatis行为的设置和属性信息</p><pre class=" language-xml"><code class="language-xml">configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）</code></pre><h2 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h2><p><code>&lt;environments default=&quot;development&quot;&gt;</code>该参数定义了环境配置，并且在同一项目里面只能由一个环境配置，可以切换直接在default里面进行修改</p><h3 id="事务管理器（transactionManager）"><a href="#事务管理器（transactionManager）" class="headerlink" title="事务管理器（transactionManager）"></a>事务管理器（transactionManager）</h3><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><ul><li><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</p></li><li><p>MANAGED – <strong>这个配置几乎没做什么</strong>。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MANAGED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closeConnection<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="数据源（dataSource）"><a href="#数据源（dataSource）" class="headerlink" title="数据源（dataSource）"></a>数据源（dataSource）</h3><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p><ul><li>大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。</li></ul><p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）</p><blockquote><p>连接数据源：dbcp、c3p0、druid</p></blockquote><p>MyBatis默认的事务管理器就是<code>JDBC</code>，连接池一般使用<code>POOLED</code></p><h2 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h2><p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递</p><p><strong>在xml中所有的标签都是排好了顺序：properties–&gt;settings–&gt;typeAliases–&gt;typeHandlers–&gt;objectFactory–&gt;objectWrapperFactory–&gt;reflectorFactory–&gt;plugins–&gt;environments–&gt;databaseIdProvider–&gt;mappers</strong></p><p>编写配置文件</p><p>sql-config.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://34.92.176.69:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">user</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">liu1995</span></code></pre><p>在和你核心配置文件中引入</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入外部属性配置文件--></span><span class="token comment" spellcheck="true">&lt;!--    &lt;properties resource="sql-config.properties">--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sql-config.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>liu1995<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--首先读取在properties元素体内的属性--></span></code></pre><p>可以引入外部配置文件，并且可以适当增加属性配置</p><p><strong>如果有两个文件都有同一个字段，优先使用外部配置文件的属性</strong></p><h2 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--类型别名（typeAliases）--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ll.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>也可以指定一个包名，MyBatis会在包名下面收缩需要的JavaBean：</p><p>扫描实体类的包，默认的别名就为这个类的类名，首字母小写</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ll.entity<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>可以指定一个类的别名：</p><p>那么这个类扫描到就不是这个类的类名而是应该使用的是新定义的别名</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    ……<span class="token punctuation">}</span></code></pre><h2 id="设置（Settings）"><a href="#设置（Settings）" class="headerlink" title="设置（Settings）"></a>设置（Settings）</h2><table><thead><tr><th align="center">设置名</th><th>描述</th><th align="left">有效值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="center">mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn</td><td align="left">true  |  false</td><td align="left">False</td></tr><tr><td align="center">useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）</td><td align="left">true  |  false</td><td align="left">False</td></tr><tr><td align="center">logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td align="left">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td align="left">未设置</td></tr></tbody></table><h2 id="映射器（Mappers）"><a href="#映射器（Mappers）" class="headerlink" title="映射器（Mappers）"></a>映射器（Mappers）</h2><p>MapperRegistry：注册绑定我们的Mapper文件；</p><p>方式一： 【推荐使用】</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/ll/mapper/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>方式二：使用class文件绑定注册</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ll.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>方式三：使用扫描包进行注入绑定</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ll.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><h2 id="其余配置"><a href="#其余配置" class="headerlink" title="其余配置"></a>其余配置</h2><ul><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）<ul><li>MyBatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h2 id="生命周期和作用域（Scope）"><a href="#生命周期和作用域（Scope）" class="headerlink" title="生命周期和作用域（Scope）"></a>生命周期和作用域（Scope）</h2><p><strong>生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题</strong></p><p>mybatis-config.xml生成SqlSessionFactoryBuilder，构建SqlSessionFatory，生成SqlSession到SQLMapper，也可指直接从SqlSession结束</p><p><strong>SqlSessionFactoryBuilder：</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>说白了就是可以想象为 ：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><h1 id="属性名和字段名不一致的问题解决"><a href="#属性名和字段名不一致的问题解决" class="headerlink" title="属性名和字段名不一致的问题解决"></a>属性名和字段名不一致的问题解决</h1><hr><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>修改SQL，另取别名</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p><strong>ResultMap</strong></p><p>结果集映射：通过Map方式`` 元素是 MyBatis 中最重要最强大的元素</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select id, username, hashedPassword  from some_table  where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--结果集映射--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--column数据库中的字段，property实体类中的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>MyBatis 创建时的一个思想是：数据库不可能永远是你所想或所需的那个样子。 我们希望每个数据库都具备良好的第三范式或 BCNF 范式，可惜它们并不都是那样。 如果能有一种数据库映射模式，完美适配所有的应用程序，那就太好了，但可惜也没有。 而 ResultMap 就是 MyBatis 对这个问题的答案</p><p>上述语句只是简单地将所有的列映射到 <code>HashMap</code> 的键上，这由 <code>resultType</code> 属性指定</p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><p>数据库出现日常，出现了异常，需要排错，去看日志最好的解决方式</p><p>MyBatis有内置的日志工厂</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li><strong>Log4j【需要掌握】</strong></li><li>JDK logging</li><li><strong>STDOUT_LOGGING【需要掌握】</strong></li><li>COMMONS_LOGGING</li><li>NO_LOGGING</li></ul><p>通过在 MyBatis 配置文件 mybatis-config.xml 里面添加一项 setting 来选择其它日志实现</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><pre class=" language-bash"><code class="language-bash">Checking to see <span class="token keyword">if</span> class com.ll.mapper.UserMapper matches criteria <span class="token punctuation">[</span>is assignable to Object<span class="token punctuation">]</span>Opening JDBC ConnectionCreated connection 282432134.Setting autocommit to <span class="token boolean">false</span> on JDBC Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@10d59286<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">></span>  Preparing: SELECT * FROM mybatis.user WHERE <span class="token function">id</span> <span class="token operator">=</span> ?<span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span> Parameters: 1<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token operator">=</span>    Columns: id, name, <span class="token function">pwd</span><span class="token operator">&lt;=</span><span class="token operator">=</span>        Row: 1, 狂神, 123456<span class="token operator">&lt;=</span><span class="token operator">=</span>      Total: 1User<span class="token punctuation">(</span>id<span class="token operator">=</span>1, name<span class="token operator">=</span>狂神, password<span class="token operator">=</span>123456<span class="token punctuation">)</span>Resetting autocommit to <span class="token boolean">true</span> on JDBC Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@10d59286<span class="token punctuation">]</span>Closing JDBC Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@10d59286<span class="token punctuation">]</span>Returned connection 282432134 to pool.Process finished with <span class="token keyword">exit</span> code 0</code></pre><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Apache <strong>Log4j</strong>是一个基于<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">Java</a>的日志记录工具。它是由Ceki Gülcü首创的，现在则是<a href="https://zh.wikipedia.org/wiki/Apache软件基金会" target="_blank" rel="noopener">Apache软件基金会</a>的一个项目。 log4j是几种<a href="https://zh.wikipedia.org/w/index.php?title=Java日志框架&action=edit&redlink=1" target="_blank" rel="noopener">Java日志框架</a>之一，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626" target="_blank" rel="noopener">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI" target="_blank" rel="noopener">GUI</a>组件，甚至是套接口服务器、<a href="https://baike.baidu.com/item/NT/3443842" target="_blank" rel="noopener">NT</a>的事件记录器、<a href="https://baike.baidu.com/item/UNIX" target="_blank" rel="noopener">UNIX</a> <a href="https://baike.baidu.com/item/Syslog" target="_blank" rel="noopener">Syslog</a><a href="https://baike.baidu.com/item/守护进程/966835" target="_blank" rel="noopener">守护进程</a>等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#生产环境使用info</span><span class="token comment" spellcheck="true">#log4j.rootLogger = info,stdout,logfile</span><span class="token comment" spellcheck="true">#开发环境使用debug</span><span class="token comment" spellcheck="true">#日志输出到的位置</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment" spellcheck="true">#ConsoleAppender    控制台输出</span><span class="token comment" spellcheck="true">#FIleAppender       文件日志输出</span><span class="token comment" spellcheck="true">#SMTPAppender       发送邮件输出日志</span><span class="token comment" spellcheck="true">#SocketAppender     Socket日志</span><span class="token comment" spellcheck="true">#NTEventLogAppender Windows NT 日志</span><span class="token comment" spellcheck="true">#控制台输出的相关设置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token comment" spellcheck="true">#使用输出语句方式</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token comment" spellcheck="true">#输出日志的格式</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%c]-%m%n</span><span class="token comment" spellcheck="true">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token comment" spellcheck="true">#输出文件的地址</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/ll.log</span><span class="token comment" spellcheck="true">#输出文件的大小</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p][%d{yy-MM-dd}][%c]%m%n</span><span class="token comment" spellcheck="true">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span></code></pre><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>在需要使用日志的类中创建</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserDaoTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>日志的级别</p><pre class=" language-java"><code class="language-java">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info进入了Log4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug进入了Log4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error进入了Log4j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><hr><p>介于资源优化查询，节省资源，减少数据的处理量</p><h2 id="使用Limit实现分页"><a href="#使用Limit实现分页" class="headerlink" title="使用Limit实现分页"></a>使用<strong>Limit</strong>实现分页</h2><p>接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分页</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserLimit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Mapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT *    FROM mybatis.user    LIMIT #{startIndex},#{pageSize}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userLimit <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLimit</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> userLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="RowBounds实现分页"><a href="#RowBounds实现分页" class="headerlink" title="RowBounds实现分页"></a><strong>RowBounds</strong>实现分页</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// RowBounds分页</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT *    FROM mybatis.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><h4 id="MyBatisPageHelper"><a href="#MyBatisPageHelper" class="headerlink" title="MyBatisPageHelper"></a>MyBatisPageHelper</h4><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><hr><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><p>之前都学过面向对象编程，也使用过接口；在开发中一般都是面向接口编程，<strong>主要原因：==解耦==、可拓展性强、复用性高、分层开发，上面不用管下面的具体实现，都会遵守最初指定的规则，是开发更加容易，规范性更好</strong></p><h2 id="关于接口的理解"><a href="#关于接口的理解" class="headerlink" title="关于接口的理解"></a>关于接口的理解</h2><ul><li>接口从更深层次的理解，应该是定义（规范，约束）与实现（名实分离的原则）的分离</li><li>接口的本身反映了系统设计人员对于系统的抽象理解</li></ul><p>接口的分类：</p><ol><li>对一个个体的抽象，可对应为一个抽象体（abstract class）</li><li>对一个个体某一方面的抽象，也即是形成一个抽象面（interface）</li></ol><p>一个个体可能有多个抽象面，抽象体与抽象面是有区别的</p><h2 id="三个面向的区别"><a href="#三个面向的区别" class="headerlink" title="三个面向的区别"></a>三个面向的区别</h2><ul><li>面向对象指的是我们考虑问题的时候，是以对象为单位，考虑它的属性以及方法</li><li>面向过程指的是我们考虑问题的时候，是以一个具体的流程为单位，考虑实现</li><li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题，更多体现的是对系统整体的架构</li></ul><h1 id="CURD-1"><a href="#CURD-1" class="headerlink" title="CURD"></a>CURD</h1><hr><h2 id="自动提交事务"><a href="#自动提交事务" class="headerlink" title="自动提交事务"></a>自动提交事务</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// for (User user : users) {</span>    <span class="token comment" spellcheck="true">//     System.out.println(user);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// users.forEach(user -> System.out.println(user));</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// User userById = mapper.getUserById(1);</span>    <span class="token comment" spellcheck="true">// System.out.println("userById = " + userById);</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user( id, name, pwd ) VALUES ( #{id}, #{name}, #{password})"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"刘钦华"</span><span class="token punctuation">,</span> <span class="token string">"12341231123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE user SET name = #{name}, pwd = #{password} WHERE id = #{id}"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"to"</span><span class="token punctuation">,</span><span class="token string">"43534346643"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM user WHERE id = #{uid}"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="多对一处理"><a href="#多对一处理" class="headerlink" title="多对一处理"></a>多对一处理</h1><p>服务端对多个客户端</p><ul><li>对于服务端而言类似于一个<strong>集合</strong>，集合内包含各种多个客户端</li><li>对于客户端而言就是<strong>关联</strong></li></ul><h2 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    思路:        1. 查询所有的学生信息        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from teacher where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid,s.name sname,t.name tname    from student s,teacher t    where s.tid = t.id;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h1 id="一对多处理"><a href="#一对多处理" class="headerlink" title="一对多处理"></a>一对多处理</h1><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按结果嵌套查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id as sid, s.name as sname, t.name as tname, t.id as tid    from student s,    teacher t    where s.tid = t.id    and t.id = #{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection    javaType="" 指定属性的类型！    集合中的泛型信息，我们使用ofType获取    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--===============================================================--></span><span class="token comment" spellcheck="true">&lt;!-- 按照查询嵌套处理--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *        from mybatis.teacher        where id = #{tid}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *        from mybatis.student        where tid = #{tid}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ol><li>关联 - association   【多对一】</li><li>集合 - collection   【一对多】</li><li>javaType    &amp;   ofType<ol><li>JavaType  用来指定实体类中属性的类型</li><li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li></ol></li></ol><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>就是使用根据不同的环境、使用条件的不同生成不同的SQL语句</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客作者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览量'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><h2 id="IF条件"><a href="#IF条件" class="headerlink" title="IF条件"></a>IF条件</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT *    FROM mybatis.blog    WHERE 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        AND title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        AND author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="Choose语句（when，otherwise）"><a href="#Choose语句（when，otherwise）" class="headerlink" title="Choose语句（when，otherwise）"></a>Choose语句（when，otherwise）</h2><p>相当于Java中的switch语句，只要满足第一个后面的就全部不管了</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT *    FROM mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title = #{title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>author = #{title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>AND views = #{views}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="trim（where，set）"><a href="#trim（where，set）" class="headerlink" title="trim（where，set）"></a>trim（where，set）</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span></code></pre><p>用于动态更新语句的类似解决方案叫做 <em>set</em>。<em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateAuthorIfNecessary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  update Author    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>username=#{username},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>password=#{password},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>email=#{email},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bio !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bio=#{bio}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SET<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span></code></pre><p><strong>动态SQL最后还是SQL语句，知识在SQL层面去编写执行一个逻辑代码</strong></p><pre class=" language-xml"><code class="language-xml">动态SQL和JSTL或类似XML的文本处理器相似，MyBatis采用的功能强大都是基于OGNL的表达式来淘汰其余大部分你的元素ifchoose(when,otherwise)teim(where,set)foreach</code></pre><h2 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h2><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。比如</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectPostIn<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT *  FROM POST P  WHERE ID in  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>      <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{item}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符</p><ul><li>你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 <em>foreach</em>。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</li></ul><h2 id="sql（include）"><a href="#sql（include）" class="headerlink" title="sql（include）"></a>sql（include）</h2><p>在有时候可以提取出共同SQL语句，</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><p>之后在需要这些SQL语句的地方使用include标签引入即可</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT *    FROM mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li>最好是基于单表来定义SQL片段</li><li>最好不要存在where标签</li></ul><p><strong>==动态SQL就是拼接SQL语句，重要的是我们要保证SQL的正确性，按照SQL的格式去排列组合就可以了==</strong></p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><ul><li>所谓的缓存就是存储在内存中的临时数据</li><li>如果是重复查询的数据重复执行饿话肯定是会慢，所以可以考虑将这些经常查询的数据放在缓存中，用户查询的时候就不用从磁盘上进行查询，而是从缓存中查询，这样可以大大提高缓存的效率，从而解决高并发系统的性能问题</li></ul><p>为什么减少缓存？</p><ul><li>为了减少和数据库的交互次数，减少系统的资源的开销，提高系统的效率</li></ul><p>什么样的数据能经常使用缓存？</p><ul><li>经常查询并且不经常改变的数据</li></ul><h2 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h2><p>MyBatis包含一个非常强大查询缓存特性，可以非常方便的定制和缓存配置。缓存可以极大的提升查询的效率</p><p>MyBatis有两种缓存类型：<strong>一级缓存</strong>，<strong>二级缓存</strong></p><ul><li>默认情况下一级缓存自动开启，也即<code>SqlSesson</code>级别的缓存，当这个线程结束了，这个缓存也就没了</li><li>然而二级缓存是要手动开启的，是介于<code>namespace</code>级别的缓存，可以铜鼓Cache标签进行定义二级缓存</li></ul><p>可以看到在Chche类里面是存取一个值，获取一个值，关闭这个值，之后清除，获取值的个数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment" spellcheck="true">// (powered by Fernflower decompiler)</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>cache<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReadWriteLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>    String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> Object var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object <span class="token function">getObject</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object <span class="token function">removeObject</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> ReadWriteLock <span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>而在这里可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><p>默认的清除策略是 LRU。默认就是无限往里面存取，这样缓存会<strong>炸</strong></p><p>测试步骤：</p><p>开启日志</p><pre class=" language-java"><code class="language-java">PooledDataSource forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>PooledDataSource forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>Opening JDBC ConnectionCreated connection <span class="token number">1629911510</span><span class="token punctuation">.</span><span class="token operator">==</span><span class="token operator">></span>  Preparing<span class="token operator">:</span> SELECT <span class="token operator">*</span> FROM mybatis<span class="token punctuation">.</span>user WHERE id <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span> Parameters<span class="token operator">:</span> <span class="token function">1</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token operator">=</span>    Columns<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> pwd<span class="token operator">&lt;=</span><span class="token operator">=</span>        Row<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 刘钦华<span class="token punctuation">,</span> <span class="token number">775204521</span><span class="token operator">&lt;=</span><span class="token operator">=</span>      Total<span class="token operator">:</span> <span class="token number">1</span><span class="token function">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>刘钦华<span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token number">775204521</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token function">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>刘钦华<span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token number">775204521</span><span class="token punctuation">)</span><span class="token boolean">true</span>Closing JDBC Connection <span class="token punctuation">[</span>org<span class="token punctuation">.</span>mariadb<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>MariaDbConnection<span class="token annotation punctuation">@612679d6</span><span class="token punctuation">]</span>Returned connection <span class="token number">1629911510</span> to pool<span class="token punctuation">.</span>Process finished with exit code <span class="token number">0</span></code></pre><p>从这个日志可以看到说是都是在同一个SqlSession里面完成的，也即是说查了第一次之后相同的数据就不查第二次了，从缓存中取出之后关闭线程</p><p>但是从两个不同的数据可以看出执行了两次的SQL语句</p><pre class=" language-java"><code class="language-java">PooledDataSource forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>Opening JDBC ConnectionCreated connection <span class="token number">1629911510</span><span class="token punctuation">.</span><span class="token operator">==</span><span class="token operator">></span>  Preparing<span class="token operator">:</span> SELECT <span class="token operator">*</span> FROM mybatis<span class="token punctuation">.</span>user WHERE id <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span> Parameters<span class="token operator">:</span> <span class="token function">1</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token operator">=</span>    Columns<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> pwd<span class="token operator">&lt;=</span><span class="token operator">=</span>        Row<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 刘钦华<span class="token punctuation">,</span> <span class="token number">775204521</span><span class="token operator">&lt;=</span><span class="token operator">=</span>      Total<span class="token operator">:</span> <span class="token number">1</span><span class="token function">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>刘钦华<span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token number">775204521</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">==</span><span class="token operator">></span>  Preparing<span class="token operator">:</span> SELECT <span class="token operator">*</span> FROM mybatis<span class="token punctuation">.</span>user WHERE id <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span> Parameters<span class="token operator">:</span> <span class="token function">2</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token operator">=</span>    Columns<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> pwd<span class="token operator">&lt;=</span><span class="token operator">=</span>        Row<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> 张三<span class="token punctuation">,</span> <span class="token number">12213123</span><span class="token operator">&lt;=</span><span class="token operator">=</span>      Total<span class="token operator">:</span> <span class="token number">1</span><span class="token function">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span>张三<span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token number">12213123</span><span class="token punctuation">)</span><span class="token boolean">false</span>Closing JDBC Connection <span class="token punctuation">[</span>org<span class="token punctuation">.</span>mariadb<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>MariaDbConnection<span class="token annotation punctuation">@612679d6</span><span class="token punctuation">]</span>Returned connection <span class="token number">1629911510</span> to pool<span class="token punctuation">.</span>Process finished with exit code <span class="token number">0</span></code></pre><p>从官方文档可以看出</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/Java/MyBatis/Mybatis%E7%9A%84%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D.png" alt="Mybatis的缓存介绍"></p><p>在查询后面增加了修改的时候会刷新缓存，在同一个<code>SqlSession</code>里面会进行两次查询，哪怕是结果相同，并且是不同地址，从后面的false可以看出</p><p>得出增删改操作</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ddddddd"</span><span class="token punctuation">,</span> <span class="token string">"ssssss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>PooledDataSource forcefully closed<span class="token operator">/</span>removed all connections<span class="token punctuation">.</span>Opening JDBC ConnectionCreated connection <span class="token number">1629911510</span><span class="token punctuation">.</span><span class="token operator">==</span><span class="token operator">></span>  Preparing<span class="token operator">:</span> SELECT <span class="token operator">*</span> FROM mybatis<span class="token punctuation">.</span>user WHERE id <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span> Parameters<span class="token operator">:</span> <span class="token function">1</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token operator">=</span>    Columns<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> pwd<span class="token operator">&lt;=</span><span class="token operator">=</span>        Row<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 刘钦华<span class="token punctuation">,</span> <span class="token number">775204521</span><span class="token operator">&lt;=</span><span class="token operator">=</span>      Total<span class="token operator">:</span> <span class="token number">1</span><span class="token function">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>刘钦华<span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token number">775204521</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span>  Preparing<span class="token operator">:</span> UPDATE mybatis<span class="token punctuation">.</span>user SET name <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">,</span> pwd <span class="token operator">=</span><span class="token operator">?</span> WHERE id <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span> Parameters<span class="token operator">:</span> <span class="token function">ddddddd</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ssssss</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">2</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token operator">=</span>    Updates<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">==</span><span class="token operator">></span>  Preparing<span class="token operator">:</span> SELECT <span class="token operator">*</span> FROM mybatis<span class="token punctuation">.</span>user WHERE id <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span> Parameters<span class="token operator">:</span> <span class="token function">1</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token operator">=</span>    Columns<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> pwd<span class="token operator">&lt;=</span><span class="token operator">=</span>        Row<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 刘钦华<span class="token punctuation">,</span> <span class="token number">775204521</span><span class="token operator">&lt;=</span><span class="token operator">=</span>      Total<span class="token operator">:</span> <span class="token number">1</span><span class="token function">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>刘钦华<span class="token punctuation">,</span> pwd<span class="token operator">=</span><span class="token number">775204521</span><span class="token punctuation">)</span><span class="token boolean">false</span>Closing JDBC Connection <span class="token punctuation">[</span>org<span class="token punctuation">.</span>mariadb<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>MariaDbConnection<span class="token annotation punctuation">@612679d6</span><span class="token punctuation">]</span>Returned connection <span class="token number">1629911510</span> to pool<span class="token punctuation">.</span></code></pre><p>官网中提到：二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>       <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。--></span></code></pre><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><ul><li>二级缓存也叫全局缓存，因为一级缓存的作用域太低了，所以产生了二级缓存</li><li>一个名称空间<code>namespace</code>对应一个二级缓存</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据会被放在当前会话的一级缓存中</li><li>如果是当前会话关闭了，这个会话对应的一级缓存就会刷星，而开启二级缓存的话就会说是当前会话关闭了，一级缓存的数据就会保存到二级缓存中</li><li>这样新的会话查询信息就可以从二级缓存中获取内容</li><li>不同的<code>mapper</code>查出的数据会放在自己对应的缓存（map）中</li></ul></li></ul><h3 id="开启二级缓存步骤"><a href="#开启二级缓存步骤" class="headerlink" title="开启二级缓存步骤"></a>开启二级缓存步骤</h3><ol><li>在配置文件中开启全局缓存</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--标准的日志工厂实现--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--显示开启全局缓存--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>在要使用的二级缓存的Mapper中开启</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前的Mapper中开启二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>       <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mapper.updateUser(new User(2, "ddddddd", "ssssss"));</span>    <span class="token comment" spellcheck="true">// 手动清理缓存</span>    sqlSession<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession1 <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSession sqlSession2 <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper1 <span class="token operator">=</span> sqlSession1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserMapper mapper2 <span class="token operator">=</span> sqlSession2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user1 <span class="token operator">=</span> mapper1<span class="token punctuation">.</span><span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h2><p>当我们查数据的时候第一次查数据库，第二次查询从一级缓存中进行查询，如果一级缓存中没有的话，从二级缓存查；</p><p>当一个SqlSession进行关闭的时候一级缓存随之销毁，放到了二级缓存中，而我们用户操作的是在Mapper，也就是二级缓存的所在</p><p>缓存的顺序是，先看二级缓存中有没有，再看一级缓存中，最后查询数据库</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/Java/MyBatis/MyBatis%E7%BC%93%E5%AD%98%E9%A1%BA%E5%BA%8F.png" alt="image-20200712224904890"></p><h2 id="自定义缓存——Ehcache"><a href="#自定义缓存——Ehcache" class="headerlink" title="自定义缓存——Ehcache"></a>自定义缓存——Ehcache</h2><p>Ehcache是一种广泛使用的开源Java分布式缓存，主要面向通用缓存</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：       user.home – 用户主目录       user.dir  – 用户当前工作目录       java.io.tmpdir – 默认临时文件路径     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./tmpdir/Tmp_EhCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>259200<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cloud_user<span class="token punctuation">"</span></span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。     --></span>    <span class="token comment" spellcheck="true">&lt;!--      name:缓存名称。      maxElementsInMemory:缓存最大数目      maxElementsOnDisk：硬盘最大缓存个数。      eternal:对象是否永久有效，一但设置了，timeout将不起作用。      overflowToDisk:是否保存到磁盘，当系统当机时      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。      clearOnFlush：内存数量最大时是否清除。      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。      FIFO，first in first out，这个是大家最熟的，先进先出。      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wi-Fi</title>
      <link href="2020/06/19/zi-xue/za-tan/wi-fi/"/>
      <url>2020/06/19/zi-xue/za-tan/wi-fi/</url>
      
        <content type="html"><![CDATA[<h1 id="Wi-Fi浅谈"><a href="#Wi-Fi浅谈" class="headerlink" title="Wi-Fi浅谈"></a>Wi-Fi浅谈</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WiFi全称为「<code>Wireless Fidelity</code>」无线保真；其实借用的是音响领域的高保真，也就是「<code>High Fidelity</code>」简称<code>HiFi</code>大家都知道，然后科幻这个词的英文出现也比较早，十八世纪的作者<code>Mary Shelly</code>（玛丽·雪莱）写了「科学怪人Frankenstein」就发明了Science Fiction这个词，简称就是「<code>SciFi</code>」然后编制无线技术的组织就借用这种深度人心的最佳方式取了<code>WiF</code>i这个名字，可能就是为了好记吧。</p><p>我们熟知的2.4GHz频段的电磁波，也就是WiFi用到的频段，其实不仅仅只是2.4GHz这一个数值特定的频率，而是一个范围，比如说2.4GHz指的就是2.4〜2.4835GHz之间的频段，同样的，5GHz指的也是5.15GHz〜5.85GHz</p><p>1GHz实际上指的是10亿赫兹，那么2.4〜2.4835之间有8000万赫兹的频率的差异，这个范围是为了完成多个网络，多个设备之间的不产生干扰，虽然都是再同一个大的频段之间但是却是工作在不同的信道上，同时根据WiFi的标准不同，，每个信道的频宽规定在1MHz~160MHz之间</p><p>主流的WiFi标准从1999年最开始的第一代802.11b到现在最新的第六代802.11ax，其中主要的无线电调制的技术手段有三种，<code>DSSS ``FHSS</code>和<code>OFDM</code>，其中<code>FHSS</code>也叫跳频技术，背景是当时二战的时候海蒂拉玛尝试用跳频的技术规避德国的军舰截获无线电波，干扰盟军的鱼雷通讯，因为数据传输是在不同的信道，根据预设的跳频模型，在不同的平均值之间跳跃的这种发送电波，而没有预设的跳频模型的德军，无法完全截获和干扰无线通讯。恰好WiFi用到了这项技术而已，所以WiFi不是海蒂拉玛发明的；其实不管是什么调制方式<code>DSSS ``FHSS</code>和<code>OFDM</code>都是通过合理的方式把数字信号调制成电磁波通过天线发射出去，接收端接收到之后再把数据解开而已，就像成品香水售卖给顾客，顾客通过技术手段还原香水合成的成分，这就是无线电波通讯的原理，把调制好的电磁波解码出来还原成数据信号，这个过程就利用到了传说中的傅立叶变换和逆变，因为无线电频宽是个有限的资源，能通过占用尽量小的资源发送数据，就不要采用占用更多频宽的资源的方式来发送，DSSS技术占用的频宽较大，虽然说可靠性和稳定性都是优点</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wi-Fi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础篇章</title>
      <link href="2020/06/15/hou-duan/java/ji-chu/ji-chu/"/>
      <url>2020/06/15/hou-duan/java/ji-chu/ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><h4 id="面向对象与面向过程"><a href="#面向对象与面向过程" class="headerlink" title="面向对象与面向过程"></a>面向对象与面向过程</h4><h5 id="什么是面向过程？"><a href="#什么是面向过程？" class="headerlink" title="什么是面向过程？"></a>什么是面向过程？</h5><p><strong>概述：自顶向下的编程模式</strong></p><p>把问题分成一个个步骤，使用函数实现，依次调用即可，也就是说在进行面向过程编程的时候，不需要考虑那么多，上来先定义一个函数，然后使用各种诸如if-else、for-each等方式进行代码执行。</p><p>最典型的用法就是实现一个简单的算法，比如实现冒泡排序。</p><h5 id="什么是面向对象？"><a href="#什么是面向对象？" class="headerlink" title="什么是面向对象？"></a>什么是面向对象？</h5><p><strong>概述: 将事务高度抽象化的编程模式</strong></p><p>将问题分解成一个一个步骤，对每个步骤进行相应的抽象，形成对象，通过不同对象之间的调用，组合解决问题。</p><p>就是说，在进行面向对象进行编程的时候，要把属性、行为等封装成对象，然后基于这些对象及对象的能力进行业务逻辑的实现。</p><p>比如:想要造一辆车，上来要先把车的各种属性定义出来，然后抽象成一个Car类。</p><h5 id="举例说明区别"><a href="#举例说明区别" class="headerlink" title="举例说明区别"></a>举例说明区别</h5><p>同样一个象棋设计.</p><p>面向对象:创建黑白双方的对象负责演算,棋盘的对象负责画布,规则的对象负责判断，例子可以看出,面向对象更重视不重复造轮子,即创建一次,重复使用.</p><p>面向过程:开始—黑走—棋盘—判断—白走—棋盘—判断—循环。只需要关注每一步怎么实现即可.</p><h5 id="优劣对比"><a href="#优劣对比" class="headerlink" title="优劣对比"></a>优劣对比</h5><p>面向对象:占用资源相对高,速度相对慢</p><p>面向过程:占用资源相对低,速度相对快</p><h4 id="面向对象的三大基本特征"><a href="#面向对象的三大基本特征" class="headerlink" title="面向对象的三大基本特征"></a>面向对象的三大基本特征</h4><h5 id="封装（Encapsulation）"><a href="#封装（Encapsulation）" class="headerlink" title="封装（Encapsulation）"></a>封装（Encapsulation）</h5><p>所谓封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。封装是面向对象的特征之一，是对象和类概念的主要特性。简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。</p><h5 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h5><p>继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；</p><h5 id="多态（Polymorphism）"><a href="#多态（Polymorphism）" class="headerlink" title="多态（Polymorphism）"></a>多态（Polymorphism）</h5><p>所谓多态就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</p><p>最常见的多态就是将子类传入父类参数中，运行时调用父类方法时通过传入的子类决定具体的内部结构或行为。</p><h4 id="面向对象的五大原则"><a href="#面向对象的五大原则" class="headerlink" title="面向对象的五大原则"></a>面向对象的五大原则</h4><h5 id="单一原则（-Single-Responsibility-Principle）"><a href="#单一原则（-Single-Responsibility-Principle）" class="headerlink" title="单一原则（[Single-Responsibility Principle）"></a>单一原则（[Single-Responsibility Principle）</h5><p>低耦合、高内聚再面向对象上的引申，将职责定义为引起变化的原因，用以提高内聚性来减少引起变化的原因。</p><h5 id="开放封闭原则（Open-Closed-principle）"><a href="#开放封闭原则（Open-Closed-principle）" class="headerlink" title="开放封闭原则（Open-Closed principle）"></a>开放封闭原则（Open-Closed principle）</h5><h5 id="Liskov替换原则（Liskov-Substitution-Principle）"><a href="#Liskov替换原则（Liskov-Substitution-Principle）" class="headerlink" title="Liskov替换原则（Liskov-Substitution Principle）"></a>Liskov替换原则（Liskov-Substitution Principle）</h5><h5 id="依赖倒置原则（Dependecy-Inversion-Principle）"><a href="#依赖倒置原则（Dependecy-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependecy-Inversion Principle）"></a>依赖倒置原则（Dependecy-Inversion Principle）</h5><h5 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface-Segregation Principle）"></a>接口隔离原则（Interface-Segregation Principle）</h5>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="2020/06/15/shu-ju-ku/mysql/"/>
      <url>2020/06/15/shu-ju-ku/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="MySQL介绍"><a href="#MySQL介绍" class="headerlink" title="MySQL介绍"></a>MySQL介绍</h2><ul><li><p>使用最多的数据库</p></li><li><p>JavaEE：企业级的Java开发，做web</p><ul><li>前端：页面：展示数据使用美观</li><li>后端：连接数据库JDBC/C3PO，连接前端——控制，控制视图的跳转，给前端传递数据</li><li>数据库：存数据（Txt，Excel，Word）</li></ul></li><li><p>DDL：数据库定义语言</p></li><li><p>DML：数据库操作语言</p></li><li><p>DQL：数据库查询语言</p></li><li><p>DCL：数据库控制语言</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发浅析（一）简介</title>
      <link href="2020/05/21/hou-duan/java/gao-jie/juc/juc-bing-fa-qian-xi-yi-jian-jie/"/>
      <url>2020/05/21/hou-duan/java/gao-jie/juc/juc-bing-fa-qian-xi-yi-jian-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端/Java/高阶/JUC/JUC并发浅析（九）读写锁</title>
      <link href="2020/05/21/hou-duan/java/gao-jie/juc/juc-bing-fa-qian-xi-jiu-du-xie-suo/"/>
      <url>2020/05/21/hou-duan/java/gao-jie/juc/juc-bing-fa-qian-xi-jiu-du-xie-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>A <code>ReadWriteLock</code>维护一对关联的<code>locks</code>  ，一个用于只读操作，一个用于写入。<a href="../../../../java/util/concurrent/locks/ReadWriteLock.html#readLock--"><code>read  lock</code></a>可以由多个阅读器线程同时进行，只要没有作者。<code>write  lock</code>是独家的。</p><p>所有<code>ReadWriteLock</code>实现必须保证的存储器同步效应<code>writeLock</code>操作（如在指定<a href="../../../../java/util/concurrent/locks/Lock.html"><code>Lock</code></a>接口）也保持相对于所述相关联的<code>readLock</code></p><p>也就是说是读的时候可以被多线程同时读取，但是写入的时候只能有一个线程去执行写的操作</p><p>通过下面代码即可创建读写锁<code>ReentrantReadWriteLock</code>的构造方法中如果不传参数，<code>默认创建的是非公平的读写锁</code>。在读写锁中，仍然是<code>非公平的读写锁性能要由于公平的读写锁</code>。</p><pre class=" language-java"><code class="language-java">ReadWriteLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建读锁</span>Lock readLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建写锁</span>Lock writeLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 也可以：</span><span class="token keyword">private</span> ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存，写锁</span>readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取，读锁</span>readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="写锁加锁"><a href="#写锁加锁" class="headerlink" title="写锁加锁"></a>写锁加锁</h3><p>当调用写锁的<code>lock()</code>方法时，线程会尝试获取写锁，即<code>writeLock.lock()</code>。由于写锁是排他锁，所以写锁的获取过程几乎与ReentrantLock获取锁的逻辑一样。当调用<code>lock()</code>方法时，会先调用到AQS的<code>acquire()</code>方法，在<code>acquire()</code>方法中会先调用子类的<code>tryAcquire()</code>方法，因此这里调用的是<code>ReentrantReadWriteLock</code>的内部类<code>Sync</code>的<code>tryAcquire()</code>方法。该方法的源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * Walkthrough:     * 1. If read count nonzero or write count nonzero     *    and owner is a different thread, fail.     * 2. If count would saturate, fail. (This can only     *    happen if count is already nonzero.)     * 3. Otherwise, this thread is eligible for lock if     *    it is either a reentrant acquire or     *    queue policy allows it. If so, update state     *    and set owner.     */</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// (Note: if c != 0 and w == 0 then shared count != 0)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">></span> MAX_COUNT<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Reentrant acquire</span>        <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert firstReaderHoldCount > 0;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            firstReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Releasing the read lock has no effect on readers,</span>            <span class="token comment" spellcheck="true">// but it may allow waiting writers to proceed if</span>            <span class="token comment" spellcheck="true">// both read and write locks are now free.</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在tryAcquire()方法中，先通过<code>exclusiveCount()</code>方法来计算写锁的数量，怎么计算的呢？就是将state和<code>0x0000FFFF</code>进行<code>与运算</code>。</p><p>然后判断state是否等于0，如果等于0，就表示读锁和写锁都没有被获取，当前线程就调用<code>writerShouldBlock()</code>方法判断线程是否需要等待，如果需要等待，tryAcquire()方法就返回false，表示获取锁失败，那么就会回到AQS的acquire()方法中，后面的逻辑与排他锁的逻辑一样。如果不需要等待，就尝试去修改state的值，如果修改成功，就表示获取锁成功，否则失败。</p><p>如果state不等于0，那么就表示存在读锁或者写锁，那么究竟是读锁还是写锁呢？就需要根据w的值进行判断了。</p><p>如果w为0，说明写锁的数量为0，而此时又因为c不等于0，说明锁被占用，但是不是写锁，那么此时锁的状态一定是读锁，既然是读锁状态，那么写锁此时来获取锁时，就肯定失败，因为读锁存在时，是不能去获取写锁的。因此当w等于0时，tryAcquire()方法返回false。</p><p>如果w不为0，说明此时锁的状态是写锁，接着进行<code>current != getExclusiveOwnerThread()</code>判断，判断持有锁的线程是否是当前线程。如果不是当前线程，那么tryAcquire()返回false；如果是当前线程，那么就进行后面的逻辑。为什么是当前线程持有锁，就能执行后面的逻辑呢？ 因为读写锁是支持重入的。</p><p>如果是当前线程获取的写锁，接着就判断，再次对写锁进行重入时，会不会超出写锁的最大重入次数，如果是，就抛出异常。（因为state的低16位表示写锁，所以写锁最大可被重入的次数是<img src="https://juejin.im/equation?tex=2%5E%7B16%7D" alt="2^{16}">-1）。</p><h3 id="写锁释放"><a href="#写锁释放" class="headerlink" title="写锁释放"></a>写锁释放</h3><p>写锁的释放与排他锁的释放逻辑也几乎一样。当调用writeLock.unlock()时，先调用到AQS的release()方法，在release()方法中会先调用子类的tryRelease()方法。在这里调用的是ReentrantReadWriteLock的内部类Sync的tryRelease()方法。写锁的释放逻辑比较简单，可以参考下面源码中的注释。方法的源码和注释如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否是当前线程持有锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将state的值减去releases</span>    <span class="token keyword">int</span> nextc <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用exclusiveCount()方法，计算写锁的数量。如果写锁的数量为0，表示写锁被完全释放，此时将AQS的exclusiveOwnerThread属性置为null</span>    <span class="token comment" spellcheck="true">// 并返回free标识，表示写锁是否被完全释放</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>free<span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="读锁加锁"><a href="#读锁加锁" class="headerlink" title="读锁加锁"></a>读锁加锁</h3><p>读锁是共享锁，所以当调用readLock.lock()方法时，会先调用到AQS的acquiredShared()方法，在acquireShared()方法中会先调用子类的tryAcquireShared()方法。在这里会调用的是ReentrantReadWriteLock的内部类Sync的<code>tryAcquireShared()</code>方法。该方法的源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// exclusiveCount(c)返回的是写锁的数量，如果它不为0，说明写锁被占用，如果此时占用写锁的线程不是当前线程，就返回-1，表示获取锁失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// r表示的是读锁的数量</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在下面的代码中进行了三个判断：     * 1、读锁是否应该排队。如果没有人排队，就进行if后面的判断。有人排队，就不会进行if后面的判断，而是最终调用fullTryAcquireShared()方法     * 2、读锁数量是否超过最大值。（最大数量为2的16次方-1）     * 3、尝试修改同步变量的值     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span>        <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读锁数量为0时，就将当前线程设置为firstReader，firstReaderHoldCount=1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>            firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读锁数量不为0且firstReader(第一次获取读的线程)为当前线程，就将firstReaderHoldCount累加</span>            firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读锁数量不为0，且第一个获取到读锁的线程不是当前线程</span>            <span class="token comment" spellcheck="true">// 下面这一段逻辑就是保存当前线程获取读锁的次数，如何保存的呢？</span>            <span class="token comment" spellcheck="true">// 通过ThreadLocal来实现的，readHolds就是一个ThreadLocal的实例</span>            HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>            rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回1表示获取读锁成功</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当if中的三个判断均不满足时，就会执行到这儿，调用fullTryAcquireShared()方法尝试获取锁</span>    <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在tryAcquireShared()方法中，会先通过<code>exclusiveCount()</code>方法来计算写锁的数量，如果写锁存在，再判断持有写锁的线程是不是当前线程，如果不是当前线程，就表示写锁被其他线程给占用，此时当前线程不能获取读锁。tryAcquireShared()方法返回-1，表示获取读锁失败。如果写锁不存在或者持有写锁的线程是当前线程，那么就表示当前线程有机会获取到读锁。</p><p>接下里会判断当前线程获取读锁是否不需要排队，读锁数量是否会超过最大值，以及通过CAS修改读锁的状态是否成功（将state的值加 1&lt;&lt;16）。如果这三个条件成立，就进入if语句块中，这一块的代码比较繁琐，但是功能比较单一，就是统计读锁的数量以及当前线程对读锁的重入次数，底层原理就是<code>ThreadLocal</code>。因为在读写锁中提供了<code>getReadLockCount()、getReadHoldCount()</code>等方法，这几个方法的数据就来自这儿。</p><p>如果上面的三个条件有一个不成立，就不会进入if语句块，那么就会调用fullTryAcquireShared()方法。该方法的作用就是让线程不停的获取锁，其源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>Thread current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * This code is in part redundant with that in     * tryAcquireShared but is simpler overall by not     * complicating tryAcquireShared with interactions between     * retries and lazily reading hold counts.     */</span>    HoldCounter rh <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// for死循环，直到满足相应的条件才会return退出，否则一直循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 锁的状态为写锁时，持有锁的线程不等于当期那线程，就说明当前线程获取锁失败，返回-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// else we hold the exclusive lock; blocking here</span>            <span class="token comment" spellcheck="true">// would cause deadlock.</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Make sure we're not acquiring read lock reentrantly</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// assert firstReaderHoldCount > 0;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> MAX_COUNT<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尝试设置同步变量的值，只要设置成功了，就表示当前线程获取到了锁，然后就设置锁的获取次数等相关信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>                firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null<span class="token punctuation">)</span>                    rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                    rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>                rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                cachedHoldCounter <span class="token operator">=</span> rh<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cache for release</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当获取到读锁成功以后，tryAcquireShared()方法会返回1，这样当回到AQS的acquireShared()方法时，就会直接结束了。如果获取锁失败，tryAcquireShared()方法会返回-1，那么在AQS中，就会接着执行doAcquireShared()方法。doAcquireShared()方法的作用就是将自己加入到同步队列中，等待获取锁，直到获取锁成功。该方法不响应中断。</p><h3 id="读锁释放"><a href="#读锁释放" class="headerlink" title="读锁释放"></a>读锁释放</h3><p>当调用readLock.unlock()方法时，会先调用到AQS的releaseShared()方法，在releaseShared()方法中会先调用子类的tryReleaseShared()方法。在这里会调用的是ReentrantReadWriteLock的内部类Sync的<code>tryReleaseShared()</code>方法。该方法的源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert firstReaderHoldCount > 0;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            firstReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将修改同步变量的值（读锁状态减去1&lt;&lt;16）</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Releasing the read lock has no effect on readers,</span>            <span class="token comment" spellcheck="true">// but it may allow waiting writers to proceed if</span>            <span class="token comment" spellcheck="true">// both read and write locks are now free.</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在tryReleaseShared()方法中，会先修改和读锁计数有关的数据，然后在for的死循环中，通过CAS操作将state的值减去1&lt;&lt;16。如果CAS操作成功，才会从for循环中退出。当读锁数量为0时，tryReleaseShared()返回true，表示锁被完全释放。</p><p>当tryReleaseShared()方法返回后，接下来的步骤和共享锁的释放逻辑完全一样的。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>读写锁的使用十分简单，但是在读写锁的使用过程中，需要注意以下两点。</p><p><code>读写锁</code>不支持锁升级<code>，</code>支持锁降级`。锁升级指的是线程获取到了读锁，在没有释放读锁的前提下，又获取写锁。锁降级指的是线程获取到了写锁，在没有释放写锁的情况下，又获取读锁。为什么不支持锁升级呢？可以参考如下示例代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockUpgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ReadWriteLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建读锁</span>    Lock readLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建写锁</span>    Lock writeLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...处理业务逻辑</span>        writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 代码①</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的示例代码中，假如T1线程先获取到了读锁，然后执行后面的代码，在执行到代码①的上一行时，T2线程也去获取读锁，由于读锁是共享锁，且此时写锁还没有被获取，所以此时T2线程可以获取到读锁，当T1执行到代码①时，尝试去获取写锁，由于有T2线程占用了读锁，所以T1线程是无法获取到写锁的，只能等待，当T2也执行到代码①时，由于T1占有了读锁，导致T2无法获取到写锁，这样两个线程就一直等待，即获取不到写锁，也释放不掉读锁。因此锁是不支持锁升级的。</p><p>读写锁支持锁的降级，锁的降级是为了保证可见性。让T1线程对数据的修改对其他线程可见。</p><p>读锁不支持条件等待队列。当调用ReadLock类的newCondition()方法时，会直接抛出异常。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因为读锁是共享锁，最大获取次数为<img src="https://juejin.im/equation?tex=2%5E%7B16%7D" alt="2^{16}">-1），同一时刻可以被多个线程持有，对于读锁而言，其他线程没有必要等待获取读锁，Condition的等待唤醒毫无意义。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Yapi部署</title>
      <link href="2020/05/13/cheng-xu-she-ji/yapi-bu-shu/"/>
      <url>2020/05/13/cheng-xu-she-ji/yapi-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Yapi部署与配置"><a href="#Yapi部署与配置" class="headerlink" title="Yapi部署与配置"></a>Yapi部署与配置</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>YApi 是<strong>高效</strong>、<strong>易用</strong>、<strong>功能强大</strong>的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>基于 Json5 和 Mockjs 定义接口返回数据的结构和文档，效率提升多倍</li><li>扁平化权限设计，即保证了大型企业级项目的管理，又保证了易用性</li><li>类似 postman 的接口调试</li><li>自动化测试, 支持对 Response 断言</li><li>MockServer 除支持普通的随机 mock 外，还增加了 Mock 期望功能，根据设置的请求过滤规则，返回期望数据</li><li>支持 postman, har, swagger 数据导入</li><li>免费开源，内网部署，信息再也不怕泄露了</li></ul><p><a href="https://github.com/ymfe/yapi" target="_blank" rel="noopener">GitHub地址</a></p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>nodejs（7.6+)</li><li>mongodb（2.6+）</li><li>git</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p>使用我们提供的 yapi-cli 工具，部署 YApi 平台是非常容易的。执行 yapi server 启动可视化部署程序，输入相应的配置和点击开始部署，就能完成整个网站的部署。部署完成之后，可按照提示信息，执行 node/{网站路径/server/app.js} 启动服务器。在浏览器打开指定url, 点击登录输入您刚才设置的管理员邮箱，默认密码为 ymfe.org 登录系统（默认密码可在个人中心修改）。</p><h3 id="阿里云CentOS-7安装"><a href="#阿里云CentOS-7安装" class="headerlink" title="阿里云CentOS 7安装"></a>阿里云CentOS 7安装</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>获取node资源</p><pre class=" language-bash"><code class="language-bash">curl -sL https://rpm.nodesource.com/setup_10.x <span class="token operator">|</span> <span class="token function">bash</span> -</code></pre><p>安装</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y nodejs</code></pre><p>node版本查看</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><p>npm版本查看</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> -v</code></pre><h4 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h4><p>更新yum源</p><pre class=" language-bash"><code class="language-bash">yum -y update</code></pre><p>添加mongodb源文件</p><pre class=" language-bash"><code class="language-bash">vim /etc/yum.repos.d/mongodb-org.repo</code></pre><p>添加文件内容</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mongodb-org<span class="token punctuation">]</span>name<span class="token operator">=</span>MongoDB Repositorybaseurl<span class="token operator">=</span>http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.2/x86_64/gpgcheck<span class="token operator">=</span>0enabled<span class="token operator">=</span>1</code></pre><p>安装mongodb</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y mongodb-org</code></pre><p>修改mongod.conf配置文件</p><pre class=" language-bash"><code class="language-bash">vim /etc/mongod.conf<span class="token comment" spellcheck="true"># network interfaces</span>net:  port: 27017  bindIp: 0.0.0.0</code></pre><p><strong>修改绑定ip默认127.0.0.1只允许本地连接， 所以修改为bindIp:0.0.0.0, 退出保存</strong></p><p>启动mongodb</p><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> mongod start<span class="token function">service</span> mongod restart // 重启</code></pre><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">git</span></code></pre><h4 id="搭建Yapi环境"><a href="#搭建Yapi环境" class="headerlink" title="搭建Yapi环境"></a>搭建Yapi环境</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g yapi-cli --registry https://registry.npm.taobao.orgyapi server </code></pre><p>浏览器打开：xx.xxx.xxx:9090</p><p>点击开始部署</p><p><strong>关闭云服务器和防火墙开放的<code>9090</code>端口，并开放<code>3000</code>端口</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@RosePuff my-yapi<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># node vendors/server/app.js</span></code></pre><h4 id="yapi设置后台运行"><a href="#yapi设置后台运行" class="headerlink" title="yapi设置后台运行"></a>yapi设置后台运行</h4><p>安装pm2</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i pm2 -g</code></pre><p>切换Yapi安装目录下</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@RosePuff my-yapi<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pm2 start my-yapi/vendors/server/app.js  --watch</span>后台启动，关闭我的yapi是安装在/root/my-yapi启动执行： pm2 start /root/my-yapi/vendors/server/app.js关闭执行： pm2 stop /root/my-yapi/vendors/server/app.js这样以后就可以很方便的用pm2就行启动关闭啦</code></pre><p>重启服务器的时候可以直接执行以下代码</p><pre class=" language-bash"><code class="language-bash">pm2 start /root/my-yapi/vendors/server/app.js --watch</code></pre><p>就会直接自动加载到进程里面去</p><p>默认帐号：<a href="mailto:admin@admin.com">admin@admin.com</a></p><p>默认密码：ymfe.org</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yapi部署 </tag>
            
            <tag> API管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fenig hystrix熔断机制</title>
      <link href="2020/05/13/hou-duan/spring/springcloud/fenig-hystrix-rong-duan-ji-zhi/"/>
      <url>2020/05/13/hou-duan/spring/springcloud/fenig-hystrix-rong-duan-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Feign远程调用"><a href="#Feign远程调用" class="headerlink" title="Feign远程调用"></a>Feign远程调用</h1><h2 id="什么是Feign？"><a href="#什么是Feign？" class="headerlink" title="什么是Feign？"></a>什么是Feign？</h2><h2 id="feign-hystrix-熔断器的-fallback-类的熔断方法异常触发，及查看异常方法"><a href="#feign-hystrix-熔断器的-fallback-类的熔断方法异常触发，及查看异常方法" class="headerlink" title="feign hystrix 熔断器的 fallback 类的熔断方法异常触发，及查看异常方法"></a>feign hystrix 熔断器的 fallback 类的熔断方法异常触发，及查看异常方法</h2><p>明明正常调用生产者方法执行成功了，但是熔断器还会触发，时不时的就触发一次，折腾了一下午，终于发现原因：</p><h3 id="应用启动后就立即执行了方法，应该稍微等待，等它完全运行"><a href="#应用启动后就立即执行了方法，应该稍微等待，等它完全运行" class="headerlink" title="应用启动后就立即执行了方法，应该稍微等待，等它完全运行"></a>应用启动后就立即执行了方法，<strong>应该稍微等待，等它完全运行</strong></h3><p>另外：查看降级熔断原因，使用fallbackfactory自带的create方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service-vod"</span><span class="token punctuation">,</span>fallbackFactory <span class="token operator">=</span> VodFallbaclFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VodConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/service-vod/video/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">removeVideoById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/id/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">removeVideoByIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VodFallbaclFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token operator">&lt;</span>VodConsumer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> VodConsumer <span class="token function">create</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VodConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> R <span class="token function">removeVideoById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"removeById:"</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> R <span class="token function">removeVideoByIds</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> idList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：@FeignClient 加上fallbackfactory后，不要再使用fallback，不然会优先fallback，无法查看异常</p>]]></content>
      
      
      <categories>
          
          <category> 程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fenig hystrix熔断机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端/Java/高阶/JUC/JUC并发浅析</title>
      <link href="2020/05/10/hou-duan/java/gao-jie/juc/juc-bing-fa-qian-xi/"/>
      <url>2020/05/10/hou-duan/java/gao-jie/juc/juc-bing-fa-qian-xi/</url>
      
        <content type="html"><![CDATA[<p>title: JUC并发浅析<br>top: false<br>cover: false<br>toc: true<br>mathjax: true<br>date: 2020-05-10 03:51:18<br>password:<br>summary:<br>tags:</p><ul><li>Java</li><li>JUC<br>categories:</li><li>后端</li></ul><h1 id="JUC并发编程"><a href="#JUC并发编程" class="headerlink" title="JUC并发编程"></a>JUC并发编程</h1><h2 id="什么是JUC"><a href="#什么是JUC" class="headerlink" title="什么是JUC"></a>什么是JUC</h2><p>J.U.C并发包，即<code>java.util.concurrent</code>包，是JDK的核心工具包，是JDK1.5之后，由 Doug Lea实现并引入</p><ul><li><code>java.util</code>：工具包</li><li><code>java.util.concurrent</code>：实用程序类通常在并发编程中很有用</li><li><code>java.util.concurrent.atomic</code>：一个小型工具包，支持单个变量上的无锁线程安全编程。</li><li><code>java.util.concurrent.lokcks</code>：接口和类提供了一个框架，用于锁定和等待与内置同步和监视器不同的条件</li></ul><p>业务：普通的代码，写<code>Thread</code></p><h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><p>进程：每一个应用是一个进程，程序的集合，一个进程可以包含多个线程，至少有一个</p><p>Java至少有两个线程：GC、main</p><p>线程：比如开了个Typora（进程）写字，自动保存等都是线程执行的</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Causes this thread to begin execution; the Java Virtual Machine * calls the &lt;code>run&lt;/code> method of this thread. * &lt;p> * The result is that two threads are running concurrently: the * current thread (which returns from the call to the * &lt;code>start&lt;/code> method) and the other thread (which executes its * &lt;code>run&lt;/code> method). * &lt;p> * It is never legal to start a thread more than once. * In particular, a thread may not be restarted once it has completed * execution. * * @exception  IllegalThreadStateException  if the thread was already *               started. * @see        #run() * @see        #stop() */</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * This method is not invoked for the main method thread or "system"     * group threads created/set up by the VM. Any new functionality added     * to this method in the future may have to also be added to the VM.     *     * A zero status value corresponds to state "NEW".     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Notify the group that this thread is about to be started     * so that it can be added to the group's list of threads     * and the group's unstarted count can be decremented. */</span>    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* do nothing. If start0 threw a Throwable then              it will be passed up the call stack */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过本地方法调取，Java没有权限进入</span><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="并发，并行"><a href="#并发，并行" class="headerlink" title="并发，并行"></a>并发，并行</h3><p>开发编程：并发，并行</p><p>并发：多个线程操作同一个资源</p><ul><li>CPU单核：不会出现并行，因为是模拟出来的并发和并行，是多条线程相互交替执行</li></ul><p>并行：多个线程同一时间操作不同资源</p><ul><li>CPU多核：多个线程可以同时执行  </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取当前CPU的核数</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>并发编程的本质：<strong>充分利用CPU资源</strong></p><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 新建</span>    NEW<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 运行</span>    RUNNABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 就绪</span>    BLOCKED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 阻塞</span>    WAITING<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 超时等待</span>    TIMED_WAITING<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 消亡</span>    TERMINATED<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>新建、就绪、运行、阻塞、消亡</p><h2 id="Lock锁（重点）"><a href="#Lock锁（重点）" class="headerlink" title="Lock锁（重点）"></a>Lock锁（重点）</h2><p><code>synchronized</code>、<code>Lock</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Creates an instance of {@code ReentrantLock}. * This is equivalent to using {@code ReentrantLock(false)}. */</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Creates an instance of {@code ReentrantLock} with the * given fairness policy. * * @param fair {@code true} if this lock should use a fair ordering policy */</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="传统的synchronized"><a href="#传统的synchronized" class="headerlink" title="传统的synchronized"></a>传统的<code>synchronized</code></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketDemo</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 线程就是一个单独的资源类没有任何的附属操作</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 并发多线程操作</span>      Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了："</span> <span class="token operator">+</span> number<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"票，剩余："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>公平锁：必须顺序执行</p><p>非公平锁：可以插队（默认）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketDemo2</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 线程就是一个单独的资源类没有任何的附属操作</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 并发多线程操作</span>      Ticket2 ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ticket2</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>   Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 业务代码</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了："</span> <span class="token operator">+</span> number<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"票，剩余："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="synchronized和Lock的区别"><a href="#synchronized和Lock的区别" class="headerlink" title="synchronized和Lock的区别"></a>synchronized和Lock的区别</h3><ol><li><code>synchronized</code>是内置的Java关键字；<code>Lock</code>是一个类</li><li><code>synchronized</code>无法判断获取锁的状态；而<code>Lock</code>可以判断是否获取到了锁</li><li><code>synchronized</code>是自动释放锁的；<code>Lock</code>需要手动释放锁，<strong>不释放——死锁</strong></li><li><code>synchronized</code>线程1（获得锁，阻塞），线程2（等待）；Lock不一定会等待</li><li><code>synchronized</code>可重入锁，不可中断，是非公平锁；<code>Lock</code>可重入锁，可以判断锁，可以自己设置是否公平锁</li><li><code>synchronized</code>适合少量的代码同步的问题，<code>Lock</code>适合大量的同步代码</li></ol><h2 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h2><h4 id="Synchronized版本"><a href="#Synchronized版本" class="headerlink" title="Synchronized版本"></a>Synchronized版本</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*    * 线程之间的通信问题：生产者和消费者问题；等待唤醒，通知唤醒    * 线程之间交替执行  A   B 同时操作一个变量，num=0    * A num+1    * B num-1    *    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 资源类：等待，业务，通知 */</span><span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// +1</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 等待</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      num<span class="token operator">++</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通知</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//-1</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 等待</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      num<span class="token operator">--</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通知</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>存在的问题：这个只是两个线程，当存在<code>A、B、C、D</code>四个线程的时候那就不是安全的，可以直接加两个线程，输出会出现2、3等，那么就表示这个线程不是安全的线程了</p><p><strong>wait()</strong></p><ul><li>此方法使当前线程（称为T ）将其放置在该对象的等待集中，然后放弃对该对象的任何和所有同步声明。  线程T变得禁用线程调度目的，并且休眠，直到发生四件事情之一： <ul><li>一些其他线程调用该对象的<code>notify</code>方法，并且线程T恰好被任意选择为被唤醒的线程。 </li><li>某些其他线程调用此对象的<code>notifyAll</code>方法。 </li><li>一些其他线程<a href="../../java/lang/Thread.html#interrupt--">interrupts</a>线程T。 </li><li>指定的实时数量已经过去，或多或少。  然而，如果<code>timeout</code>为零，则不考虑实时，线程等待直到通知。 </li></ul></li></ul><p>然后从该对象的等待集中删除线程T ，并重新启用线程调度。然后它以通常的方式与其他线程竞争在对象上进行同步的权限;一旦获得了对象的控制，其对对象的所有同步声明就恢复到现状 -  也就是在调用<code>wait</code>方法之后的情况。线程T然后从调用<code>wait</code>方法返回。因此，从返回<code>wait</code>方法，对象和线程的同步状态<code>T</code>正是因为它是当<code>wait</code>被调用的方法。</p><p>线程也可以唤醒，而不会被通知，中断或超时，即所谓的<strong><em>虚假唤醒</em></strong> 。  虽然这在实践中很少会发生，但应用程序必须通过测试应该使线程被唤醒的条件来防范，并且如果条件不满足则继续等待。  换句话说，等待应该总是出现在循环中，就像这样： </p><pre class=" language-java"><code class="language-java">  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>condition does not hold<span class="token operator">></span><span class="token punctuation">)</span>             obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// Perform action appropriate to condition</span>     <span class="token punctuation">}</span> </code></pre><p>也即是说会出现虚假唤醒，因为上面代码中的<code>if</code>判断只会判断一次，当有两个同时进行的时候就会出现只判断一次的情况，所以我们应该使用的是<code>while</code>而不是<code>if</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 资源类：等待，业务，通知 */</span><span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// +1</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 等待</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      num<span class="token operator">++</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通知</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//-1</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 等待</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      num<span class="token operator">--</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通知</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>即可解决这个<strong><em>虚假唤醒</em></strong>问题</p><h4 id="JUC版本"><a href="#JUC版本" class="headerlink" title="JUC版本"></a>JUC版本</h4><p>通过<code>Lock</code>找到<code>Condition</code></p><p><img src="D:%5C%E6%B1%82%E8%81%8C%5CJava%E6%80%BB%E7%BB%93%5Ca%5CCondition%E5%AE%9A%E4%B9%89.png" alt="image-20200513015405725"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Data2 data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 资源类：等待，业务，通知 */</span><span class="token keyword">class</span> <span class="token class-name">Data2</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// +1</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         num<span class="token operator">++</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 通知</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//-1</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等待</span>            condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         num<span class="token operator">--</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 通知</span>         condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码输出为<strong>无序输出状态</strong></p><h4 id="Condition实现精准通知唤醒"><a href="#Condition实现精准通知唤醒" class="headerlink" title="Condition实现精准通知唤醒"></a>Condition实现精准通知唤醒</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCondition</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Data3 data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">.</span><span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data3</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===> AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>         condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            condition2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===> BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>         condition3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            condition3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"===> CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         condition1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>按照业务代码的顺序去执行，精准唤醒某一个线程</p><h2 id="锁的八个问题现象"><a href="#锁的八个问题现象" class="headerlink" title="锁的八个问题现象"></a>锁的八个问题现象</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockProblem1</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*   1、标准情况下，两个线程哪个先出现？   2、在同步方法块SendSMS()中增加3s的延迟，谁先调用？   SendSMS()先执行，CallPhone()后执行   锁的问题，synchronized 锁的对象是方法的调用者，A、B线程都是调用的是Phone对象中的锁（同一把锁）   而Phone对象的锁都是同一个锁，所以就是谁先拿到锁，就是谁先执行，相当于单线程    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         phone<span class="token punctuation">.</span><span class="token function">SendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phone<span class="token operator">:</span><span class="token operator">:</span>CallPhone<span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">SendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sendSMS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">CallPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CallPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockProblem2</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*   3、增加一个普通方法Hello()，先执行什么？   先执行Hello()因为没有锁，不是同步方法，所以直接执行   4、两个对象，两个同步方法，先执行什么？   先执行CallPhone()，后执行SendSMS()，因为是两个对象，两个调用者，那么调用的是两把锁，调用的时间不一样，而CallPhone()没有sleep()，所以先执行demo3对象的方法    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Demo2 demo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Demo2 demo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>demo2<span class="token operator">:</span><span class="token operator">:</span>SendSMS<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>demo3<span class="token operator">:</span><span class="token operator">:</span>CallPhone<span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    new Thread(demo2::Hello, "B").start();</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">SendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sendSMS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">CallPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CallPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockProblem3</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*   5、增加两个静态的方法，只有一个对象，先执行什么？   首先执行SendSMS()，static——静态方法，在类加载的时候就有了，是一个Class模板，是因为锁的是Demo3。class这个对象，static synchronized锁的是Demo3.class这个模板   6、两个对象，增加两个静态的同步方法   也是先输出SendSMS，因为staticClass模板    */</span>   <span class="token comment" spellcheck="true">// 相当与当不加static的时候synchronized锁是由对象来操作，但是加了static的时候是锁了整个Demo3.class类，而demo和demo2调用的都是Demo3.class，</span>   <span class="token comment" spellcheck="true">// 所以直接源头就锁住了</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Demo3 demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Demo3 demo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         demo<span class="token punctuation">.</span><span class="token function">SendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         demo2<span class="token punctuation">.</span><span class="token function">CallPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">SendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SendSMS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">CallPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CallPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockProblem4</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*   7、一个静态同步方法，一个普通同步方法，一个对象；   先执行CallPhone，B线程   因为静态同步方法static锁的是Class的类模板，普通同步方法锁的是调用者，两个方法用的不是同一个锁，所以调用CallPhone的时候不用等待SendSMS的锁   8、一个静态同步方法，一个普通同步方法，两个对象；   还是调用的是对象模板    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Demo4 demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Demo4 demo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         demo<span class="token punctuation">.</span><span class="token function">SendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         demo1<span class="token punctuation">.</span><span class="token function">CallPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">SendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SendSMS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">CallPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CallPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>锁的两个</p><p>New this 具体的一个对象</p><p>static锁的是Class——唯一的一个模板</p><h2 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h2><p>单线程的代码安全的</p><p><img src="D:%5C%E6%B1%82%E8%81%8C%5CJava%E6%80%BB%E7%BB%93%5Ca%5C%E5%90%8C%E7%BA%A7.png" alt="image-20200517020719350"></p><h3 id="List不安全"><a href="#List不安全" class="headerlink" title="List不安全"></a>List不安全</h3><p>并发下的集合都会出现这个错误：并发修改异常<code>java.util.ConcurrentModificationException</code></p><ul><li>第一个解决方案：<code>List&lt;String&gt; list = new Vector&lt;&gt;();</code><br>可以用Vector解决；<code>ArrayList</code>中的<code>add</code>是怎么写的（扩容的过程）但是<code>ArrayList</code>中的<code>add</code>是JDK1.2出的，而<code>Vector</code>是JDK1.0出的，<code>add</code>的解决方案不好</li><li>第二种解决方案：<code>List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</code><br> <code>Collections</code>为<code>list</code>的顶层父类，里面集成了<code>synchronized</code>的各种集合</li><li>第三种解决方案：<code>List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</code><br> <code>CopyOnWrite</code>——写入时复制，<code>CUW</code>（计算机程序设计领域的一种优化创新）<br> 多个线程调用的时候，List，读取的时候固定的，写入（覆盖）<br> 也就是相当于说是<code>CopyOnWrite</code>操作写入的时候复制一份给调用者，调用者写完之后创建给放回去避免覆盖，造成数据问题</li></ul><p><code>CopyOnWrite</code>比<code>Vector</code>好在哪里：</p><ul><li><code>Vector</code>中的<code>add()</code>方法使用的是<code>synchronized</code>效率相对来说比较低</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Appends the specified element to the end of this Vector. * * @param e element to be appended to this Vector * @return {@code true} (as specified by {@link Collection#add}) * @since 1.2 */</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>elementCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>而<code>CopyOnWrite</code>使用的是Lock锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Appends the specified element to the end of this list. * * @param e element to be appended to this list * @return {@code true} (as specified by {@link Collection#add}) */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestList</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 单线程</span><span class="token comment" spellcheck="true">//    List&lt;String> list = Arrays.asList("1", "2", "3");</span><span class="token comment" spellcheck="true">//    list.forEach(System.out::println);</span>      <span class="token comment" spellcheck="true">// 多线程三种解决方案</span><span class="token comment" spellcheck="true">//    List&lt;String> list = new ArrayList&lt;>();// 报错 java.util.ConcurrentModificationException</span><span class="token comment" spellcheck="true">//    List&lt;String> list = new Vector&lt;>();</span><span class="token comment" spellcheck="true">//    List&lt;String> list = Collections.synchronizedList(new ArrayList&lt;>());</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>和List一样会出现并发修改异常</p><ul><li>第一种方案：<code>Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</code>通过工具类转换成<code>synchronized</code></li><li>第二种方案：<code>Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();</code>写入式复制，保证效率和性能的问题</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSet</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*      一样多线程会出现：并发修改异常——java.util.ConcurrentModificationException       */</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());</span><span class="token comment" spellcheck="true">//    Set&lt;String> set = new CopyOnWriteArraySet&lt;>();</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="HashSet的底层是什么"><a href="#HashSet的底层是什么" class="headerlink" title="HashSet的底层是什么"></a>HashSet的底层是什么</h3><p>底层就是<code>new HashMap()</code></p><p>add.set()本质就是map的Key是无法重复的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// add set 本质就是map的Key是无法重复的</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 固定的值，常量不会变的</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 默认的初始化容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token comment" spellcheck="true">// 默认的加载因子</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>工作中不使用这种方式的HashMap</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一样会出现：``并发修改异常——java.util.ConcurrentModificationException`</p><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><p>返回结果并可能引发异常的任务。实现者定义一个没有参数的单一方法，称为<code>call</code> 。</p><p><code>Callable</code>接口类似于<a href="../../../java/lang/Runnable.html"><code>Runnable</code></a>  ，因为它们都是为其实例可能由另一个线程执行的类设计的。 然而，A  <code>Runnable</code>不返回结果，也不能抛出被检查的异常。 </p><p>该<a href="../../../java/util/concurrent/Executors.html"><code>Executors</code></a>类包含的实用方法，从其他普通形式转换为<code>Callable</code>类。</p><ul><li>可以有返回值</li><li>可以抛出异常</li><li>方法不同，<code>run()</code>、<code>call()</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallable</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 传统方式</span><span class="token comment" spellcheck="true">//    new Thread(new MyThread()).start();</span><span class="token comment" spellcheck="true">//    new Thread(new Runnable()).start();</span><span class="token comment" spellcheck="true">//    new Thread(new FutureTask&lt;v>()).start();</span><span class="token comment" spellcheck="true">//    new Thread(new FutureTask&lt;v>(Callable)).start();</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 适配类</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果被缓存，提高效率</span>      <span class="token comment" spellcheck="true">// 获取Callable返回的结果，可能会产生阻塞</span>      Integer o <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Call()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="常用的辅助类-必会"><a href="#常用的辅助类-必会" class="headerlink" title="常用的辅助类(必会)"></a>常用的辅助类(必会)</h2><h3 id="CountDownLatch（减法计数器）"><a href="#CountDownLatch（减法计数器）" class="headerlink" title="CountDownLatch（减法计数器）"></a>CountDownLatch（减法计数器）</h3><p><strong>允许一个或多个线程等待直到在其他线程中执行的一组操作完成的同步辅助。</strong></p><p>A <code>CountDownLatch</code>用给定的<em>计数</em>初始化。 <a href="../../../java/util/concurrent/CountDownLatch.html#await--"><code>await</code></a>方法阻塞，直到由于<a href="../../../java/util/concurrent/CountDownLatch.html#countDown--"><code>countDown()</code></a>方法的<a href="../../../java/util/concurrent/CountDownLatch.html#countDown--">调用</a>而导致当前计数达到零，之后所有等待线程被释放，并且任何后续的<code>await</code>  <a href="../../../java/util/concurrent/CountDownLatch.html#await--">调用立即</a>返回。  这是一个一次性的现象 - 计数无法重置。 如果您需要重置计数的版本，请考虑使用<a href="../../../java/util/concurrent/CyclicBarrier.html"><code>CyclicBarrier</code></a>。</p><p>A <code>CountDownLatch</code>是一种通用的同步工具，可用于多种用途。  一个<code>CountDownLatch</code>为一个计数的CountDownLatch用作一个简单的开/关锁存器，或者门：所有线程调用<a href="../../../java/util/concurrent/CountDownLatch.html#await--"><code>await</code></a>在门口等待，直到被调用<a href="../../../java/util/concurrent/CountDownLatch.html#countDown--"><code>countDown()</code></a>的线程打开。  一个<code>CountDownLatch</code>初始化<em>N</em>可以用来做一个线程等待，直到<em>N个</em>线程完成某项操作，或某些动作已经完成N次。 </p><p><code>CountDownLatch</code>一个有用的属性是，它不要求调用<code>countDown</code>线程等待计数到达零之前继续，它只是阻止任何线程通过<a href="../../../java/util/concurrent/CountDownLatch.html#await--"><code>await</code></a>  ，直到所有线程可以通过。 </p><p><strong>示例用法：</strong>这是一组类，其中一组工作线程使用两个倒计时锁存器： </p><ul><li>第一个是启动信号，防止任何工作人员进入，直到驾驶员准备好继续前进; </li><li>第二个是完成信号，允许司机等到所有的工作人员完成。 </li></ul><p>另一个典型的用法是将问题划分为N个部分，用一个Runnable来描述每个部分，该Runnable执行该部分并在锁存器上倒计时，并将所有Runnables排队到执行器。  当所有子部分完成时，协调线程将能够通过等待。 （当线程必须以这种方式反复倒数时，请<a href="../../../java/util/concurrent/CyclicBarrier.html">改用<code>CyclicBarrier</code></a>  ）） </p><p>内存一致性效果：直到计数调用之前达到零，在一个线程操作<code>countDown()</code> <a href="package-summary.html#MemoryVisibility"><em>happen-before</em></a>以下由相应的成功返回行动<code>await()</code>在另一个线程。 </p><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCountDownLatch</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 总数设定为6</span>      CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 等待计数器归零之后再向下执行</span>      countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Close Door"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也就是说在这个类里面主要是两个方法：<code>countDownLatch.countDown()</code>数量-1、<code>countDownLatch.await()</code>等待计数器归零，再向下执行</p><h3 id="CyclicBarrier（加法计数器）"><a href="#CyclicBarrier（加法计数器）" class="headerlink" title="CyclicBarrier（加法计数器）"></a>CyclicBarrier（加法计数器）</h3><p>允许一组线程全部等待彼此达到共同屏障点的同步辅助。循环阻塞在涉及固定大小的线程方的程序中很有用，这些线程必须偶尔等待彼此。屏障被称为<em>循环</em>  ，因为它可以在等待的线程被释放之后重新使用。</p><p>A <code>CyclicBarrier</code>支持一个可选的<a href="../../../java/lang/Runnable.html"><code>Runnable</code></a>命令，每个屏障点运行一次，在派对中的最后一个线程到达之后，但在任何线程释放之前。  在任何一方继续进行之前，此<em>屏障操作</em>对更新共享状态很有用。 </p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCyclicBarrier</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"召唤成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>         <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"收集"</span> <span class="token operator">+</span> temp <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Semaphore（信号量）"><a href="#Semaphore（信号量）" class="headerlink" title="Semaphore（信号量）"></a>Semaphore（信号量）</h3><p>一个计数信号量。在概念上，信号量维持一组许可证。如果有必要，每个<a href="../../../java/util/concurrent/Semaphore.html#acquire--"><code>acquire()</code>都会</a>阻塞，直到许可证可用，然后才能使用它。每个<a href="../../../java/util/concurrent/Semaphore.html#release--"><code>release()</code></a>添加许可证，潜在地释放阻塞获取方。但是，没有使用实际的许可证对象;<code>Semaphore</code>只保留可用数量的计数，并相应地执行。</p><p>信号量通常用于限制线程数，而不是访问某些（物理或逻辑）资源。  例如，这是一个使用信号量来控制对一个项目池的访问的类。</p><p><code>semaphore.acquire();</code>——获得，假设原有的空位都是已经被满了，就等待，等待到被释放位置</p><p><code>semaphore.release();</code>——释放，当前的信号量释放+1，然后唤醒被等待的线程</p><p>作用：多个共享资源互斥得使用，并发限流，控制最大得线程数。</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSemaphore</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 空位，可以起到限流的作用</span>      Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"得到位置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"离开位置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>               semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>A <code>ReadWriteLock</code>维护一对关联的<code>locks</code>  ，一个用于只读操作，一个用于写入。<a href="../../../../java/util/concurrent/locks/ReadWriteLock.html#readLock--"><code>read  lock</code></a>可以由多个阅读器线程同时进行，只要没有作者。<code>write  lock</code>是独家的。</p><p>所有<code>ReadWriteLock</code>实现必须保证的存储器同步效应<code>writeLock</code>操作（如在指定<a href="../../../../java/util/concurrent/locks/Lock.html"><code>Lock</code></a>接口）也保持相对于所述相关联的<code>readLock</code></p><p>也就是说是读的时候可以被多线程同时读取，但是写入的时候只能有一个线程去执行写的操作</p><p>通过下面代码即可创建读写锁<code>ReentrantReadWriteLock</code>的构造方法中如果不传参数，<code>默认创建的是非公平的读写锁</code>。在读写锁中，仍然是<code>非公平的读写锁性能要由于公平的读写锁</code>。</p><pre class=" language-java"><code class="language-java">ReadWriteLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建读锁</span>Lock readLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建写锁</span>Lock writeLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 也可以：</span><span class="token keyword">private</span> ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存，写锁</span>readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取，读锁</span>readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="写锁加锁"><a href="#写锁加锁" class="headerlink" title="写锁加锁"></a>写锁加锁</h3><p>当调用写锁的<code>lock()</code>方法时，线程会尝试获取写锁，即<code>writeLock.lock()</code>。由于写锁是排他锁，所以写锁的获取过程几乎与ReentrantLock获取锁的逻辑一样。当调用<code>lock()</code>方法时，会先调用到AQS的<code>acquire()</code>方法，在<code>acquire()</code>方法中会先调用子类的<code>tryAcquire()</code>方法，因此这里调用的是<code>ReentrantReadWriteLock</code>的内部类<code>Sync</code>的<code>tryAcquire()</code>方法。该方法的源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * Walkthrough:     * 1. If read count nonzero or write count nonzero     *    and owner is a different thread, fail.     * 2. If count would saturate, fail. (This can only     *    happen if count is already nonzero.)     * 3. Otherwise, this thread is eligible for lock if     *    it is either a reentrant acquire or     *    queue policy allows it. If so, update state     *    and set owner.     */</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// (Note: if c != 0 and w == 0 then shared count != 0)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">></span> MAX_COUNT<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Reentrant acquire</span>        <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert firstReaderHoldCount > 0;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            firstReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Releasing the read lock has no effect on readers,</span>            <span class="token comment" spellcheck="true">// but it may allow waiting writers to proceed if</span>            <span class="token comment" spellcheck="true">// both read and write locks are now free.</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在tryAcquire()方法中，先通过<code>exclusiveCount()</code>方法来计算写锁的数量，怎么计算的呢？就是将state和<code>0x0000FFFF</code>进行<code>与运算</code>。</p><p>然后判断state是否等于0，如果等于0，就表示读锁和写锁都没有被获取，当前线程就调用<code>writerShouldBlock()</code>方法判断线程是否需要等待，如果需要等待，tryAcquire()方法就返回false，表示获取锁失败，那么就会回到AQS的acquire()方法中，后面的逻辑与排他锁的逻辑一样。如果不需要等待，就尝试去修改state的值，如果修改成功，就表示获取锁成功，否则失败。</p><p>如果state不等于0，那么就表示存在读锁或者写锁，那么究竟是读锁还是写锁呢？就需要根据w的值进行判断了。</p><p>如果w为0，说明写锁的数量为0，而此时又因为c不等于0，说明锁被占用，但是不是写锁，那么此时锁的状态一定是读锁，既然是读锁状态，那么写锁此时来获取锁时，就肯定失败，因为读锁存在时，是不能去获取写锁的。因此当w等于0时，tryAcquire()方法返回false。</p><p>如果w不为0，说明此时锁的状态是写锁，接着进行<code>current != getExclusiveOwnerThread()</code>判断，判断持有锁的线程是否是当前线程。如果不是当前线程，那么tryAcquire()返回false；如果是当前线程，那么就进行后面的逻辑。为什么是当前线程持有锁，就能执行后面的逻辑呢？ 因为读写锁是支持重入的。</p><p>如果是当前线程获取的写锁，接着就判断，再次对写锁进行重入时，会不会超出写锁的最大重入次数，如果是，就抛出异常。（因为state的低16位表示写锁，所以写锁最大可被重入的次数是<img src="https://juejin.im/equation?tex=2%5E%7B16%7D" alt="2^{16}">-1）。</p><h3 id="写锁释放"><a href="#写锁释放" class="headerlink" title="写锁释放"></a>写锁释放</h3><p>写锁的释放与排他锁的释放逻辑也几乎一样。当调用writeLock.unlock()时，先调用到AQS的release()方法，在release()方法中会先调用子类的tryRelease()方法。在这里调用的是ReentrantReadWriteLock的内部类Sync的tryRelease()方法。写锁的释放逻辑比较简单，可以参考下面源码中的注释。方法的源码和注释如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否是当前线程持有锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将state的值减去releases</span>    <span class="token keyword">int</span> nextc <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用exclusiveCount()方法，计算写锁的数量。如果写锁的数量为0，表示写锁被完全释放，此时将AQS的exclusiveOwnerThread属性置为null</span>    <span class="token comment" spellcheck="true">// 并返回free标识，表示写锁是否被完全释放</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>free<span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="读锁加锁"><a href="#读锁加锁" class="headerlink" title="读锁加锁"></a>读锁加锁</h3><p>读锁是共享锁，所以当调用readLock.lock()方法时，会先调用到AQS的acquiredShared()方法，在acquireShared()方法中会先调用子类的tryAcquireShared()方法。在这里会调用的是ReentrantReadWriteLock的内部类Sync的<code>tryAcquireShared()</code>方法。该方法的源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// exclusiveCount(c)返回的是写锁的数量，如果它不为0，说明写锁被占用，如果此时占用写锁的线程不是当前线程，就返回-1，表示获取锁失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// r表示的是读锁的数量</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在下面的代码中进行了三个判断：     * 1、读锁是否应该排队。如果没有人排队，就进行if后面的判断。有人排队，就不会进行if后面的判断，而是最终调用fullTryAcquireShared()方法     * 2、读锁数量是否超过最大值。（最大数量为2的16次方-1）     * 3、尝试修改同步变量的值     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span>        <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读锁数量为0时，就将当前线程设置为firstReader，firstReaderHoldCount=1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>            firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读锁数量不为0且firstReader(第一次获取读的线程)为当前线程，就将firstReaderHoldCount累加</span>            firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读锁数量不为0，且第一个获取到读锁的线程不是当前线程</span>            <span class="token comment" spellcheck="true">// 下面这一段逻辑就是保存当前线程获取读锁的次数，如何保存的呢？</span>            <span class="token comment" spellcheck="true">// 通过ThreadLocal来实现的，readHolds就是一个ThreadLocal的实例</span>            HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>            rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回1表示获取读锁成功</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当if中的三个判断均不满足时，就会执行到这儿，调用fullTryAcquireShared()方法尝试获取锁</span>    <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在tryAcquireShared()方法中，会先通过<code>exclusiveCount()</code>方法来计算写锁的数量，如果写锁存在，再判断持有写锁的线程是不是当前线程，如果不是当前线程，就表示写锁被其他线程给占用，此时当前线程不能获取读锁。tryAcquireShared()方法返回-1，表示获取读锁失败。如果写锁不存在或者持有写锁的线程是当前线程，那么就表示当前线程有机会获取到读锁。</p><p>接下里会判断当前线程获取读锁是否不需要排队，读锁数量是否会超过最大值，以及通过CAS修改读锁的状态是否成功（将state的值加 1&lt;&lt;16）。如果这三个条件成立，就进入if语句块中，这一块的代码比较繁琐，但是功能比较单一，就是统计读锁的数量以及当前线程对读锁的重入次数，底层原理就是<code>ThreadLocal</code>。因为在读写锁中提供了<code>getReadLockCount()、getReadHoldCount()</code>等方法，这几个方法的数据就来自这儿。</p><p>如果上面的三个条件有一个不成立，就不会进入if语句块，那么就会调用fullTryAcquireShared()方法。该方法的作用就是让线程不停的获取锁，其源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>Thread current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * This code is in part redundant with that in     * tryAcquireShared but is simpler overall by not     * complicating tryAcquireShared with interactions between     * retries and lazily reading hold counts.     */</span>    HoldCounter rh <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// for死循环，直到满足相应的条件才会return退出，否则一直循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 锁的状态为写锁时，持有锁的线程不等于当期那线程，就说明当前线程获取锁失败，返回-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// else we hold the exclusive lock; blocking here</span>            <span class="token comment" spellcheck="true">// would cause deadlock.</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Make sure we're not acquiring read lock reentrantly</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// assert firstReaderHoldCount > 0;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> MAX_COUNT<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尝试设置同步变量的值，只要设置成功了，就表示当前线程获取到了锁，然后就设置锁的获取次数等相关信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>                firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null<span class="token punctuation">)</span>                    rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                    rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>                rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                cachedHoldCounter <span class="token operator">=</span> rh<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cache for release</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当获取到读锁成功以后，tryAcquireShared()方法会返回1，这样当回到AQS的acquireShared()方法时，就会直接结束了。如果获取锁失败，tryAcquireShared()方法会返回-1，那么在AQS中，就会接着执行doAcquireShared()方法。doAcquireShared()方法的作用就是将自己加入到同步队列中，等待获取锁，直到获取锁成功。该方法不响应中断。</p><h3 id="读锁释放"><a href="#读锁释放" class="headerlink" title="读锁释放"></a>读锁释放</h3><p>当调用readLock.unlock()方法时，会先调用到AQS的releaseShared()方法，在releaseShared()方法中会先调用子类的tryReleaseShared()方法。在这里会调用的是ReentrantReadWriteLock的内部类Sync的<code>tryReleaseShared()</code>方法。该方法的源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert firstReaderHoldCount > 0;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReaderHoldCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            firstReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            firstReaderHoldCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            readHolds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">unmatchedUnlockException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">--</span>rh<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将修改同步变量的值（读锁状态减去1&lt;&lt;16）</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">-</span> SHARED_UNIT<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Releasing the read lock has no effect on readers,</span>            <span class="token comment" spellcheck="true">// but it may allow waiting writers to proceed if</span>            <span class="token comment" spellcheck="true">// both read and write locks are now free.</span>            <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在tryReleaseShared()方法中，会先修改和读锁计数有关的数据，然后在for的死循环中，通过CAS操作将state的值减去1&lt;&lt;16。如果CAS操作成功，才会从for循环中退出。当读锁数量为0时，tryReleaseShared()返回true，表示锁被完全释放。</p><p>当tryReleaseShared()方法返回后，接下来的步骤和共享锁的释放逻辑完全一样的。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>读写锁的使用十分简单，但是在读写锁的使用过程中，需要注意以下两点。</p><p><code>读写锁</code>不支持锁升级<code>，</code>支持锁降级`。锁升级指的是线程获取到了读锁，在没有释放读锁的前提下，又获取写锁。锁降级指的是线程获取到了写锁，在没有释放写锁的情况下，又获取读锁。为什么不支持锁升级呢？可以参考如下示例代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockUpgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ReadWriteLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建读锁</span>    Lock readLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建写锁</span>    Lock writeLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...处理业务逻辑</span>        writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 代码①</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的示例代码中，假如T1线程先获取到了读锁，然后执行后面的代码，在执行到代码①的上一行时，T2线程也去获取读锁，由于读锁是共享锁，且此时写锁还没有被获取，所以此时T2线程可以获取到读锁，当T1执行到代码①时，尝试去获取写锁，由于有T2线程占用了读锁，所以T1线程是无法获取到写锁的，只能等待，当T2也执行到代码①时，由于T1占有了读锁，导致T2无法获取到写锁，这样两个线程就一直等待，即获取不到写锁，也释放不掉读锁。因此锁是不支持锁升级的。</p><p>读写锁支持锁的降级，锁的降级是为了保证可见性。让T1线程对数据的修改对其他线程可见。</p><p>读锁不支持条件等待队列。当调用ReadLock类的newCondition()方法时，会直接抛出异常。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因为读锁是共享锁，最大获取次数为<img src="https://juejin.im/equation?tex=2%5E%7B16%7D" alt="2^{16}">-1），同一时刻可以被多个线程持有，对于读锁而言，其他线程没有必要等待获取读锁，Condition的等待唤醒毫无意义。</p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><h2 id="线程池-重点"><a href="#线程池-重点" class="headerlink" title="线程池(重点)"></a>线程池(重点)</h2><h2 id="四大函数式接口（必需掌握）"><a href="#四大函数式接口（必需掌握）" class="headerlink" title="四大函数式接口（必需掌握）"></a>四大函数式接口（必需掌握）</h2><h2 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h2><h2 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h2 id="深入理解CAS"><a href="#深入理解CAS" class="headerlink" title="深入理解CAS"></a>深入理解CAS</h2><h2 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h2><h2 id="各种锁的理解：公平锁、非公平锁、可重入锁、自旋锁、死锁"><a href="#各种锁的理解：公平锁、非公平锁、可重入锁、自旋锁、死锁" class="headerlink" title="各种锁的理解：公平锁、非公平锁、可重入锁、自旋锁、死锁"></a>各种锁的理解：公平锁、非公平锁、可重入锁、自旋锁、死锁</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程解析</title>
      <link href="2020/05/04/hou-duan/java/ji-chu/duo-xian-cheng-jie-xi/"/>
      <url>2020/05/04/hou-duan/java/ji-chu/duo-xian-cheng-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程解析"><a href="#多线程解析" class="headerlink" title="多线程解析"></a>多线程解析</h1><h2 id="线程、进程、多线程"><a href="#线程、进程、多线程" class="headerlink" title="线程、进程、多线程"></a>线程、进程、多线程</h2><p>多任务：一个物体同时做两个事情，虽然看起来是在做两个事情，但是我们的大脑在同一时刻只是做了一件事情</p><p>多线程：内存8G不够用，加一条8G，双通道，提高效率</p><ul><li>线程是独立的执行路径</li><li>在程序运行的时候就算没有自己创建线程，后台也会有多个线程，如：主线程、GC线程等</li><li><code>main()</code>称之为主线程，为系统的入口，用于执行整个程序</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的。</li><li>对于同一份资源操作的时候，必然会存在资源抢夺的情况，需要加入并发控制</li><li>线程会带来额外的开销，比如CPU的调度时间等</li><li>每个线程在自己的工作内存中交互，内存控制不当的话会造成数据不一致的问题</li></ul><h3 id="Process与Thread"><a href="#Process与Thread" class="headerlink" title="Process与Thread"></a>Process与Thread</h3><ul><li>程序：指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念</li><li>进程：是执行程序的一次执行过程，是一个动态的概念，是计算机系统分配的单位</li><li>通常在一个进程中有若干个线程，也有可能是一个进程就只有一个线程，如果进程里面没有线程的话，这个进程就没有存在的意义。线程是CPU调度和执行的单位</li></ul><h3 id="线程创建（Thread、Runnable、Callable）"><a href="#线程创建（Thread、Runnable、Callable）" class="headerlink" title="线程创建（Thread、Runnable、Callable）"></a>线程创建（Thread、Runnable、Callable）</h3><h4 id="创建的方式"><a href="#创建的方式" class="headerlink" title="创建的方式"></a>创建的方式</h4><p><code>Thread.class</code>——继承</p><p><code>Runnable接口</code>——实现</p><p><code>Callable接口</code>——实现</p><h4 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h4><ul><li>自定义线程类集成<code>Thread</code>类</li><li>重写<code>run()</code>方法，编辑线程执行体</li><li>常见线程对象，调用<code>start()</code>方法启动线程</li></ul><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建线程方法之一：集成Thread类，重写run()方法，调用start开启线程</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Run方法线程体</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"凯撒简单啦大家"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个线程对象</span>        TestThread testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用start()方法开启线程</span>        testThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// main()方法，主线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在吃饭="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>线程是交替执行的</p><p>案例：下载图片</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownloadPhoto</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DownloadPhoto</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        WebDownload webDownload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webDownload<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载的文件名为："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DownloadPhoto downloadPhoto1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownloadPhoto</span><span class="token punctuation">(</span><span class="token string">"https://i0.hdslb.com/bfs/article/61df7cfcdc5e72620041ad4ed0cf8c1b49be095e.png"</span><span class="token punctuation">,</span> <span class="token string">"1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DownloadPhoto downloadPhoto2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownloadPhoto</span><span class="token punctuation">(</span><span class="token string">"https://i0.hdslb.com/bfs/article/61df7cfcdc5e72620041ad4ed0cf8c1b49be095e.png"</span><span class="token punctuation">,</span> <span class="token string">"2.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DownloadPhoto downloadPhoto3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownloadPhoto</span><span class="token punctuation">(</span><span class="token string">"https://i0.hdslb.com/bfs/article/61df7cfcdc5e72620041ad4ed0cf8c1b49be095e.png"</span><span class="token punctuation">,</span> <span class="token string">"3.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        downloadPhoto1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        downloadPhoto2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        downloadPhoto3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">WebDownload</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 下载方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                FileUtils<span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> io<span class="token punctuation">)</span> <span class="token punctuation">{</span>                io<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常，Download = "</span> <span class="token operator">+</span> io<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>每次的下载顺序都是不一样的，可以断定线程是交替执行的，谁先下完谁就现出现</p><ul><li>子类继承Thread类具有多线程能力</li><li>启动线程：<code>子类对象.start()</code></li><li><strong>不推荐使用</strong>：避免OOP单继承的局限性</li></ul><h4 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建线程方法之一：实现Runnable接口，重写run()方法，调用start开启线程</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Run方法线程体</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"凯撒简单啦大家"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Runnable接口的实现类对象</span>        TestRunnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建线程对象，通过线程对象开启我们的线程，代理</span><span class="token comment" spellcheck="true">//        Thread thread = new Thread(runnable);</span><span class="token comment" spellcheck="true">//        thread.start();</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// main()方法，主线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在吃饭="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>推荐使用<code>Runnable</code>接口，<code>Thread</code>类也是实现了<code>Runnable</code>接口</p><ul><li>实现<code>Runnable</code>接口具有多线程能力</li><li>启动线程：传入目标对象 + <code>Threa(对象).start()</code></li><li>推荐使用，避免单继承的局限性，灵活方便，方便同一个对象多个线程使用</li></ul><h4 id="实现Callable接口（了解即可）"><a href="#实现Callable接口（了解即可）" class="headerlink" title="实现Callable接口（了解即可）"></a>实现<code>Callable</code>接口（了解即可）</h4><ol><li>实现<code>Callbale</code>接口需要返回值类型</li><li>重写call方法需要抛出异常</li><li>创建目标对象</li><li>创建执行服务：<code>ExceutorService ser = Executors.newFixedThreadPool(1)</code></li><li>提交执行：<code>Future&lt;Boolean&gt; result1 = ser.submit(t1)</code></li><li>获取结果：<code>boolean r1 = result1.get()</code></li><li>关闭服务：<code>ser.shutdownNow()</code></li></ol><p>可以定义返回值、可以抛出异常</p><h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h3><p>真实对象和目标对象都要实现同一个接口</p><p>代理对象要代理真实角色</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>代理对象可以做很多真实对象无法做的事情</p><p>真实对象专注做自己的事情</p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>避免匿名内部类定义过多</p><p>其实质属于函数式编程的概念</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> expression<span class="token punctuation">[</span>表达式<span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> statement<span class="token punctuation">[</span>语句<span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>statements<span class="token punctuation">}</span>a<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete Lambda --> "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程--->"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>理解<code>Functional Interface</code>（函数式接口）</li><li>函数式接口的定义：<ul><li>任何接口，如果只包含唯一的一个抽象方法，那么就是一个函数式接口</li><li>对于函数式接口可以直接用Lambda表达式创建该接口的对象</li></ul></li></ul><p><strong>推导</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love You6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3、静态内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Like2</span> <span class="token keyword">implements</span> <span class="token class-name">Love</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love You2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Love love <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        love <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4、局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">Like3</span> <span class="token keyword">implements</span> <span class="token class-name">Love</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love You3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        love <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5、匿名内部类，没有类的名称，必须借助接口或者父类</span>        love <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love You4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6、用Lambda简化</span>        love <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love You5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7、再次简化</span>        love <span class="token operator">=</span> TestLambda<span class="token operator">:</span><span class="token operator">:</span>lambda<span class="token punctuation">;</span>        love<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1、定义一个函数式接口</span><span class="token keyword">interface</span> <span class="token class-name">Love</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2、实现类</span><span class="token keyword">class</span> <span class="token class-name">Like</span> <span class="token keyword">implements</span> <span class="token class-name">Love</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I Love You"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Lambda在只有一行的情况下才可以进行简化</p><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><h3 id="五大状态"><a href="#五大状态" class="headerlink" title="五大状态"></a>五大状态</h3><p><img src="http://nanxiang-liu.test.upcdn.net/image/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BA%94%E5%A4%A7%E7%8A%B6%E6%80%81.png" alt="image-20200505155701072"></p><h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><ul><li>不推荐使用JDK提供的<code>stop()</code>、<code>destroy()</code>方法</li><li>推荐使用线程自己停下来</li><li>使用一个标志位进行终止变量，也就是说当<code>flag = false</code>的时候，线程停止运行</li></ul><h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><ul><li><code>sleep(Time)</code>指定当前线程阻塞的毫秒数</li><li>sleep存在异常<code>InterruptedException</code></li><li>sleep时间达到后线程进入就绪状态</li><li>sleep可以模拟网络延迟，倒计时等功能</li><li>每个对象都有一个锁，sleep不会释放锁对象</li></ul><h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><ul><li>礼让线程，让当前正在执行的线程暂停，但是不阻塞</li><li>将线程从运行状态转为就绪状态</li><li><strong>让CPU重新调度，注意：线程礼让不一定成功！！！</strong></li></ul><h3 id="Join插队"><a href="#Join插队" class="headerlink" title="Join插队"></a>Join插队</h3><p>Join合并线程，等待此线程执行完毕了再执行其他线程，其他线程阻塞</p><p>在条件之前Join线程和主线程并行，是CPU随机调度的，所以会出现并行抢夺资源的例子存在</p><h2 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h2><h3 id="Thread-State"><a href="#Thread-State" class="headerlink" title="Thread.State"></a>Thread.State</h3><p>线程状态。线程可以处于以下状态之一：</p><ul><li><a href="../../java/lang/Thread.State.html#NEW"><code>NEW</code></a><br>尚未启动的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#RUNNABLE"><code>RUNNABLE</code></a><br>在Java虚拟机中执行的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#BLOCKED"><code>BLOCKED</code></a><br>被阻塞等待监视器锁定的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#WAITING"><code>WAITING</code></a><br>正在等待另一个线程执行特定动作的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#TIMED_WAITING"><code>TIMED_WAITING</code></a><br>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#TERMINATED"><code>TERMINATED</code></a><br>已退出的线程处于此状态。 </li></ul><p>一个线程可以在给定时间点处于一个状态。 这些状态是不反映任何操作系统线程状态的虚拟机状态。 </p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><ul><li>Java提供一个线程调度器来监控程序中启动后进入就绪的状态的所有线程，线程调度器按照<strong>优先级</strong>决定应该调度那个线程来执行。</li><li>线程的优先级用数字表示，范围从1~10<ul><li>Thread.MIN_PRIORITY = 1</li><li>Thread.MAX_PRIORITY = 10</li><li>Thread.NORM_PRIORITY = 5</li></ul></li><li>使用以下方式获取或改变优先级<br><code>getPriority().setPriority(int xxx)</code></li></ul><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕<ul><li>后台记录操作日志</li><li>监控内存</li><li>垃圾回收</li></ul></li></ul><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>形成条件：队列+锁——形成线程安全</p><ul><li>同一个对象被多个线程同时操作</li><li>处理多线程的问题的时候，多个线程访问同一个对象，并且某些线程还需要修改该对象的时候我们就需要线程同步，线程同步其实就是一种等待，多个访问对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面的线程使用完毕了，下一个线程再进行使用</li></ul><h2 id="线程同步-1"><a href="#线程同步-1" class="headerlink" title="线程同步"></a>线程同步</h2><p>由于同一个进程的多个线程共享一块存储空间，在带来方便的同时也是带了冲突的问题，比如抢夺资源等，为了保证数据在方法中被访问的正确性，一般来说在访问的同时加入<strong>锁机制</strong>，也就是<strong>synchronized</strong>，当一个线程获得对象的排他锁的时候，独自占领整个当前的整个资源，其余线程想要使用当前资源就必须等待，前一个线程使用后释放锁即可，就会被下一个使用线程抢夺；但是！！！也会存在以下问题：</p><ul><li>一个线程在持有锁的时候会导致其他所有需要该锁的线程挂起</li><li>在多线程的竞争下，加锁，释放锁，对导致较多的上下文切换，和调度延迟问题，会导致优先级倒置， 引发性能问题</li></ul><h2 id="同步方法及同步方法块"><a href="#同步方法及同步方法块" class="headerlink" title="同步方法及同步方法块"></a>同步方法及同步方法块</h2><p>由于可以通过<code>private</code>关键字来保证数据对象只能被方法访问，所以我们需要对方法提出一套机制，这套机制就是<code>synchronized</code>关键字，它包括两种用法：</p><ul><li><code>synchronized</code>方法</li><li><code>synchronized</code>块</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span> <span class="token punctuation">(</span><span class="token keyword">int</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>synchronized</code>方法控制<strong>对象</strong>的访问，每个对象对应一把锁，每个<code>synchronized</code>方法都必须获得调用该方法的对象的锁才可以执行，否则线程回阻塞，方法一旦执行，就回独占该所，知道该方法返回才释放锁，后面被阻塞的线程踩坑获得这个锁，继续执行</p><p><strong>缺点：</strong>一个大方法申明为<code>synchronized</code>将会严重影响效率</p><h3 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h3><p>同步块：<code>synchronized (Obj) {}</code></p><p>Obj称之为同步监视器：</p><ul><li>Object可以是任何对象，但是推荐使用的是共享资源作为同步监视器</li><li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，也就是Class</li></ul><p>同步监视器的执行过程：</p><ol><li>第一个线程访问，锁定同步监视器，执行其中的代码</li><li>第二个线程访问，发现同步监视器被锁定，无法进行访问</li><li>第一个线程访问完毕，解锁同步监视器</li><li>第二个线程访问，发现同步监视器没有被锁定，进行访问，执行其中的代码</li></ol><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>多个线程各自抢占一些共享资源，并且相互等待其他线程占有的资源才能运行，而导致两个或多个线程都在等待对方释放资源，都停止执行的情形，<strong>某一个同步代码块内部同时拥有两个以上对象的锁</strong>的时候，就会发生死锁的问题</p><h3 id="死锁的避免"><a href="#死锁的避免" class="headerlink" title="死锁的避免"></a>死锁的避免</h3><p>产生死锁的四个必要条件：</p><ol><li>互斥条件：一个资源每次之恶能被一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞的时候，以获取的资源保持不放</li><li>不剥夺条件：进程以获得的资源，在未使用完之前，不能强行进行剥夺</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li></ol><p>只要想办法破除其中的任意一个或多个条件就可以避免死锁的产生</p><h2 id="Lock（锁）"><a href="#Lock（锁）" class="headerlink" title="Lock（锁）"></a>Lock（锁）</h2><p>从JDK1.5开始，Java提供了更加强大的线程同步机制——通过现实定义同步锁对象来时实现同步，同步锁使用<code>Lock</code>对象充当</p><p><code>java.util.concurrent.locks.Lock</code>接口时控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对<code>Lock</code>对象进行加锁，线程开始访问共享资源之前应当先获得<code>Lock</code>对象</p><p><code>ReentrantLock</code>类实现了<code>Lock</code>，它拥有和<code>synchronized</code>相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是<code>ReentrantLock</code>，因为可以显示加锁，并且控制释放锁</p><h2 id="Synchronized与Lock的对比"><a href="#Synchronized与Lock的对比" class="headerlink" title="Synchronized与Lock的对比"></a>Synchronized与Lock的对比</h2><ul><li>Lock是显示加锁（手动开启和<strong>关闭锁</strong>）synchronized是隐式锁，出了作用域自动释放</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来进行线程调度，相对来说性能更好，并且具有更好的拓展性能</li><li>优先使用的顺序：Lock &gt; 同步代码块（进入了方法体，并且分配了相对应的资源） &gt; 同步方法（在方法体之外）</li></ul><h1 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h1><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>场景：<strong>生产者和消费者问题</strong></p><ul><li>仓库中只能存放一件产品，生产者将生产出的产品放入仓库，消费者把仓库中的产品取走消费</li><li>如果仓库中没有产品，生产者将产品放入仓库，否则停止生产并等待仓库为空</li><li>如果仓库仓库中有产品，消费者可以将产品取走并进行消费，否则停止消费并等待，直到仓库中有产品为止</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这是一个线程同步的问题，生产者和消费者共享共一个资源，并且生产者和消费者之间互为依赖，互为条件</p><ul><li>对于生产者而言，没有生产产品之前，要通知消费者等待，而生产了产品之后又要马上通知消费者消费</li><li>对于消费者而言，在消费之后要通知生产者已经结束消费了，需要生产新的产品来进行提供消费</li><li>在这个问题中仅仅只有<code>synchronized</code>是不够的<ul><li><code>synchronized</code>可以防止并发的问题发生，并且更新同一个共享资源，实现了同步</li><li><code>synchronized</code>不能用来实现不同线程之间的消息传递</li></ul></li></ul><p>其中Java提供了几个方法解决线程之间通信的问题：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>wait()</code></td><td>表示线程一只等待，直到其他线程通知，和<code>sleep</code>不同，这个方法会释放锁</td></tr><tr><td><code>wait(long timeout)</code></td><td>指定等待的毫秒数</td></tr><tr><td><code>notify()</code></td><td>唤醒一个处于等待状态的线程</td></tr><tr><td><code>notifyAll()</code></td><td>唤醒同一个对象上所有调用<code>wait()</code>方法的线程，优先级别高的线程优先调度</td></tr></tbody></table><blockquote><p>注意：只要是使用Object类的方法，都只能在同步方法或同步代码块中使用，否则会抛出<code>IllegaiMonitorStateException</code></p></blockquote><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>并发协作模型“生产者/消费者模式”–&gt;管程法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SynContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生产者</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    SynContainer container<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>SynContainer container<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生产</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            container<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产了"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"朵花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 消费者</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    SynContainer container<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>SynContainer container<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买了--->"</span> <span class="token operator">+</span> container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">"朵花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 产品</span><span class="token keyword">class</span> <span class="token class-name">Chicken</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Chicken</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 缓冲区</span><span class="token keyword">class</span> <span class="token class-name">SynContainer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 容器的大小</span>    Chicken<span class="token punctuation">[</span><span class="token punctuation">]</span> chickens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生产者放入产品</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Chicken chicken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 产品满了，等待消费者消费</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> chickens<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通知消费者消费，生产等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果没有满，就需要丢入产品</span>        chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> chicken<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通知消费者消费</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 消费者消费产品</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Chicken <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断消费者是否消费</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等待生产者生产，消费者等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果可以消费</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        Chicken chicken <span class="token operator">=</span> chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 消费完了，通知生产者生产</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chicken<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>生产者：负责生产数据的模块（可能是方法、对象、线程、进程）</li><li>消费者：负责处理数据的模块（可能是方法、对象、线程、进程）</li><li>缓冲区：消费者不能直接使用生产者的护具，他们之间有个<strong>缓冲区</strong></li></ul><p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区取出数据</strong></p><p>并发协作模型“生产者/消费者模式”–&gt;信号灯</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TV tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生产者——演员</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    TV tv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span>TV tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"正在电视剧中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"广告"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 消费者——观众</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    TV tv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Watcher</span><span class="token punctuation">(</span>TV tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tv<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 产品——节目</span><span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * 演员表演，观众等待，观众观看，演员等待     */</span>    String voice<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 表演</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String voice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"演员表演了："</span> <span class="token operator">+</span> voice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通知观众观看</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>voice <span class="token operator">=</span> voice<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 观看</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观众观看了："</span> <span class="token operator">+</span> voice<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通知演员表演</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>背景：经常创建和销毁、使用量特别大的资源，比如并发的情况下的线程，对性能影响很大</p><p>如何实现：提前创建多个线程，放入线程池中，使用的时候直接获取，使用完毕放回池中，可以避免繁琐的重复创建和销毁，实现重复利用</p><p>好处：</p><ul><li>提高响应速度（因为减少了线程创建的时间）</li><li>降低消耗资源（线程的创建和销毁都是很消耗系统资源的，因为重复利用了线程池中的线程）</li><li>便于线程的管理<ul><li><code>corePoolSize</code>：核心池的大小</li><li><code>maximumPoolSize</code>：最大线程数</li><li><code>keepAliveTime</code>：线程没有任务的时候醉倒保持多长时间后会终止</li></ul></li></ul><h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><p>JDK5.0开始提供线程池相关的API：<code>ExecutorService</code>、<code>Executors</code></p><p>ExecutorService：真正的线程池接口</p><ul><li>void execute(Runnable  command)：执行任务、命令的，没有所谓的返回值，一般是用来执行Runnable</li><li><T>Future<T> submit(Callable<T> task)：执行任务，有返回值，一般用来执行Callable</li><li>void shutdown()：关闭连接池</li></ul><p>Executors：工具类，线程池的工厂类，用于创建并返回不同类型的线程池</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="2020/05/02/hou-duan/java/gao-jie/jvm/"/>
      <url>2020/05/02/hou-duan/java/gao-jie/jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/JVM%E4%BD%8D%E7%BD%AE.png" alt="JVM位置"></p><h2 id="JVM的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h2><p>.java-Class File-类加载器（Class Loader）-运行时数据区</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>作用：加载Class文件</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" alt="类加载器"></p><ol><li>虚拟机自带的加载器</li><li>启动类（根）加载器</li><li>扩展类加载器</li><li>应用程序加载器 </li></ol><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ul><li><p>类记载器收到类记载的请求</p></li><li><p>将这个请求向上委托给父类加载器去完成，一直向上，直到启动类加载器</p></li><li><p>启动类加载器检查是否能加载到当前的这个类，能加载的话就结束，使用当前加载器，否则抛出异常，通知子类加载器进行加载</p></li><li><p>重复第三步</p></li><li><p>null：Java调用不到（C、C++）</p></li><li><p>Java == C++：去掉繁琐的东西，指针之类的，最后调用的还是C++写的</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    双亲委派机制，安全性出发    1、APP-->EXC-->BOOT（最终执行的地方）    也就是说会层层向上找，如果有的话优先执行根加载器里面的，当没有触发下面的机制    2、BOOT-->EXC-->APP（最终执行的地方）    当根加载器没有这个类，会到扩展类加载器寻找，当没有的时候才回到当前类执行main()方法     */</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    1、类加载器收到类加载的请求    2、将这个请求向上委派给父类去加载，一直向上，知道启动器类记载APP    3、启动类加载器检查是否能加载到当前的这个类，能加载的话就结束，使用当前加载器，否则抛出异常，通知子类加载器进行加载    4、重复第三步    null：Java调用不到（C、C++）    Java == C++：去掉繁琐的东西，指针之类的，最后调用的还是C++写的     */</span><span class="token punctuation">}</span></code></pre><h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p>内存溢出示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutOfMemory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    死循环，a()无限调用b()，同时b()无限调用a()，造成死循环，内存溢出     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">OutOfMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>组成沙箱的基本组件：</p><ul><li><p><code>字节码校验器</code>（bytecode verifier）：确保Java类文件遵循Java语言规范，这样可以帮助Java程序员实现内存保护。但是并不是所有的的类文件都会经过字节码校验阶段，比如核心类之类的类就不会经过字节码校验阶段，因为已经是无法修改的文件。</p></li><li><p><code>类装载器</code>（class loader）：其中类装载器在3个防霾你对Java沙箱起作用</p><ul><li>它防止恶意代码去干涉善意的代码。（双亲委派机制）</li><li>它保护了被信任的类库边界。</li><li>它将代码归入保护域，确定了代码可以进行哪些操作。</li></ul><p>虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成每一个被装载的类都会得到一个名字，这个命名空间是由Java虚拟机为每一个类装载维护的，相互之间不可见</p><p>类装载器采用的是<code>双亲委派机制</code>模式。</p><ol><li>从最内层的JVM自带类加载器开始加载，外层恶意同名的类得不到加载从而无法使用</li><li>由于严格通过包的路径来区分了访问域，外层恶意的类通过内置的代码也无法访问到内层类，破坏代码自然也就无法生效</li></ol></li><li><p><code>存取控制器</code>（access controller）：存取控制器可以控制核心API堆操作系统的存取权限，而这个控制的策略的设定，可以由用户去指定</p></li><li><p><code>安全管理器</code>（security manager）：是核心API喝操作系统之间的主要接口，实现权限控制，比存取控制器优先级高。</p></li><li><p><code>安全软件包</code>（security package）：java.security下的类喝扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：</p><ul><li>安全提供者</li><li>消息摘要</li><li>数字签名</li><li>加密</li><li>鉴别</li></ul></li></ul><h2 id="Native关键字"><a href="#Native关键字" class="headerlink" title="Native关键字"></a>Native关键字</h2><p>Native：带了native 关键字段的，说明Java的作用域到达不了，会直接到调用底层语言的库</p><p>会进入本地方法栈</p><p>调用本地方法接口 JNI</p><p>JNI：扩展Java的使用，融合不同的编程语言为Java所用</p><p>最初想融合C AND C++</p><p>在内存区域中专门开辟了，本地方法栈，为了登记Native方法，会在最终执行的时候会加载本地方法栈，通过JNI接口</p><h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><p>程序计数器</p><p>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向一条指令的过程，也即将要执行的指令代码），在执行迎请读取下一条指令的时候，是一个非常小的内存空间，几乎可以忽略不计</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p><code>Method Area</code>方法区</p><p>​    方法区是被所有线程共享的、所有字段、字节码，以及一些特殊的方法，如构造函数，接口代码也是在此定义的，；</p><p>也就是说所有定义的方法的信息都是保存在该区域，，<strong>该区域属于共享区间</strong></p><p>其中：静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中， 但是，实际变量是存在堆内存中的，和方法区无关</p><p>也就是：static、final、Class（方法区存的东西）</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>数据结构，一般使用队列做比较</p><p>程序 = 数据结构 + 算法（提升使用的），而不是程序 = 框架 + 业务逻辑（吃饭==必会的） ：SSM + SpringBoot + SpringCloud</p><p>先进后出，后进先出（桶的概念）</p><p>栈内存：主干程序的运行，生命周期和线程同步，线程结束，栈内存也就是释放了</p><p><strong>对于栈来说不存在垃圾回收问题</strong>，一旦线程结束，栈就结束了</p><p>栈帧：</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/%E6%A0%88%E7%90%86%E8%A7%A31.png" alt="栈理解"></p><p>栈满了会抛出：<strong>StackOverflowError</strong></p><h3 id="栈-堆-方法区（常量池）"><a href="#栈-堆-方法区（常量池）" class="headerlink" title="栈+堆+方法区（常量池）"></a>栈+堆+方法区（常量池）</h3><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/%E6%A0%88%E3%80%81%E5%A0%86%E3%80%81%E6%96%B9%E6%B3%95%E5%8C%BA.png" alt="栈、堆、方法区"></p><h3 id="对象实例化的过程在内存中"><a href="#对象实例化的过程在内存中" class="headerlink" title="对象实例化的过程在内存中"></a>对象实例化的过程在内存中</h3><h2 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h2><ul><li><p>Sun公司的    HotSpot<code>Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)</code></p></li><li><p>BEA  JRockit</p><ul><li><p><strong>JRockit</strong>是一个<a href="https://zh.wikipedia.org/wiki/专有软件" target="_blank" rel="noopener">专有</a><a href="https://zh.wikipedia.org/wiki/Java虚拟机" target="_blank" rel="noopener">Java虚拟机</a>（JVM），最初是由<a href="https://zh.wikipedia.org/w/index.php?title=Appeal_Virtual_Machines&action=edit&redlink=1" target="_blank" rel="noopener">Appeal Virtual Machines</a>开发的，2002年被<a href="https://zh.wikipedia.org/wiki/BEA_Systems" target="_blank" rel="noopener">BEA Systems</a>收购<a href="https://zh.wikipedia.org/zh-cn/JRockit#cite_note-1" target="_blank" rel="noopener">[1]</a>，2007年BEA Systems被<a href="https://zh.wikipedia.org/wiki/Oracle" target="_blank" rel="noopener">Oracle</a>收购，2008年又成为<a href="https://zh.wikipedia.org/w/index.php?title=Oracle_Fusion_Middleware&action=edit&redlink=1" target="_blank" rel="noopener">Oracle Fusion Middleware</a>的一部分。</p><p>在<a href="https://zh.wikipedia.org/wiki/JavaOne" target="_blank" rel="noopener">JavaOne</a>2010大会上，<a href="https://zh.wikipedia.org/wiki/Oracle" target="_blank" rel="noopener">Oracle</a>宣布JRockit的优秀特性将会在<a href="https://zh.wikipedia.org/wiki/OpenJDK" target="_blank" rel="noopener">OpenJDK</a>上实现。<a href="https://zh.wikipedia.org/zh-cn/JRockit#cite_note-2" target="_blank" rel="noopener">[2]</a><a href="https://zh.wikipedia.org/zh-cn/JRockit#cite_note-3" target="_blank" rel="noopener">[3]</a>当前，JRockit和<a href="https://zh.wikipedia.org/wiki/HotSpot" target="_blank" rel="noopener">HotSpot</a>正在集成，目标是在JDK 8发布之时发布集成后的代码库。</p><p>2011年5月，Oracle宣布JRockit免费发布，并确认他们计划在OpenJDK上移植JRockit的特性。</p></li></ul></li><li><p>IBM J9VM</p><ul><li>J9大量为WebSphere等中间件做优化，它的RT版本主要也是为了WAS RT之流做的；另外就是做Specjbb的优化了</li></ul></li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>Heap，一个JVM只有一个堆内存，堆内存的大小是可以调节的</p><p>类加载器读取了类文件后，一般会把<code>类</code>、<code>方法</code>、<code>常量</code>，保存的是引用类型的真实对象</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/%E5%A0%86%E7%9A%84%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86.png" alt="image-20200429010758320"></p><h3 id="新生区（真实的是幸存区动态的）"><a href="#新生区（真实的是幸存区动态的）" class="headerlink" title="新生区（真实的是幸存区动态的）"></a>新生区（真实的是幸存区动态的）</h3><p>经历了一次GC没有回收的会进入到幸存区，0和1区不断交换，当超过设定GC次数会进入养老区</p><ul><li>伊甸园区（Eden Space）</li><li>幸存0区</li><li>幸存1区</li></ul><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/OOM%E7%90%86%E8%A7%A3.png" alt="image-20200429012310959"></p><ul><li>类/对象：的诞生和成长的地方，甚至死亡</li><li>伊甸园：所有的对象都是在伊甸园<code>new</code>出来的</li></ul><p>经过研究表示，99%的对象都是临时对象</p><h3 id="老年区"><a href="#老年区" class="headerlink" title="老年区"></a>老年区</h3><p>大多数情况不会被GC掉，当老年区的内存满了，会进行<code>重GC，也就是Full GC</code></p><h3 id="永久区"><a href="#永久区" class="headerlink" title="永久区"></a>永久区</h3><p>这个区域常驻内存的，用来存放JDK自身携带的<code>Class</code>对象。Interface元数据，存储的时Java运行时的环境，放在磁盘里的</p><p>这个区域不会进行GC，关闭JVM虚拟机就会释放这个区域的</p><ul><li>JDK1.6之前：永久代，常量池时在方法区中。</li><li>JDK1.7：永久代，退化了，叫做<code>去永久代</code>，常量池在堆中</li><li>JDK1.8之后：无永久代，叫做元空间，常量池放在元空间中</li></ul><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/JDK1.8%E5%A0%86%E8%A7%A3%E9%87%8A.png" alt="JDK1.8堆解释"></p><p>元空间：逻辑上存在，物理上不存在</p><h3 id="堆内存调优"><a href="#堆内存调优" class="headerlink" title="堆内存调优"></a>堆内存调优</h3><h4 id="MAT-Jprofiler作用"><a href="#MAT-Jprofiler作用" class="headerlink" title="MAT Jprofiler作用"></a>MAT Jprofiler作用</h4><ul><li>分析Dump内存文件，快速定位内存泄漏</li><li>获得堆中的数据</li><li>获得大的对象</li></ul><h4 id="JVM调优参数"><a href="#JVM调优参数" class="headerlink" title="JVM调优参数"></a>JVM调优参数</h4><ul><li><code>-Xms</code>初始化内存分配大小，默认（1/64）</li><li><code>-Xmx</code>设置最大分配内存，默认（1/4）</li><li><code>-XX:+PrintGCDetails</code>  打印GC垃圾回收信息</li><li><code>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</code> OOM Dump</li></ul><h3 id="GC（垃圾回收器）"><a href="#GC（垃圾回收器）" class="headerlink" title="GC（垃圾回收器）"></a>GC（垃圾回收器）</h3><p>垃圾回收的区域只有在堆中和方法区</p><p>JVM在进行GC的时候，并不是堆这三个区域进行统一回收，大部分的时候都是在新生代</p><ul><li>新生代</li><li>幸存区（from、to）</li><li>老年区</li></ul><p>GC两种类型：轻GC（普通GC）、重GC（全局GC）</p><h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><h4 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h4><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95.png" alt="image-20200430200611515"></p><ul><li>优点：不需要额外的空间</li><li>缺点：需要扫描两次，严重浪费时间，产出内存碎片</li></ul><h4 id="标记压缩"><a href="#标记压缩" class="headerlink" title="标记压缩"></a>标记压缩</h4><p><img src="D:%5C%E6%B1%82%E8%81%8C%5CJava%E6%80%BB%E7%BB%93%5CJVM%5C%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95.png" alt="image-20200430225118055"></p><p>标记清除再优化</p><p>多了移动成本</p><h4 id="复制算法（年轻代一般使用From和To）"><a href="#复制算法（年轻代一般使用From和To）" class="headerlink" title="复制算法（年轻代一般使用From和To）"></a>复制算法（年轻代一般使用From和To）</h4><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.png" alt="image-20200430182935144"></p><p>每次GC都会清理Eden区活得对象移动到幸存区被GC后，就会是空的</p><p>也就是说每次GC过后幸存区活下来的对象都会是换一个幸存区，比如有幸存一区to和二区from，一区里面GC了之后有了两个幸存对象，那么一区就会和二区交换位置（复制算法从上到下），变成前幸存一区（现幸存二区），这时候二区就由from变成了to</p><p><img src="http://nanxiang-liu.test.upcdn.net/image/JVM/From%E5%92%8Cto%E7%9A%84%E4%BA%A4%E6%8D%A2.png" alt="image-20200430200055132"></p><ul><li>好处：没有内存碎片</li><li>坏处：浪费一半的to区空间；但是假设有个对象100%存活（极端情况）</li></ul><p>复制算法使用最佳场景：对象存货度较低的时候，新生区</p><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内存效率：复制算法 &gt; 标记算法 &gt; 标记压缩算法（时间复杂度）</p><p>内存整齐度：复制算法 = 标记压缩算法 &gt; 标记清除算法</p><p>内存利用率：标记压缩算法 = 标记清除算法 &gt; 复制算法</p><h3 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a>年轻代</h3><p>存活率低</p><p>复制算法</p><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><p>区域大：存活率高</p><p>标记清除 + 标记现实混和</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RestFul 统一响应格式与自动包装</title>
      <link href="2020/04/21/cheng-xu-she-ji/tong-yi-xiang-ying-ge-shi-yu-zi-dong-bao-zhuang/"/>
      <url>2020/04/21/cheng-xu-she-ji/tong-yi-xiang-ying-ge-shi-yu-zi-dong-bao-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="RestFul统一格式"><a href="#RestFul统一格式" class="headerlink" title="RestFul统一格式"></a>RestFul统一格式</h1><p>现在大多数的项目都是前后端分离的项目，况且有的微服务也是采用的HTTP形式进行交互，使用一套前后端约定的格式进行传递参数以及响应格式也是很重要的。</p><h2 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h2><ol><li>包装格式，在真正的数据外层进行多一个包装，常用的比如：<code>Code</code>、<code>Massage</code>、<code>tag</code>等数据集。如果接口报错，响应<code>Status</code>虽然依旧为200成功，但是里面的<code>Code</code>修改，方便后端进行错误定位</li><li>不包装但是响应数据，需要什么返回什么；如果接口报错，更改响应<code>Status</code>，同时进行换一种响应格式，告知前端以及后端错误是什么，打日志</li></ol><h2 id="结构示例"><a href="#结构示例" class="headerlink" title="结构示例"></a>结构示例</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"phone"</span><span class="token operator">:</span> <span class="token string">"15625592095"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">}</span></code></pre><p>以上用例是返回的结果</p><h3 id="第一种包装返回的格式"><a href="#第一种包装返回的格式" class="headerlink" title="第一种包装返回的格式"></a>第一种包装返回的格式</h3><p>接口正常的：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    code<span class="token operator">:</span> <span class="token number">200</span>，    msg<span class="token operator">:</span> <span class="token string">"OK"</span>，    data<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"phone"</span><span class="token operator">:</span> <span class="token string">"15625592095"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">500</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接口异常的：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    code<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    msg<span class="token operator">:</span> e.getMassage(<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>备注：</strong>这里的code以及msg仅仅只是测试用例，在实际生产中应当提前和上下级确定好code的格式以及msg返回的数据。</p><p>这种方式呢，无论如何，接口返回的响应的数据结构都是要一致的</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>每个接口统一的一个类型，可以返回自己的，最后再统一包装。</p><p>首先定义 泛型响应类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义处理语句枚举类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ResultEnum <span class="token punctuation">{</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO: 失败定义</span><span class="token punctuation">}</span></code></pre><p>定义成功以及失败的处理方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 成功的处理方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Respinse <span class="token function">success</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result<span class="token operator">&lt;</span>Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reuslt<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reuslt<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Response <span class="token function">success</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>object <span class="token operator">!=</span> null <span class="token operator">?</span> object <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Response <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Response <span class="token function">success</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 失败的处理方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Response <span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Response <span class="token function">error</span><span class="token punctuation">(</span>ResultEnum resultEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span>resultEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resultEnum<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我把响应类定位泛型，主要是想到可能出现的不同的code以及自定义出现的code</p><p>使用起来也是很简单，直接调用<code>ResultUtils.success()</code>就可以了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Response <span class="token function">query</span><span class="token punctuation">(</span>Test test<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResultUtils<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>出异常了直接使用统一异常返回处理</p><p>如果觉得麻烦的话请直接return</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Response <span class="token function">query</span><span class="token punctuation">(</span>Test test<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"测试"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>仅仅只是这样还是不够的，需要统一包装成需要的格式，两种：</p><ol><li>使用<code>ResponseBodyAdvice</code>（存在偶尔的BUG）</li><li>使用切面</li></ol><h5 id="ResponseBodeyAdvice"><a href="#ResponseBodeyAdvice" class="headerlink" title="ResponseBodeyAdvice"></a>ResponseBodeyAdvice</h5><p>总的来说还是个很好的方案，但是不在手动定义的情况下，Spring MVC是根据返回对象类型寻找<code>HttpMessageCoverter</code>的</p><ol><li>如果返回类型为String类型的对象时候，会使用<code>StringHttpMessageConverter</code>，报类型转换异常错误</li><li>如果定义为<code>Object</code>的时候，返回为null，直接不走<code>ResponseBodeyAdvice</code></li></ol><p>解决方式：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodeyAdvice</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MediaType JSON_MEDIA_TYPE <span class="token operator">=</span> MediaType<span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>MethodParameter methodParameter<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 全部都走这个Advice，也可以自己过滤</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> MethodParameter methodParameter<span class="token punctuation">,</span>                                  MediaType mediaType<span class="token punctuation">,</span>                                  Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> aClass<span class="token punctuation">,</span>                                  ServerHttpRequest serverHttpRequest<span class="token punctuation">,</span>                                  ServerHttpResponse serverHttpResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object r <span class="token operator">=</span> HttpResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aClass <span class="token operator">==</span> StringHttpMessageConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            serverHttpResponse<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>JSON_MEDIA_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> JsonUtil<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 格式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
